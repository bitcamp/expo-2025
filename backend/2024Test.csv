Project Title,Submission Url,Project Status,Judging Status,Highest Step Completed,Project Created At,About The Project,"""Try it out"" Links",Video Demo Link,Opt-In Prizes,Built With,Submitter First Name,Submitter Last Name,Submitter Email,Notes,Bitcamp Track Challenge,Will You Be Present To Demo In Person On Sunday?,Tell Us About Your Technology Experience This Weekend.,"What School Do You Attend? If You Are No Longer In School, What University Did You Attend Most Recently?","Did You Register A Go Daddy Registry Domain Name This Weekend? If So, What Domain Did You Register? Why Did You Pick That Name?",Team Colleges/Universities,Additional Team Member Count,Team Member 1 First Name,Team Member 1 Last Name,Team Member 1 Email
DoDEx,https://bitcamp2024.devpost.com/submissions/507099-dodex,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 21:01,"Inspiration

This was an interesting problem statement as it addresses the need for efficiency and accuracy in handling defense contract information. By using AI tools and technologies, we wanted to streamline the process of parsing and extracting valuable data from Defense Contract Notices.

What it does

DoDEx serves as an intelligent parser capable of automatically extracting key attributes, currently from Defense Contract Notices. It processes the notices to capture relevant information such as Federal Agency, Contract Amounts, Dates, Company Names, Locations and more. It then validates the information and gives us an accuracy for the information.

How we built it

We built the solution by combining various AI and machine learning techniques, including LLM (Large Language Model), information extraction, and data analysis. Initially, we scraped the website of Defense Contracts from the provided source using web scraping tools. Next, we employed LLM to parse the text and identify relevant entities and attributes within the contract notices. We extracted information such as Federal Agency names, contract amounts, dates, and company names.

Challenges we ran into

There were several challenges we faced like feeding the right prompt to our LLM, finding a key tool for validating our generative data. We found that the answer to that is Retrieval Augmented Generation (RAG). It's basically like a paradox - ""How is my LLM generating correct data? because my LLM says so!!""

Accomplishments that we're proud of

Despite the challenges, we're proud to have developed a highly effective solution that addresses the complex requirements of extracting and categorizing defense contract data in a limited amount of time. Our system not only streamlines the process but also enhances the accuracy and reliability of the extracted information through advanced validation techniques.

What we learned

Through the development of this problem, we gained valuable insights into the intricacies of data extraction, categorization, and validation, particularly within the context of defense contracts. We deepened our understanding of the challenges involved in handling large volumes of heterogeneous data and honed our skills in leveraging advanced techniques to overcome these challenges effectively. Additionally, we learned the importance of robust validation mechanisms in ensuring the accuracy and reliability of extracted data, especially in critical domains such as defense.

What's next for DoDEx

Further ahead, we are aiming to expand the scope of this project by refining the prompt to increase accuracy and we also plan to enhance our solution to different domains like law, education, healthcare and more!
",https://github.com/nidhikamath2102/WebScraper,,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group","python, openai, guardrails, rag, provenanceembedding, vscode, pycharm, generativeai",Nidhi,Kamath,kamathnidhi98@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"We used Provenance Embedding for validating our extracted data. It was an interesting find and we found it after a lot of research, trial and errors.",Virginia Tech University,,Virginia Tech,3,Kunal,Mahato,mahatokunal41@gmail.com
Untitled,,Draft,Pending,Manage team,4/19/2024 21:06,,,,,,Kunal,Mahato,mahatokunal41@gmail.com,,,,,,,,0,,,
Kadak,https://bitcamp2024.devpost.com/submissions/507102-kadak,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 21:11,"Inspiration

Hard

What it does

PDF-> 

How we built it

flask, python

Challenges we ran into

figuring out how to do embeddings

Accomplishments that we're proud of

learning about embeddings, vectors, NLP, and LLMS

What we learned

working with LLMs and doing AI/ML

What's next for Kadak

faster processing time
",,,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, University Course Catalog Data Extraction and Query Challenge - Xficient","flask, python, langchain, pinecone",Sahil,Jagtap,sahil.jagtap45@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"flask, langchain, pdf reader",George Mason University,,George Mason University,3,Suchita,Hadimani,suchitastargirl@gmail.com
Resolve,https://bitcamp2024.devpost.com/submissions/507106-resolve,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 21:27,"Inspiration

In our increasingly digital world, millions of individuals are trapped in an addictive cycle of doom scrolling. As a result, tasks that could take them a couple hours to complete would spiral into multi day endeavors due to procrastination. Another challenge people face is losing track of their task at hand, leading to someone attempting to do everything rather than completing one goal at a time. This leads to decreased focus and frustration when the person becomes essentially lost in their own work. These effects of procrastination compound on each other, leading towards symptoms of depression, anxiety, or even just unnecessary stress. We build Resolve to combat this, so that you can stay on top of your responsibilities. The name is a testament to the challenges each and every one of us endures to achieve our greatest aspirations, pushing past our limits in order to do so. However, these experiences only make our accomplishments all the more gratifying.

What it does

We created a Chrome extension that uses AI to determine if a page is productive to your intended goal or not. First the user would enable the extension on google chrome, and will be prompted to input their goal for the day. This goal could be anything they are looking to accomplish, and the extension will essentially keep them accountable for that by only allowing the user onto tabs related to the goal. 

The goal is then stored onto the background of the extension, and is called each time a new page is navigated. In addition, the extension scrapes the title of the HTML page rendered as a benchmark to the goal. The title is tokenized and both are then sent to the backend to be classified. We use the OpenAI GPT-3.5 model’s chat completion API to categorize if the prompt is similar to the goal. If it is deemed not similar, the page will be closed, and the user is routed to a new page, which informs the user that they are off task and asks for them to return to work. 

In order to give some leeway between navigating between pages, we set a 20 second delay before the API call is made. This way, general user navigation is not disturbed.

How we built it

We used Plasmo as a framework for our Chrome extension, calling the Chrome API on the front end. On the backend we used Flask as an API endpoint for communication with our OpenAI model. Lastly we used the OpenAI API to provide chat completion.

Challenges we ran into

Our team has not worked with Chrome extensions and OpenAI APIs prior to this event, leading to some learning curve in understanding each framework’s documentation.
We ran into technical challenges on one of our devices, which led to difficulties in the project setup and debugging the background processes on our extension.
Using OpenAI led to rate limit issues, leading us to choosing a model with less overhead.

Accomplishments that we're proud of

Created our first AI application
Created our first Chrome extension that solves a unique problem in a simplistic way

What we learned

We learned a lot about using AI tools and the inner workings of LLMs. Additionally we became more comfortable with reading documentation.

What's next for Resolve

Our next step would be to experiment with different pre-trained models to find one that would optimize effectiveness and overhead. From there we can also explore using Azure Machine Learning to train our own models. Additionally, we want to display real time data that tracks the user’s improvement, as well as persistent storage with databases. Lastly, we would create customizable avatars and additional features to improve the user experience of our product.
",https://github.com/pyl/tyro2,,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp","plasmo, react, flask, openai, chromeapi, typescript, css",Andrew,Yang,andrewyang1015@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"Github - Extremely useful for collaboration
Windows Powershell - Challenging to set up
VsCode - Great!
Supabase - Set up an account, but didn't end up using
OpenAI - Great!",University of Maryland,,University of Maryland - College Park,1,Andy,Diep,adiep@terpmail.umd.edu
uTeach,https://bitcamp2024.devpost.com/submissions/507109-uteach,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 21:38,"Inspiration

Our main inspiration came from a research paper by Logan Fiordland and Richard Mayer which showed that people who study by teaching do way better than people who only study for an exam independently. Despite this, not everyone has someone who will take the time to listen to their presentation and give them feedback. In order to solve this, we decided to create uTeach. 

What it does

The user has two options, to create a PowerPoint slide based on a topic the user wants to learn and to get a PowerPoint slide and voice recording of a presentation graded. The goal is to provide relevant feedback you may receive from any real person who is listening to you present.

How we built it

We us React (Next.js) for the frontend, and python with OpenAI API for the slideshow and audio grading part.

Challenges we ran into

Getting the frontend to connect to python with flask, especially with the user pptx and wav input. We also are all very new to this type of development, and it required staying up all night to finish on time.

Accomplishments that we're proud of

Getting OpenAI to grade the slides and wav input and give constructive feedback. It was very tricky dealing with multiple file types and systems.

What we learned

We learned all about new frameworks and how to build a full-stack application. We wanted to do more than just create the functionality, and are proud of the UI design, even if it is still a little messy.

What's next for uTeach

Make a database for user to capture saved slides, and revisit graded slides to see feedback.
",https://github.com/jsidle1/uTeach-Bitcamp2024.git,,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp","next.js, python, openai, react, javascript",Jack,Sidle,jsidle1@umbc.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"Our main technologies included JavaScript, python, and react. We used GitHub to manage our codebase.",University of Maryland - Baltimore County,,University of Maryland - Baltimore County,2,Julian,chavez,julianchavez13@gmail.com
MarshiesGuard,https://bitcamp2024.devpost.com/submissions/507111-marshiesguard,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 21:39,"Inspiration

We were tired of constantly being wary of sites or links on the internet, or if our emails were secure. As a result, we decided to make a hub that would check for people whether a link was safe, or if an email had been compromised.

What it does

It essentially allows a user to copy and paste a link into the Chrome extension, letting them know whether or not their email has been compromised, or using a comparison between 92 antiviruses, if the link is secure.

How we built it

We built it using a combination of HTML, CSS, javascript and pixel art editing to make custom images and gifs for our processes. 

Challenges we ran into

We ran into several issues along the way, the first being how in the world to make this into a Chrome extension. In all honesty, we are all freshmen who don't have much experience in coding in general, therefore learning all the nitty-gritty of making a Chrome extension was a lot. Aside from that, we also ran into several bugs along the way, one example being how to detect links that we didn't personally put into the code. This was exceptionally difficult, as we didn't know about the mutations handler before, and from a background with little to no Javascript, was a big deal. Additionally, one of us had to learn how to do front end, another had to learn graphic designing in terms of pixel art, for this project to then finally come together in the end. 

Accomplishments that we're proud of

We are very proud of the challenges we overcame aforementioned. As not-so-experienced coders, or artists, it truly was a difficult journey, but with a beautiful project, we can say we are truly marshmallow guards now.

What we learned

Ironically, the member who was experienced in backend on our team ended up doing front end, and the person experienced in frontend ended up doing back end, so they ended up learning the skills that the other had. Additionally, one of our members ended up learning how to do pixel art going from a total beginner, to finally making our cute marshmallow mascot, Marshie! 

What's next for MarshiesGuard

Well, we are hoping to further complete it in the future. There are some implementations we couldn't implement despite the assistance of 5 different mentors T-T, such as a toggle button that is then linked to the hover and turns on or off the hover effects, or the hover effect that immediately fetches the link without actually clicking on the link, and processes it in our extension.
",https://github.com/ZyadKhan05/MarshiesGuard,,"Best UI/UX Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","html, javascript, css, pixelart",Zyad,Khan,zhk6319@gmail.com,,Best Cybersecurity Track Hack - Bitcamp,Yes,"We used HTML, CSS, and JS to create a Google Chrome extension using the Chrome Web Dev tools.","University of Maryland, College Park",,"University of Maryland - College Park, Hillel Academy",2,HassanNakib,Nakib,alhassan.nakib55@gmail.com
Untitled,,Draft,Pending,Manage team,4/19/2024 21:40,,,,,,JonnyRoth2,Roth,jonnyroth12@gmail.com,,,,,,,University of Maryland - College Park,0,,,
Ledger Launchpad,https://bitcamp2024.devpost.com/submissions/507113-ledger-launchpad,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 21:40,"Inspiration

What it does

Tracks bills that are due and paid. 

How we built it

Express and Node Backend, JavaScript Frontend

Challenges we ran into

Connecting server and database

Accomplishments that we're proud of

What we learned

What's next for Ledger Launchpad
","https://github.com/CChiang3/bitcamp2024, https://www.figma.com/file/cACWqGkSlL7AmciIOFHt2L/Bitcamp-2024?type=design&node-id=0%3A1&mode=design&t=8VoZeyhoeLpTpBkk-1",,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best Use of PropelAuth - MLH, Best Financial Hack - Capital One","javascript, express.js, node.js",Yiting,Zheng,sapphire32123@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"Github, Figma, VSCode","University of Maryland, College Park",http://themilkywaytopay.us/,,3,Collin,Chiang,collin.chiang1@gmail.com
Forecasts by the Campfire,https://bitcamp2024.devpost.com/submissions/507115-forecasts-by-the-campfire,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 21:41,"Inspiration

Moving or relocating is a lifechanging milestone, and weather and climate play a big role in people's decisions. Overall climate, frequency of natural disasters, and other geographical features affect housing preferences, so we decided to create a fun and interactive way to allow people to learn what best suits them based on their income, location, and demographic. After extracting and analyzing data, we wanted to gamify our users' experiences by creating an interactive quiz and assigned each user a unique creature that best matches their descriptions and provides them advice on next steps to take.

What It Does

This app uses visualizations from analysis of various datasets relating to weather and climate and their impacts on housing, such as foreclosures, housing costs, and more. The quiz takes in information about the users' income level, financial situation, current home location, and desired home location to assess which creature (ex. Bob the Bird) best suits them. 

How We Built It

We used Jupyter to extract and visualize the data from our selected datasets. We used the Python pandas library to analyze and manipulate data. Based on our findings, we began to develop a prototype in Figma of a potential solution to customers to provide them with personalized housing and financial advice. 

Challenges We Ran Into

We had to learn pandas and Jupyter from scratch, and it was rather difficult to find datasets that matched what we were looking to analyze. Also, it took a while to formulate and settle on the final project idea. 

Accomplishments That We're Proud Of

We were proud that we were able to create something and brainstorm a solution to our findings. We thought all hope was lost when we did not have an idea, but we are glad we toughed it out in the end.

What We Learned

We learned that there is so much about computer science that there is to learn and be fascinated about, and this project inspired us to look more into data science and its applications in the real world. It was a lot of fun to learn how to visualize data on Jupyter with Pandas and find datasets matching the questions we wanted to answer.

What's Next for Forecasts by the Campfire

We plan to implement the application by creating a lightweight app using Python Flask. We also hope to gather more data from a wider, more diverse set of data to be able to make inferences beyond the scope of the United States of America.
","https://github.com/RachelK23/Forecasts-by-the-Campfire, https://docs.google.com/document/d/1_WhKPNA581pRaOjIHuDGnqfz2RR0ch_FddO6p1jU9to/edit?usp=sharing",,"Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best DEI Hack sponsored by Fidelity - MLH, Best Use of APIs related to Housing/Climate Change - Fannie Mae, Best Financial Hack - Capital One","python, pandas, jupyter, kaggle, figma, git, github, matplotlib",Claire,Chen,claire13985@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"We used Python pandas, Jupyter, and Figma to create this project.","University of Maryland, College Park",,University of Maryland - College Park,1,Rachel,Kim,yseo7045@gmail.com
Untitled,,Draft,Pending,Manage team,4/19/2024 21:49,,,,,,JonnyRoth2,Roth,jonnyroth12@gmail.com,,,,,,,University of Maryland - College Park,0,,,
upsanddowns,https://bitcamp2024.devpost.com/submissions/507118-upsanddowns,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 21:53,"Inspiration


What inspired us to build this project is the constant financial problems young adults face. We 
 wanted to build something that made it easy for anyone to quickly make better financial decisions.


What it does


UPS & DOWNS is a personal finance web application meant to help with making trading decisions. 


How we built it


We built this using the MEVN stack with a mix of Python for building the prediction AI models.


Challenges we ran into


Fatigue
Merge Conflicts
Finetuning the AI model
CSS issues on the frontend
Graphing using apex-charts
MongoDB cluster freezing


Accomplishments that we're proud of


Got a Local AI model running
Finished the front-end
Finished Auth flow
Finished dynamic dashboard page


What we learned


How to build a SPA in Vue.js
How to use naive UI
Child Process spawning in Node
API Design
Full Stack Development


What's next for upsanddowns


We hope to fine-tune the application to remove any bugs while adding more tools in the near 
  future

",https://github.com/Bitcamp-2024,,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Financial Hack - Capital One","javascript, python, pandas, vue, node.js",Declan,Amoako,decavacado@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"MongoDB free tier was great but ended up crashing around the second day.
Github was amazing and allowed us to collaborate easily on each section of the project.",University of Maryland Baltimore County,NO,"umbc, University of Maryland - College Park, WWP High School South",3,Varun V,Rao,varunvellorerao@gmail.com
Untitled,,Draft,Pending,Manage team,4/19/2024 21:53,,,,,,JonnyRoth2,Roth,jonnyroth12@gmail.com,,,,,,,University of Maryland - College Park,0,,,
Untitled,,Draft,Pending,Manage team,4/19/2024 21:54,,,,,,Shiqi (Cathy),Wu,cathywu312@gmail.com,,,,,,,,0,,,
Mortgage Master,https://bitcamp2024.devpost.com/submissions/507124-mortgage-master,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 21:59,"Inspiration

Witnessing the devastating impact of natural disasters on housing stability sparked our inspiration to develop Mortgage Master. We recognized the urgent need to leverage data-driven insights to understand and mitigate these effects, ensuring communities are equipped to withstand the challenges posed by climate change.

What it does

Mortgage Master harnesses the power of data-driven insights to empower stakeholders with real-time information and accessible tools. Through an interactive website, users can access vital information to make informed decisions and implement proactive risk mitigation strategies in the face of severe weather events.

How we built it

We built it using VS Code, sqlite

Challenges we ran into

The dataset was too large and we ran into many problems when trying to clean the dataset

Accomplishments that we're proud of

The map of the US comes up on the home page and all of our data imported correctly 

What we learned

We have learned how to clean and filter large datasets.

What's next for Mortgage Master

Modify the website to incorporate data globally rather than solely the US. Examine additional factors to provide a more comprehensive assessment of risk rates. Develop a collaborative data platform for sharing insights and to foster  exchange in knowledge and innovation.
",https://fir-database-e2232.web.app/,,"Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Sustainability Hack - Bitcamp, Best Use of APIs related to Housing/Climate Change - Fannie Mae","python, javascript, sqlite",Sathvika,Sangoju,sangojusathvika@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,WIFI was great,University of Maryland,,University of Maryland - College Park,3,Dhruvi,Kadhiwala,kadhiwala.dhruvi@gmail.com
Moondust,https://bitcamp2024.devpost.com/submissions/507126-moondust,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 22:03,"Inspiration

In today's challenging business landscape, managing finances and making smart investments can be a struggle, especially for small businesses and startups. Many startup founders have near-expectations of earning VC funding, and while VC-funded startups are the ones we hear about, they are not at all the definition of the average startup. When many founders with promising ideas are inevitably rejected/not funded by selective VCs, they often lose both motivation and the funding to continue scaling their products.

MoonDust is designed to alleviate this burden by empowering businesses to stay on top of their finances and build an investment strategy that will allow them to self-fund their ventures rather than relying solely on the potential and low-chance hope of external/VC funding.

What it does

Our product automates the struggles of managing finances for small businesses by offering a comprehensive solution. It efficiently manages investment portfolios and strategies, monitors expenses to identify cost-saving opportunities, safeguards against fraudulent and unexpected transactions, and tracks portfolio performance while providing valuable recommendations.

How we built it

On the investing front, we wrote numerous scrapers  to gain financial information from websites. Using this information, we utilized HuggingFace’s RoBerta sentiment analysis model to analyze the financial texts and generate a sentiment score for each. We compounded this score with technical and fundamental analysis to generate a final “buy” score for the user. 

On the financial management front, we use Isolatedforest to check for potential billing errors, trained on dynamically-generated training data. 

To build the front end, we used TypeScript and Vue.js to build a data-driven user interface. Additionally, we used the Chart.js library to provide informative data visualization based on the company’s financial information.

Challenges we ran into

Limited API Access: Many financial APIs restrict access to valuable data unless a paid subscription is obtained. This necessitated web scraping of financial news and social media sites for data collection.

Data Fragmentation: The required data was often scattered across multiple web pages, making it difficult to gather it comprehensively in one go.

Data Cleaning: Web-scraped data typically requires cleaning due to inconsistencies and inaccuracies on the source websites.

ML Model training: We ran into a few difficulties training the model. We first had to generate quality data to train the model, then fine-tune the hyperparameters. 

Accomplishments that we're proud of

Building a Powerful Data Hub: We're excited to launch our website, featuring comprehensive data analysis from news articles, social media, and expert stock analysis.

Unlocking Sentiment Insights: We're particularly proud of our innovative Sentiment Analyzer. Integrating sentiment from forums, articles, and technical/fundamental analysis has never been done before, and we are confident in the results. This tool analyzes social media data to provide valuable insights into potential stock profitability, empowering smarter investment decisions.

Combating Fraudulent Activity: We've developed a approach using IsolatedForest to identify fraudulent and abnormal financial transactions. This helps to ensure greater security within the system.

Extensive Stock Analysis: We've developed a comprehensive stock analysis approach that uses yFinance. By gathering data and analyzing both technical and fundamental aspects of specific stocks and pairing it with sentiments of news articles and posts, we're able to conduct thorough stock analysis. This enables us to calculate each stock's performance and potential to make recommendations.

What we learned

We ran into a problem right at the start of our hacking: financial data is not readily accessible by any means, at least not unless we can pay a lot. To overcome this, we learned to perform web scraping using Python and the BeautifulSoup library.  

To clean up messy data, we took advantage of readily available and inexpensive generative AI APIs, and fed results into Numpy and Pandas to compile, clean, and manipulate the data.

Nobody on the team had work with sentiment analysis before. To accomplish this, we looked into HuggingFace and found the RoBERTa model, trained on social data, making it ideal for working with forum and news data related to each stock ticker.

To detect financial fraud and abnormal transactions, we learned to use the IsolatedForest model to find anomalies in transaction data. Additionally, we gained valuable experience in data preprocessing techniques like missing value handling, label encoding, and feature scaling.

What's next for Moondust

To make MoonDust more accessible and cross-platform, we look to build mobile applications for it to complement the web app. In addition, we look to scale the vision behind the app to make it applicable to organizations of all forms.

We are excited about the potential of integrating Quantum Support Vector Classifiers (QSVC) using IonQ's quantum computers. This cutting-edge technology has the potential to significantly enhance fraud detection accuracy, making the financial system not only more secure but also faster at identifying fraudulent/abnormal activity. Half of our members are part of the Quantum Machine Learning research group at UMD, and look to possibly integrate our research to speed up and increase accuracy of the ML performance in the application.
","https://github.com/luh-passioners/MoonDust-machinelearning.git, https://github.com/luh-passioners/MoonDust-frontend.git, https://github.com/luh-passioners/MoonDust-backend.git",,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Financial Hack - Capital One","python, vue, javascript, html, typescript, json, pandas, numpy, pytorch, roberta, yfinance, beautiful-soup, transformer, scikit-learn, claud, flask, scipy, anthropic",Ayan,Banerjee,ayanbanerj@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"Over the weekend, we were able to make use of MongoDB for a NoSQL data storage solution, which worked out very well when we inevitably needed to modify schemas on the fly without needed entire migrations. In addition, Github served as a very useful version control hosting solution that allowed us to collaborate effectively.","University of Maryland, College Park",No,"University of Maryland - College Park, Bridgewater-Raritan High School",3,Raghav,Misra,raghav.m2014@gmail.com
Still in progress....,,Draft,Pending,Additional info,4/19/2024 22:09,"Inspiration

xxx

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Still in progress....
",https://github.com/Cruz-Alexander2?tab=repositories,,,javascript,Cruz-Alexander2,Cruz,alexcruz@umd.edu,,,,xxx,University of Maryland - College Park,,University of Maryland - College Park,2,llienoekul,O'Neill,lukeponeill@gmail.com
Untitled,,Draft,Pending,Manage team,4/19/2024 22:40,,,,,,Irene,Lee,irene.haebin.lee@gmail.com,,,,,,,University of Maryland - College Park,0,,,
Untitled,,Draft,Pending,Manage team,4/19/2024 23:00,,,,,,Tharun Kumar Reddy,Polu,polutharun528@gmail.com,,,,,,,University of Maryland - College Park,0,,,
spicy beef ramen,,Draft,Pending,Project overview,4/19/2024 23:01,,,,,python,Jonathan,Wu,jonathanw2856@gmail.com,,,,,,,University of Maryland - College Park,1,Brennen,Le,brennenle@yahoo.com
Team Flying Pandas,,Draft,Pending,Project overview,4/19/2024 23:24,"Inspiration

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Team Flying Pandas
",https://colab.research.google.com/drive/12ix6YETzITI0WbhpvN1JLBlMz4k2EUOX#scrollTo=nfkB0oRvaiMq,,,,Varun,Singh,varun.singh2026@gmail.com,,,,,University of Maryland,,University of Maryland - College Park,2,Kevin,Li,kli36@terpmail.umd.edu
Experience Points,https://bitcamp2024.devpost.com/submissions/507159-experience-points,Submitted (Gallery/Visible),Pending,Submit,4/19/2024 23:28,"Inspiration

We were inspired by the potential pro-social uses of blockchain technology that have been discussed on podcasts by some of our favorite intellectuals. Starknet functions as a core scaleup solution to the Ethereum and as a team very interested in emerging applications of blockchain technology it demanded our attention.

What it does

Our project creates a fungible blockchain token (a cryptocurrency) called ""Experience Points"". This token can be built upon to extend its functionality in later projects. Our design intent is to use it as a voting token to help coordinate behavior through the writing of a Decentralized Autonomous Organization (DAO) set of smart contracts. 

How we built it

We used the Cairo programming language to write and deploy a Smart Contract on the Starknet developer blockchain.

Challenges we ran into

The compiler for the local node didn't run on windows or my linux command prompt, so we shifted development to our single MacBook.

Accomplishments that we're proud of

Designed a blockchain token that can be called by various other smart-contracts, like crypto-wallets and transactions.

What we learned

As beginner to intermediate programmers we learned the process of quickly learning a new programming language and development environment. As blockchain enthusiasts we learned about the design philosophy behind Starknets scaleup solution for Ethereum.  

What's next for Experience Points

Integrate experience with a habit tracker to help gamify one's life. Utilize Experience Points as the central voting token of an investment/ charity DAO. Advance decentralized finance as a mechanism of human coordination.
",https://github.com/adventuringsociety/Starknetproject,,"Best First Time Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best Use of Starknet - MLH","starknet, cairo",Monte,James,montej39@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"We used the Starknet Web3 Platform to explore various smart contract use-cases, designs andimplementations. We found the documentation quite helpful. We really enjoyed the design philosophy behind this ZK rollup . We got carried away discussing the design philosophy behind it, exploring the implications it has for blockchain economics and civilizations. A turning complete programming language, like Cairo, is quite a feature to include on a blockchain system.","University of Maryland, College Park",vita.courses,University of Maryland - College Park,1,Luke,Champion,lchampi1@terpmail.umd.edu
Eventure,https://bitcamp2024.devpost.com/submissions/507207-eventure,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 1:36,"Inspiration

Our inspiration for Eventure stemmed from personal challenges we faced upon moving to new cities for summer internships. As we settled into these environments, the difficulty of finding friends with shared interests became a common struggle. Conversations revealed that this issue was not just ours but affected many, particularly young adults experiencing increased social isolation post-COVID. Despite technological advances enhancing communication, a gap remained: there were few tools designed to make the process of building meaningful connections both easy and enjoyable. Thus, we created Eventure—a platform aimed not only at meeting new people but at discovering companions to share passions and create lasting memories. Eventure transforms the daunting task of forming genuine friendships in unfamiliar places into an exciting adventure.

What it does

Our product ultimately brings people on a screen to meet up off the screen. When a new user joins, we try to learn more about them by asking them to describe themselves and identify their hobbies and interests. Once Eventure has this information, it uses AI to identify all relevant upcoming activities and events in the user's city. After picking a few activities, the user is added to a queue for each of their choices. Queues will close once filled up and then members can chat online, meet up in person, and go together as a group, unified by a similar passion. We encourage users to utilize the app to form lifelong friendships, and if all goes well, they may even move off of our platform as these bonds start to form. 

How we built it

We started by using the nextJS framework to build a full-stack React-based web application. By using nextJS and its modern app routing we built out the various routes of our website. We started by handling authorization and authentication services from scratch by working with our Postgre database hosted on SupaBase. We also sketched out our relational database and utilized Prisma ORM to easily construct the schema and interact with Supabase. 

Once we constructed the various tables of the database, we populated it with relevant data from Eventbrite. This data would be fed through a custom LLM to help us recommend events based on the user’s preferences. We fine-tuned our recommendation algorithm to provide the most relevant events, but also left room for finding new hobbies. We also created many Restful APIs in order to query our database and populate our front end. 

For the front end, we utilized a robust component library called shadcn to standardize our front end and create a professional feel.

Challenges we ran into

We created a full-stack application using NextJS, NodeJS, PostgreSQL, Prisma, and Gemini, with a very large database based in Supabase. We had to perform plenty of backend work to make this project possible. We had more than a dozen API calls and some very complicated aggregate queries for our database. 

It took hours of testing to fine-tune Gemini to evaluate user preferences and available events to produce helpful and accurate results. We started by testing various prompts and wordings in a Collab environment before we could move on to implement this logic in the backend of our application. Even then, we had to test various times with the event data in the database to ensure the model did not produce bias or see ghosts and produce poor results for the user. It’s the first time we fully integrated AI into a full-stack application as a practical tool and we learned a lot on the fly. 

Another huge challenge was accurately getting data for our project. We attempted to use Yelp, Eventbrite, TripAdvisor, and Gemini to extract information about current events in DC. We ran into a lot of old outdated information and noisy events which we had to be careful to filter out when populating our database. We had to make sure the data we were collecting would be compatible with the chatbot capabilities of the Gemini API. The quality of the data really affected the ability of the AI to generate good responses for the user.

As for the client-side, many dynamic properties were made possible by using our various API calls, which were very time-intensive. For instance, a user who inputs their interests can revisit the “/interests” route and will see their prior selections still highlighted; however, achieving this took many hours of tinkering with the APIs we built, as we would run into unexpected issues. For example, users are also able to edit their interest selections and re-update the database with any new changes, which took longer than initially planned because of a shadcn button bug that inexplicably deleted all prior data acquired. Finally, the utilization of session cookies to display username and prevent guests from accessing certain pages took some research to execute. Despite these challenges, we were able to overcome all roadblocks.

Accomplishments that we're proud of

We were especially proud of our ability to build a full-stack application while utilizing an impressive suite of technologies to go along with a fleshed-out UI. Heading into the hackathon, we were ambitious in creating a WebApp on a scale we had never done before. We’re also proud that we were not only able to complete the base functionality of our application but were also able to implement many quality-of-life implementations to improve the user experience of our app. We spent a painstaking amount of time in order to handle various cases and errors that might occur. Thus, following the completion of Bitcamp, we are proud to say we accomplished our goals and then some. 

What we learned

Coding aside, we really feel that this project enabled us to develop our teamwork and communication skills. As a team, we learned the importance of trusting each other to complete their own parts of the project, as well as coming to each other for help. We also reiterated the benefits of proper planning and following a good workflow. This year, we made a large effort in planning most aspects of the project before starting on Friday night. We found ourselves writing more code, making more commits and were able to create an outstanding UI. We grew a lot as team members and collaborators at BitCamp this year.

What's next for Eventure

We are planning on creating several cool features, such as a group chat section for potential group members, the ability to customize one’s personal profile, and a map to mark the location of the events available in a location. We also hope to expand and scale the application to cities outside Washington, DC. As with any public online platform, we will have to also implement personal privacy and information security features to ensure that our users feel safe and are empowered to interact with strangers and eventually flourish in their newfound friend circles. 

As we continue to finalize all the features we need to be ready for the full release, we are also open to evolving the application to an even greater possible purpose and utility if the opportunity were to arrive. In the meantime, we hope to get criticism and feedback throughout our journey so we can improve the app to the best of our ability. 
",https://github.com/bding08/Bitcamp-2024,,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp","nextjs, prisma, gemini, supabase, restapi, typescript, postgresql, postman, react, node.js, genai, tailwind, shadcn",r-arutla,Arutla,rohan.arutla@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,Pretty Good,"University of Maryland, College Park",,University of Maryland - College Park,3,Davayan,Sanyal,davayansa@gmail.com
Warming Wiki,https://bitcamp2024.devpost.com/submissions/507240-warming-wiki,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 4:08,"Inspiration

The dearth of good, publicly available, interpretable statistics on how climate change will impact local areas economically inspired us to try to bridge the gap; we wanted to make it easier for laypeople and climate experts alike to access high-quality statistics that have meaning both in scientific and casual contexts.

What it does

It analyzes various economic factors to build a composite economic impact projection for each county in the United States; it does this in four different cases (high emissions 2050, high emissions 2030, moderate emissions 2050, moderate emissions 2030), so users would have been able to see a visual comparison of projections under different circumstances (unfortunately, we didn't quite finish).

How we built it

Our goal was a Python data processing stack underneath a React frontend, though we didn't finish the second part. We did statistical data pre-processessing in Matlab, Google Sheets, and Python; and then used Python and numpy to standardize outputs and join tables.

Challenges we ran into

We were probably overly ambitious, as we couldn't get everything to work quite right. The data model proved to be tougher than anticipated, and collating the different economic factors into a single impact model proved troublesome. We would probably simplify the experimental surface if we did the project again today.

Accomplishments that we're proud of

We wrangled all sorts of data into a coherent schema, and have robust, state-of-the-art estimations of climate change's economic impact. We would've built some really cool visualizations with a bit more time.

What we learned

Bite off a bit less to chew and focus more on executing and implementing.
",https://github.com/AKushWarrior/Bitcamp24,,"Best Bitcamp Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Sustainability Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best DEI Hack sponsored by Fidelity - MLH, Most Philanthropic Hack - Bloomberg, Best Use of APIs related to Housing/Climate Change - Fannie Mae","python, pandas, react, numpy, next.js, matlab",Aditya,Kishore,adityakishore2004@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,TBD,University of Maryland at College Park,"warming.wiki; it fit really perfectly with our project name. Sadly, we didn't have a functioning website to host, so we didn't get to really use the domain.","University of Maryland - College Park, University of Maryland - University College",3,Sakthi,Chandramohan,sakthichandramohan04@gmail.com
ParseDoD,https://bitcamp2024.devpost.com/submissions/507301-parsedod,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 8:21,"Inspiration

The inspiration for ParseDoD came from the need to efficiently analyze and visualize Department of Defense (DOD) contracts data. Current data is in a very dense paragraph based format, making it difficult to search and analyze. By automating the process of scraping through DOD contracts, extracting relevant purchase information, and presenting it in a user-friendly format, ParseDoD aims to provide valuable insights into government spending.

What it does

ParseDoD is a web application that utilizes a web scraper to gather data from DOD contracts. It is parsed through this data using GPT-3.5 to extract details about purchases in addition to heuristic detection of certain attributes, such as the items procured, the amounts spent, and the companies involved. Finally, ParseDoD presents this information through interactive graphs and charts on a web application, allowing users to explore and understand DOD spending patterns easily.

How we built it


Jsoup and Selenium for automated DoD contracts date range search and scraping
GPT-3.5 for extraction of text-based attributes (company name, location, etc)
Java heuristic detection for enumeration data (branch, dates, etc)
MongoDB storage of structured data
Java EE/Servlets web application backend
Bootstrap/HTML/CSS/JS frontend (mostly handwritten)
Google Maps API and Chart.JS API for insight visualization.
Manual data collection and verification of edge cases and randomly selected contracts to ensure accuracy: >99%.


Challenges we ran into

One of the primary challenges we encountered was efficiently scraping and parsing large volumes of DOD contracts data while ensuring accuracy and reliability, dealing with inconsistencies in the data structure, and the layout of the data presented in the contracts. Adapting the prompt to handle different formats posed significant challenges. Additionally, designing an intuitive user interface and optimizing performance were ongoing challenges throughout the development process. 

Accomplishments that we're proud of

We're proud to have developed a robust web scraper capable of extracting valuable purchase information from DOD contracts reliably. Creating an intuitive and visually appealing user interface for presenting complex data in an understandable format was also a significant achievement. Moreover, overcoming technical challenges and refining the application to deliver a seamless user experience was immensely satisfying.

What we learned

Through building ParseDoD, we gained invaluable experience in web scraping, data parsing, web development, and data visualization. We learned how to navigate through the complexities of government contract data and extract meaningful insights efficiently. Additionally, we honed our skills in frontend and backend development, as well as project management and collaboration within a team setting.

What's next for ParseDoD

In the future, we envision expanding ParseDoD's capabilities by incorporating advanced analytics features, such as predictive modeling and trend analysis, to provide deeper insights into DOD spending patterns. Furthermore, we plan to enhance the scalability and performance of the application to handle even larger volumes of data. Additionally, we aim to integrate user feedback to continually improve the user experience and ensure ParseDoD remains a valuable tool for analyzing DOD contracts data.
",https://gitlab.com/HengYeDev/parsedod,,"Best First Time Hack - Bitcamp, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group","mongodb, java, selenium, jsoup",Heng,Ye,heng@yeheng.org,,Best Machine Learning Track Hack - Bitcamp,Yes,MongoDB was great to work with. GitLab was used for repository storage.,Smithtown High School West,honeywheresmydodcontract.wiki,Smithtown High School West,2,Timmy,Papadopoulos,timmypapadopoulos20@gmail.com
CoursifyUMD,https://bitcamp2024.devpost.com/submissions/507302-coursifyumd,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 8:23,"Inspiration

Students have a difficult time determining what courses to take. We wanted to create a solution that could recommend courses most tailored to them.

What it does

Our app allows users to select options about themselves regarding their major, year, personal interests, and desired industry field, then recommends several lists of courses to take that fit them. These lists are divided by the individual characteristics entered by the user. There is a list of courses based on their major, a list based on their personal interests, and a list based on their desired industry field. 

How we built it

We used a Python Flask application to organize the backend and React to create the front end. We created a script to web scrape data from the Testudo and PlanetTerp websites, embed the data using OpenAI embeddings, and stored the resulting vectors in a Pinecone vector database. We also created a Supabase database to store user data and their queries. 

Challenges we ran into

Because we worked on the Backend and Frontend separately, we had a difficult time integrating them together. We were ultimately able to overcome this problem by discussing each section thoroughly and properly explaining how data is sent across platforms.  

Accomplishments that we're proud of

We are proud to create an application using a React frontend and Flask backend, creating a secure database to house user data, and constructing a vector database to query results.

What we learned

We learned to work with technologies such as OpenAI embeddings, vector databases, database querying, and general frontend and backend development.

What's next for CoursifyUMD

In the future, we would like to implement more personalized features for users to get more generated curated lists. We'd also like to look into other algorithms that could provide even more relevant results. 
",https://github.com/rohanshar77/CoursifyUMD/tree/main,https://youtu.be/BwgRIwhSdoI,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp, University Course Catalog Data Extraction and Query Challenge - Xficient","react, pinecone, flask, supabase, openai, webscraping",Saketh,Kura,saketh.kura@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"We had a great time at Bitcamp! We worked on several technologies including Pinecone, OpenAI, Flask, and React. We all had good experiences with them.",University of Maryland,,University of Maryland - College Park,2,Rohan,Sharma,rohan77@icloud.com
DataLand ,https://bitcamp2024.devpost.com/submissions/507337-dataland,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 9:51,"Inspiration

My team and I were inspired by Fannie Mae because they presented us with a challenge, and because my team is all about taking on challenges, we took the blind challenge head on and began to develop an interest in the topic of the connection between natural disasters and foreclosure, as people all over the world are experiencing this even today. Our goal is to provide people with the option of being aware of the area they are moving into. 

What it does

Our software allows individuals to see the places that are most likely to be foreclosed on because of natural catastrophes. It allows people to be aware of the chances / rates of this situation. ## How we built it

Challenges we ran into

The coding language and the data that needed to be obtained was a major problem because we needed to do a lot of study for each section of the world. We also wanted to integrate a 3D figure. 

Accomplishments that we're proud of

We are proud of the research we conducted during the project, the design of the logo and app, the ideas we generated, and the quantity of assistance we will be able to provide to individuals all around the world.

## What we learned
We discovered about the connection between foreclosure and natural disasters, and we also learned that it has a greater impact on people than was previously revealed to the public. 

What's next for DataLand

DataLand would like to become an extension that you could add so that when people are looking for a home, the app will display users homes that have a low risk of being foreclosed on due to a disaster. 
","https://docs.google.com/document/d/16ujreXMY37Ab9ek1OZ-rBnaGiNfWA0eAmZHuYCW21DQ/edit?usp=sharing, https://replit.com/@AdamHaran1/DataLand-1?from=notifications",,"Best First Time Hack - Bitcamp, Best Use of APIs related to Housing/Climate Change - Fannie Mae",html,Dakota,Sams,samsdakota15@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,NA,Baltimore Polytechnic Institute,No,,1,Adam,Haran,adamharan119@gmail.com
Untitled,,Draft,Pending,Manage team,4/20/2024 10:09,,,,,,Mark,Davis,markdavis0601@gmail.com,,,,,,,,0,,,
Matching Students Abroad,,Draft,Pending,Additional info,4/20/2024 10:16,"Inspiration

My partner and I studied abroad in Singapore and wanted to meet new faces.

What it does

Matches students while they are abroad.

How we built it

Using React Native and Firebase.

Challenges we ran into

Frontend and backend integration.

Accomplishments that we're proud of

What we learned

What's next for Matching Students Abroad
",,,,typescript,Miranda,Song,songmiranda2002@gmail.com,,,,N/A,University of Maryland,,University of Maryland - College Park,1,Maryann,Vazhapilly,maryann.vazhapilly@gmail.com
Tell Terry,https://bitcamp2024.devpost.com/submissions/507349-tell-terry,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 10:27,"Inspiration

We were inspired by two main things. The first was our passion for journaling in our free time. We have firsthand seen the positive impact from it and want to spread this activity. The second was the Apple Journal app. It is a very basic app, and we knew we could improve upon it.

What it does

It takes in journal entries from users to compile a list of activities that help the users' mental health. It utilizes AI to generate the activities and pictures that show each one. On top of that, the prompts are generated based on what we know about the users' past entries. This keeps the app exciting and relevant to each user.

How we built it

We built it on Xcode using Swift and implemented the OpenAI API.

Challenges we ran into

Generating the image through DALL-E was a massive challenge. Because of the asynchronous nature of generating images, they would be produced after our UI was loaded. This resulted in an absence of AI-generated images. We worked long and hard to debug the code by creating various timers so the images were shown efficiently.

Accomplishments that we're proud of

We are proud of our ability to implement AI well in our first ever attempt at our first ever hackathon. On top of that, we are truly proud of the positive impact society could see with this app. It is not just an ordinary app but a way of life.

What we learned

We learned various ways to improve AI output. However, most importantly, we learned how to stay resilient. With the challenges of implementing OpenAI, DALL-E, and getting the views to transition correctly, we stayed focused. Generating the images took a lot more time than anticipated, yet we never gave up.

What's next for Tell Terry

We look to launch Tell Terry on the App Store publicly and make major updates to it. We want to make it a social platform. People can do their recommended activities and post them to a feed, if they choose. This will create constant user retention. On top of that, it will introduce journaling to those who did not previously.
",,,"Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Most Philanthropic Hack - Bloomberg,  Best Razzle Dazzle Hack - Bitcamp","swift, xcode, openai",Chiraag,Nadig,chigu.nadig@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,We learned how to implement the OpenAI API to utilize ChatGPT and DALL-E.,University of Maryland at College Park,,"Robbinsville High School, University of Maryland - College Park",1,Krish,Thakker,kthakker00@gmail.com
Skull Survivor,https://bitcamp2024.devpost.com/submissions/507364-skull-survivor,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 11:12,"Inspiration - Our group is very high making small games. However, we've never made a game with different enemies having their own unique logic and attack patterns, so we wanted to challenge ourselves with trying to do so.

What it does - You're moving around in a 2D space and with infinitely spawning enemies that appear every 10 seconds and you need to outlast them to win.

How we built it - We used Microsoft's MakeCode Arcade to build this game. It's software that you use in Java script.

Challenges we ran into - We struggled with giving projectiles proper collision detection and deciding how we would differentiate the enemies.

Accomplishments that we're proud of - We were proud of

What we learned - We learned that even the smallest of games take a lot of time to be made and made well.

What's next for Skull Survivor - We might add something like a P v P mode in the future.
",https://arcade.makecode.com/S02429-05768-29094-15758,,Best First Time Hack - Bitcamp,javascript,Mark,Davis,markdavis0601@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,They were pretty stable for the most part. We had very little issues.,Baltimore Polytechnic Institute,No.,"Baltimore Polytechnic Institute, Baltimore polytechnic",3,Jermiah,Walker,jermiahwalker157@gmail.com
Untitled,,Draft,Pending,Manage team,4/20/2024 11:31,,,,,,Joshua,Worku,workujoshua@yahoo.com,,,,,,,Calvert Hall College High School,0,,,
The Journeyman's Strife,https://bitcamp2024.devpost.com/submissions/507375-the-journeyman-s-strife,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 11:35,"Inspiration

Heavy inspiration from a strategy/wartime game called compact conflict, and there was some inspiration from Risk.

What it does

Currently, the game starts on a title screen, goes to a screen where you select your faction, then goes to a screen for joining multiplayer. After this is goes to what was supposed to be a test world, and there are rows of soldiers you can move around, but it is not tracked between players.

How we built it

We used Godot and many tutorials in order to figure out the things we didn't understand, as well as using Asesprite for our art. 

Challenges we ran into

We found ourselves oversleeping, severely cutting into our time and making it so that our project wasn't finished, and there were some things we didn't know how to do (like the multiplayer), so we struggled with them for hours with little success.

Accomplishments that we're proud of

We got all of the art done, and we also were pretty close to implementing the multiplayer, there was just a focal point we were stuck at.

What we learned

We learned that 36 hour hackathons are harder than they seem due to a feeling of complacence that comes from the long time. We also learned that some things are much harder to implement that others.

What's next for The Journeyman's Strife

We might continue working on it to restore it to the glory of what we had in our notes, so that would mean fixing the multiplayer, making the combat, doing the turn systems, adding more stats, more factions, and more units.
",https://github.com/PlantvZombie/Bitcamp2024,,,"godot, asesprite",Winton,Jones,oogabooga1271@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"The charging ports that were under each table were nice, but with the amount of wires that would be down there, foot space was quite restricted.",Baltimore Polytechnic Institute,,"Baltimore Polytechnic Institute, Baltimore polytechnic, Baltimore polytecnic institute",2,Walter,Sibrian,walterchats1864@gmail.com
HarvestMate,https://bitcamp2024.devpost.com/submissions/507377-harvestmate,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 11:35,"Inspiration

Farmers not fully utilizing phones/computers in the modern farming economy.

What it does

Allows farmers to communicate with each other and provide adequate calculations that are tailored toward farmer needs.

How we built it

HTML5 (Web elements), CSS (stylization/organization), and a bit of javascript (sticky header function).

Challenges we ran into

Making boxes to contain the content.

Accomplishments that we're proud of

Made a scrollable website that displays our information effectively.

What we learned

My team isn't compatible in terms of coding, but they coincide well in the dining venue.

What's next for HarvestMate

To give it to somebody more financially suitable for money
",https://replit.com/@YosephGetachew1/Havestmate,,Best First Time Hack - Bitcamp,"html5, javascript, css3",Yoseph,Getachew,ytgetachew.cs@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,I learned a few different techniques,Calvert Hall College High School,,"Baltimore Polytechnic Institute, Baltimore  PolyTechnic Institute , Calvert Hall College High School",3,Umar,Muzni,umarmuzni@gmail.com
Music Spot,,Draft,Pending,Project details,4/20/2024 11:39,"Music Spot: Unveiling the Melodies of Inspiration

Inspiration

The inspiration behind Music Spot stemmed from our shared passion for music and the desire to create a platform that would make music more personalized and engaging for users. We wanted to build something that would help people uncover new tracks and artists and also learn more about their own music tastes.

What it does

Music Spot allows users to search for a word and discover records with related names, making it easy to explore new music based on their interests. Users can also create an account to access personalized music taste profiles, including their top artists, top songs, and top genres.

How we built it

We built Music Spot using a combination of web development technologies, including HTML, CSS, JavaScript, and Python. We utilized APIs to retrieve music data and implemented algorithms to generate personalized recommendations for users. The platform was designed with a focus on intuitive user experience and seamless functionality across both web and mobile devices.

Challenges we ran into

One of the main challenges was integrating various APIs and ensuring data consistency. We also had trouble finding a place to deploy our project.

Accomplishments that we're proud of

We're proud to have created a platform that empowers users to explore and understand their music tastes in a fun and interactive way. Seeing users discover new favorite artists or genres through Music Spot brings us immense satisfaction and reaffirms our commitment to making music discovery accessible to all.

What we learned

Through the development of Music Spot, we gained valuable insights into music recommendation algorithms, API integration, and user experience design. 

What's next for Music Spot

In the future, we plan to further enhance Music Spot by introducing additional features such as personalized playlists, social sharing capabilities, and integration with streaming services. We also aim to expand our music database and refine our recommendation algorithms to provide even more accurate and diverse suggestions to users.
",https://music-spot-dbodufn3h-madhavmuriks-projects.vercel.app/,,,"python, flask, spotify, html, jinja, tailwind, css, javascript",Madhav,Murikipudi,murikipudimadhav@gmail.com,,,,,,,University of Maryland - College Park,0,,,
Hello,https://bitcamp2024.devpost.com/submissions/507391-hello,Submitted (Hidden),Pending,Submit,4/20/2024 12:10,"Inspiration

Point

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Hello
",,," Best Hardware Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Sustainability Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best DEI Hack sponsored by Fidelity - MLH, Best Use of Taipy - MLH, Best Use of Kintone - MLH, Best Use of Starknet - MLH, Best Use of PropelAuth - MLH, Best use of AI/ML Innovation for the Francis Scott Key Bridge Recovery Efforts - Cloudforce, Most Philanthropic Hack - Bloomberg, Best Digital Forensics Related Hack - Cipher Tech, Best Use of APIs related to Housing/Climate Change - Fannie Mae, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group, Best Financial Hack - Capital One, University Course Catalog Data Extraction and Query Challenge - Xficient,  Best Razzle Dazzle Hack - Bitcamp",python,Varun,Chilukuri,varunch321@gmail.com,,Beginner Quantum Track Hacks - Bitcamp,Yes,None,New York University,,,0,,,
Efficace,https://bitcamp2024.devpost.com/submissions/507394-efficace,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 12:16,"Inspiration

As I took my government and politics class this year, I became increasingly disturbed by the political polarization and low voter turnout in the United States. Additionally, I wanted to learn how to create a log-in page and store information. Combined, I was inspired to create a practical website that addresses politics.

What is it/What it does

Efficace, meaning ""effective"", seeks to promote political efficacy: the belief that one's vote matters. For now, users are able to record your stances towards certain political issues you chose. This way, users refer to this when making important decisions that reflect your ideals.

How we built it

HTML, PHP (xampp)

Challenges we ran into

I couldn't figure out how to store html data into the database, and website styling is always quite difficult.

Accomplishments that we're proud of

Functional login/signup page.
List maker for political issues/stances.

What we learned

PHP, styling techniques.

What's next for Efficace

With significantly more time, data from the stored stances on political issues would be used to match users with relevant politicians, interest groups, etc. I would also have a learning page to better educate people on politics itself and trending issues. Lastly, I would improve security and the database, using a paid, online server instead of xampp and using more complex authentication.
Please note that the replit link is solely for viewing the website's content and does not have functional login/signup.
","https://github.com/HorizonHacks/Efficace/tree/main, https://8651ef4a-c3de-4266-903d-760b241f2f01-00-22zcgpgxptnfj.picard.replit.dev/index.html",https://youtu.be/Oa8B4k0LUK0,"Best Bitcamp Hack - Bitcamp, Best Social Good Hack - Bitcamp","html5, php",Thomas,Lapp,largolapp@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"Wi-Fi was understandably slow at times, but otherwise the hackathon tech was quite organized and efficient!",Baltimore Polytechnic Institute,,Baltimore Polytechnic Institute,0,,,
Untitled,,Draft,Pending,Manage team,4/20/2024 12:44,,,,,,bhaktiheg,Hegde,bhakti.a.hegde@gmail.com,,,,,,,"University of Maryland - College Park, VIT,Vellore",1,Pragyan,Shukla,prag.shank@gmail.com
GenieAI,https://bitcamp2024.devpost.com/submissions/507409-genieai,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 12:47,"Inspiration

In today’s fast-paced world, the ability to quickly sift through extensive documentation and extract relevant information is invaluable. Our inspiration stemmed from observing the overwhelming nature of handling large documents, whether they are academic papers, legal contracts, or extensive reports. Professionals and students alike often struggle to find specific answers buried in pages of text, leading to frustration and wasted time. We envisioned a solution that would empower users to navigate and understand lengthy documents with ease, fostering a more efficient and informed approach to information management.

Our team was also motivated by the advancements in AI technology, particularly in natural language processing and understanding. Seeing AI seamlessly interact with human language to provide concise answers and summaries inspired us to harness this power for practical use. We wanted to create an intuitive tool that not only simplifies the reading process but also enriches the user's engagement with the material. This vision led us to develop an application that utilizes AI to transform how users interact with and digest large volumes of text, making information consumption as effortless as asking a question.

What it does

Our hackathon project introduces a cutting-edge AI-driven application designed to revolutionize the way users interact with extensive documents. The core functionality of our app allows users to upload documents of any length, from a single page to hundreds of pages, without compromising on speed or efficiency. Once uploaded, users can instantly query the document with specific questions, and the AI delves into the text to provide precise answers. This feature eliminates the need to manually search through documents, saving time and enhancing productivity.

Beyond simple question-and-answer interactions, the app incorporates advanced AI capabilities to analyze the text for themes, summarize key points, and even suggest related topics for further exploration. This makes it an invaluable tool for researchers, students, legal professionals, and anyone who regularly works with lengthy written content. Our application ensures that no matter how dense or complex the document may be, users can easily access the insights they need with minimal effort, transforming a potentially daunting task into a streamlined, user-friendly experience.

How we built it

Our journey to building the app started with selecting the right tools and technologies that would allow us to create a robust and scalable solution. We chose Google Cloud as our backend infrastructure because of its powerful computing capabilities, extensive machine learning tools, and its seamless integration with various data management services. This cloud platform provided us the reliability and scalability we needed to handle extensive document uploads and complex data processing tasks.

For the frontend development, we opted for Flutter. This framework enabled us to build a visually appealing and highly responsive user interface. Flutter's ability to compile into native code for both iOS and Android allowed us to maintain a consistent user experience across different devices while speeding up the development process. The combination of Flutter with Google Cloud’s powerful backend ensured that we could deliver a seamless and efficient application capable of processing and analyzing large volumes of text data with high performance.

Challenges we ran into

One of the significant challenges we faced was optimizing the AI's ability to understand and process the content from a wide variety of document formats and complexities. Ensuring that our application could uniformly handle PDFs, Word documents, and even scanned images required sophisticated document parsing techniques. The diversity in document structure—from tables and graphs to footnotes and special formatting—posed a real test to our system’s adaptability and accuracy in text extraction.

Another major hurdle was developing the natural language processing engine to efficiently and accurately respond to user queries. Achieving a balance between speed and precision, especially with long documents, demanded a robust backend architecture. We also encountered challenges in training the AI to understand context and nuances within the text, which is crucial for providing correct and relevant answers. This required not only extensive training data but also iterative testing to refine the AI's capabilities, ensuring that it could handle a spectrum of inquiries with the depth and detail users expect.

Accomplishments that we're proud of

We are immensely proud of our team's ability to create an AI application that not only meets but exceeds the functionality typically expected from document management tools. Our app's capacity to handle an unlimited number of pages without a decrease in performance is a significant achievement that sets it apart in the field of AI-driven document analysis. This capability ensures that users can work with voluminous documents as easily as they would with shorter texts, making our tool exceptionally versatile and powerful.

Moreover, we take great pride in the sophistication of our AI’s natural language understanding. The ability to answer complex questions with precision and contextual awareness reflects the advanced AI models we've integrated and optimized. This success is not just a technical victory but also a user-centric breakthrough, enhancing accessibility and user engagement with document-driven information. The positive feedback from early users, who have reported substantial time savings and increased productivity, is particularly gratifying and validates the hard work and innovation our team has poured into this project.

What we learned

Throughout the development of our hackathon project, we gained invaluable insights into the complexities of AI and natural language processing. One of the key lessons was the importance of data quality and variety in training AI models. We learned that the more diverse and comprehensive the training data, the better the AI's ability to understand and interpret different document types and complexities. This understanding drove us to continuously refine our data collection and processing strategies, ensuring our AI could handle real-world applications effectively.

We also discovered the critical role of user interface design in the adoption and usability of technology solutions. Even the most advanced AI can fall short if the users find the system difficult to navigate. This led us to focus on creating an intuitive and user-friendly interface that could be easily used by people with varying levels of technical proficiency. Through this process, we not only enhanced our technical skills but also deepened our understanding of user experience design, learning to balance functionality with simplicity.

What's next for GenAI

Looking ahead, the roadmap for GenAI includes several ambitious enhancements aimed at solidifying its place as a leader in AI-driven document analysis. First, we plan to integrate multilingual support, allowing users to upload and interact with documents in various languages. This expansion will make our tool more accessible to a global audience, increasing its usability and appeal across different regions.

Additionally, we are exploring the implementation of machine learning algorithms for predictive analytics. This would enable GenAI to not only answer questions but also anticipate the user's needs by suggesting relevant documents and information based on their interaction patterns. By incorporating these predictive features, we can offer a more proactive and personalized user experience.

We also see a significant opportunity to extend our technology into specific sectors with high document load, such as legal, medical, and academic research. Developing specialized versions of GenAI that cater to the unique needs of these industries could greatly enhance efficiency and decision-making processes. Each iteration will aim to incorporate more feedback from our users, ensuring that GenAI continuously evolves to meet the changing demands and challenges of document management in a digital world.
",https://github.com/aryan5276/GenieAI,https://youtu.be/DpwNtup8R2o,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group, Best Financial Hack - Capital One, University Course Catalog Data Extraction and Query Challenge - Xficient","google-cloud, python, flask, html5, css3, flutter, cloud-run, google-bigquery, sql, rdbms, vector-database, pinecone, generative-ai, llm, api, pdfminer, speech-to-text, text-to-speech",Aryan,Agrawal,aryan527@terpmail.umd.edu,,Best App Dev Track Hack - Bitcamp,Yes,"This weekend, our technology experience was largely focused on assisting users with a wide range of problems and queries. Whether it was providing insights on software development, discussing historical events, creating images using AI, or helping to draft documents, the tasks were quite diverse. Engaging with these varied topics not only deepens our understanding but also helps refine the algorithms that drive our responses. Each interaction is an opportunity to learn more about user needs and preferences, enhancing our ability to deliver more precise and useful information over time.

One of the standout moments involved assisting in the creative process for a hackathon project. It was intriguing to see how the team's ideas evolved and how AI technology could be applied to make document handling more efficient and user-friendly. This highlighted the dynamic nature of technology and its potential to transform everyday tasks. Additionally, the discussions about upcoming features and the potential impacts on various industries served as a reminder of how quickly technological landscapes can change and the importance of staying updated with these advances.",University of Maryland,GenieAI,"University of Maryland - College Park, UMD",3,Agastya,Mukherjee,amukhs13@terpmail.umd.edu
ROOME,https://bitcamp2024.devpost.com/submissions/507428-roome,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 13:26,"Inspiration

ROOME, a fun take on the combination of “roomie” and “room me”, tackles the challenge that many first-year college students face when searching for a dorm roommate. Originating from our own struggles, we found existing options like Instagram and StarRez inefficient and limited. Instagram's process is convoluted, while StarRez relies on basic questions that hardly reflect personal compatibility. 

What it does

ROOME stands out by leveraging detailed user profiles, including niche interests, majors, and desired roommate qualities, to facilitate matches similar to how Tinder's algorithm works. 

How we built it

Fundamentally, this is an object detection task. We toyed with the idea of training a large-scale object detection model from scratch but ultimately realized that doing so would be computationally intractable during a hackathon. As such, we opted to leverage powerful, well-researched, and battle-tested publicly available models.

Challenges we ran into

At first, we wanted to use React Native to implement it as a running mobile app, but since we had limited experience and limited time, we decided that we would use regular React and make it a web app that could be viewed on mobile screens. We also ran into challenges using Node.js and MongoDB, but with the help of mentors and YouTube, we were able to implement and use them in the backend aspect of our project.

Accomplishments that we're proud of

We are extremely proud of our ability to tackle a problem that can help future college students as we know what an impact a bad roommate can have on our well-being. 

What we learned

We learned how to use React, MongoDB, and Node.js, and how to effectively have a working environment for the entire team to work in.

What's next for ROOME

Recognizing the frequent posts on our UMD Snapchat story about needing roommates for off-campus housing or handling lease takeovers, we intend to integrate features to address these needs in one streamlined platform.
",https://github.com/nancyputhenpurayil/RoomeFinal/tree/sania_final,https://vimeo.com/937362269?share=copy,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Most Philanthropic Hack - Bloomberg","mongodb, react, github, git, javascript, css, figma",Sania,Rashid,sania.rashid928@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,We used git for our collaborative work space with Mongo DB as the backend and React JS as the front end.,"University of Maryland, College Park",,University of Maryland - College Park,2,Sydney,Richman,sydneyrichmann@gmail.com
Defense Insights,https://bitcamp2024.devpost.com/submissions/507458-defense-insights,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 14:19,"Inspiration

Our team was inspired by the tendency of all public information about defensive contracts to stay unintelligible and opaque to most people interested in knowing more about them. They always seem to be hidden in obscure locations and concealing jargon. However, for somebody interested in understanding how they affect financial products, this information needs to be easily accessible and digestible. The DoD, with an annual budget of $1.60 Trillion, is one of the most influential organizations in the world.  Hence, this project.

What it does

Defense Insights is an advanced tool to automatically extract, analyze, and visualize critical data on US defense contracts. It parses through over 2500 webpages to extract all the available historical data about all the contracts signed by the Department of Defense. Using a GPT 3.5 Turbo model, it analyzes the information and identifies nine critical data points within each contract - company name, location, federal agency, date, contract value, contract type, purpose, completion date, and contract number. This information is collected from over 30,000 contracts to be summarized and quantified. 

From over 2,500 web pages worth of unstructured contract information to structured data.

How we built it

Webscraping: We deployed Python scripts with Selenium and BeautifulSoup for dynamic web scraping to capture the latest contract documents. We also implemented a listening algorithm to check if the website has been updated every three hours.

AI Data Parsing: We used a custom-trained GPT model to intelligently parse and structure raw text into defined categories like amounts, dates, and company names.

Databases: We used a serverless managed Postgres-based database system called Neon to receive all the important json files and create the database.

Data Visualization: Rendered dynamic visualizations of the relevant data points using Django.

Challenges we ran into

Our IP was flagged by the DoD website for repeated making requests while running the web scraper program - which was trying to access about 2,500 URLs on that website back-to-back and we were subsequently blocked from accessing the website for a time period.

The most significant challenge we ran into was tweaking the AI model to work with hundreds of never-ending edge cases which are to be expected as we are trying to obtain over 250,000 data points from purely unstructured text.

Accomplishments that we're proud of


Being able to manage the multiple moving pieces of the project including the front-end in 36 hours
Accurate utilization of the LLM to obtain the data points required.
The mere scale of the project.


What we learned


Sending three thousand back-to-back requests to the Department of Defense website is not wise.
Development needs to be done symmetrically to achieve maximum efficiency to try and meet in the middle.

","https://github.com/Emmettlsc/bitcamp2024, http://bitcamp2024.s3-website-us-east-1.amazonaws.com/",,"Best Bitcamp Hack - Bitcamp, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group, Best Financial Hack - Capital One","python, selenium, beautiful-soup, gpt, neon, css, html, json, django, sql",Md Sami,Alam,alam.sami.md@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,Our experience with Selenium and OpenAI were great and fluid while django was unexpectedly difficult to set up.,"Drexel University, University of California Los Angeles",,"Drexel University, University of California - Los Angeles",3,Emmett,C,emmettlsc@gmail.com
Cerebro,https://bitcamp2024.devpost.com/submissions/507472-cerebro,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 14:33,"Inspiration

For this hack, we wanted to increase the accessibility of technology for people who may have limitations with traditional input methods, such as a keyboard and mouse. By focusing on hands-free browsing, we aimed to provide an alternative solution that not only addressed these challenges but also empowered users to use the internet with greater freedom and efficiency. Through this hack, we hope to provide a more inclusive online experience where everyone can benefit from modern day technologies, regardless of their physical abilities.

What it does

Cerebro provides an accessible, hands-free alternative to internet browsing to the physically impaired. It uses computer vision to detect minor facial movements that:


Vertically scroll the webpage
Interact with detected points of interest (hyperlinks, input fields, etc…)


It also uses voice commands to:


Navigate through web browser history
Type with voice input


How we built it

The computer vision was implemented through the use of faceAPI.js, a javascript library that specializes on detecting/tracking facial movements.

The voice commands were achieved by using Google’s Web Speech API, which allowed us to easily transcribe and handle microphone input.

The link between the Chrome Extension window and the current browser window was achieved through the use of extension content scripts, which allow us to securely inject javascript from the extension into the browser. Communication between the injected scripts and the extension can then be easily achieved via Chrome’s built-in runtime event system.

Challenges we ran into

The first major challenge we ran into was the display of our live camera feed on our chrome extension. Upon attempting to do this, we ran into multiple permissions issues with chrome that we tried to resolve in many different ways. It was quite a niche problem with little documentation online, but we eventually came across a solution involving the creation of an options page within the extension that granted permission on startup.

The selection of a speech-to-text api for our extension was another difficult task. We experimented with several different options, including OpenAI’s Whisper and AssemblyAI, finally choosing to land on Google’s Web Speech API. Latency with the voice typing was a significant problem that we were running into with the other tools, and Google’s solution showed to be the best tool as it was fully integrated with Chrome and did not require any external fetch requests.

Finally, determining the methods of control for our element selection was one of our biggest challenges. Our initial approach was moving to the next element using winks, winking the right eye to go forwards and the left eye to go backwards. We were attempting to implement the approach detailed in a 2016 paper called “Real-Time Eye Blink Detection using Facial Landmarks”, using an equation that calculated an eye aspect ratio to get a number for how open the eye was. However, with many confounding variables such as the distance from the camera and the angle of the face, this implementation turned out to be nearly impossible to control. Eventually, we abandoned this approach and decided to detect eyebrow movements instead, which turned out to be surprisingly ergonomic and effective. We created our own equation for detecting changes in relative eyebrow position, making element selection much more user friendly.

Accomplishments that we're proud of

There are many aspects of Cerebro that we’re proud of. Primarily, we were very proud of the overall performance of our implementation of the AI algorithms that handle camera and audio input. They were able to detect facial movements and transcribe audio at a far greater level of accuracy than we had anticipated.

Additionally, we were also very proud of the control scheme solution that we had engineered. Our control gestures were very intuitive and simple for users. This is great as it helps achieve our goal of Cerebro being a tool that is fully accessible to everyone.

This is also our first hackathon, and our first time using a lot of these tools. While the learning process may have been frustrating at time, we are very proud of what we’ve been able to accomplish over this weekend.

What we learned

There are many things that we learned when building Cerebro.


We learned not only how to develop Chrome Extension, but also what the appropriate workflow for collaborative extension development should be.
A lot about various computer vision techniques.
How to effectively transcribe microphone input
Adaptability! (Possibly a generic answer, but still very true. There were many times when we had to rethink the design we had in mind for Cerebro).


What's next for Cerebro?

As of right now, Cerebro is a proof of concept. There is a lot that we would like to develop on further for this project to reach its true potential.

We plan to:


Fine tune the CV algorithms to be more accurate/consistent
Further develop the UI to have a more pleasant UX
Add more functionality such as zooming, tab navigation, and cursor movement
Possibly pivot away from just a chrome extension to obtain multi-platform support on various browsers.

",https://github.com/Datoneguy246/Cerebro,https://youtu.be/aeKUCiXoC18,"Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best DEI Hack sponsored by Fidelity - MLH, Most Philanthropic Hack - Bloomberg,  Best Razzle Dazzle Hack - Bitcamp","chrome, javascript, face-api, google-web-speech-api, html5, css3",Declan,Scott,datoneguy246@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,N/A,University of Maryland - College Park,N/A,University of Maryland - College Park,2,Tanay,Naik,tanaynaik149@gmail.com
Hurrikane,https://bitcamp2024.devpost.com/submissions/507474-hurrikane,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 14:35,"Inspiration

The inspiration behind the project was reading the question, how does natural disasters affect housing and real estate. The mini-game's inspiration came from a tornado and house it goes around and destroys houses. 

What it does

The project, Hurrikane, compares different aspects of pricing/costs for a home and the years before, after, and during a natural disaster, more specifically Hurricane Katrina. Additionally, there is a mini-game that pretends the user is escaping a tornado-like figure.

How we built it

The app is built off of NextJS using TypeScript, for displaying the data, we used ChartJS, which is a simple Javascript library that allows you to create simple modern charts given data. We acquired our data from the spreadsheets that we were given from Fannie Mae, in addition to doing our own research to gather additional data we could compare from the hurricane. 

Challenges we ran into

Our first issue that we ran into when starting this project was how to get data on the pricing of the houses. To solve it, we first tried google and finding some apis that would allow us to easily connect to the housing market and calculate, but after many failed old apis later, we stumbled upon asking a mentor. We asked one of the sponsors from Fannie Mae at around 11pm right before he was about to leave. We simply asked, where can we find data and we asked what he thought about our idea for our original question. He told us we should just sit down for a couple hours and just look at all of the data we are given. So we did that. We looked at all of the data, and while we only spent an hour looking for some relations, it was exactly what he was talking about. We had found our first thing that we wanted to show and compare on the app, as we started adding it, we found more and more things that would come along with these things that were affected in the housing market. 

Accomplishments that we're proud of

In the beginning of the project, especially, it was difficult to think of a project that would correctly fit the prompt/challenge while also corresponding with the other track(s). However, we were determined to make our idea work and continued working on it until we got our finished product. On a bit of a personal note, we are proud that we were able to learn a new framework, NextJS, which is similar to React because of its components, but is still a new model that we are proud for learning from this event.

What we learned

How to use NextJS, different real estate terms and how they are affected by natural disasters, how to incorporate  ChartJS to making charts in Typescript/Javascript

What's next for Hurrikane

Later, the website may extend to more hurricanes or natural disasters instead of one. For example, earthquakes in Hawaii or tornadoes in Kansas. 
","https://1fmc7sq4-3000.use.devtunnels.ms/, https://github.com/xROBERTINOx/bitcampproject",,"Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Use of APIs related to Housing/Climate Change - Fannie Mae","nextjs, typescript, css, chartjs",Robert,Barkalov,robert.barkalov@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"NextJS, ChartJS, ClaudeAI, CoPilot",Ravenscroft,,Ravenscroft ,1,Eva,Barkalova,eva.barkalova@gmail.com
Hello 2,https://bitcamp2024.devpost.com/submissions/507481-hello-2,Submitted (Hidden),Pending,Submit,4/20/2024 14:42,"Inspiration

What it does

How we built it

Challenges we ran into

test 2

Accomplishments that we're proud of

What we learned

What's next for Hello 2
",,,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best DEI Hack sponsored by Fidelity - MLH, Best Financial Hack - Capital One",java,Varun,Chilukuri,varunch321@gmail.com,,,,None,NYU,,,0,,,
Untitled,,Draft,Pending,Manage team,4/20/2024 15:00,,,,,,Danny,Tran,trand5036@gmail.com,,,,,,,University of Maryland - College Park,0,,,
Cribzz,https://bitcamp2024.devpost.com/submissions/507502-cribzz,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 15:07,"Inspiration

The inspiration for Cribzz sprang from a common dilemma faced by one of our team members during a temporary work relocation across states. The challenge was more than just finding a new place; it was about sharing that space with someone who not only matched in budget but also in lifestyle and habits.

Navigating through countless listings and interacting with potential roommates highlighted several problems—from clashing schedules and lifestyle discrepancies to differing views on cleanliness and guests. This experience shed light on a broader, universal issue: finding the right person to share a space with is crucial for comfort and well-being, yet often fraught with difficulty.

This realization was not unique to our situation. Across the globe, individuals moving for work, study, or personal reasons encounter similar challenges. The stress of relocation is amplified by the uncertainty of cohabitation compatibility. It became clear that there was a significant need for a more tailored, respectful, and enjoyable way to find roommates.

Cribzz was born out of the need to address these widespread challenges. By focusing on matching people based on shared living preferences and habits, Cribzz transforms the daunting task of finding a roommate into a personalized and secure experience, reducing the anxiety associated with such significant life changes. Our vision is to empower users to make informed choices about their living arrangements, helping everyone find not just a place to live, but a place to call home.

What it does

Cribzz transforms the way people find roommates by providing a detailed and intuitive platform tailored to match individuals based on compatibility in their lifestyles and living habits. Users start by creating a comprehensive profile that captures essential information such as age, daily routines, dietary preferences, pet compatibility, smoking habits, guest frequency, and more. This detailed approach ensures that every suggested match aligns closely with users' specific needs and preferences.

The heart of Cribzz is a user-friendly interface where users can explore potential roommate profiles. Beyond simple swipe mechanisms, Cribzz dives deep into the nuances of compatibility. Our sophisticated algorithm not only facilitates profile browsing but also highlights key compatibility factors and potential conflicts, such as differences in daily schedules or cleanliness standards, providing users with a thorough understanding of how well each potential roommate might align with their lifestyle.

Adding to its innovative approach, Cribzz introduces a compatibility percentage score for each potential match. This feature quantifies the level of compatibility based on a comprehensive analysis of lifestyle factors, helping users make informed decisions beyond initial impressions.

Security and privacy are paramount at Cribzz. We ensure the utmost care in handling user information, backed by robust privacy controls that empower users to manage the visibility of their profiles and personal details. This secure framework supports a trustworthy environment for users to connect confidently.

Cribzz is dedicated to making the process of finding a roommate not just easier, but a truly harmonious experience. Our aim is for every user to find not just a roommate, but the right roommate who enhances their living experience, ensuring a partnership that goes beyond mere cohabitation.

How we built it

Cribzz is developed based on the MERN Stack which is tailored to efficiently manage the full lifecycle of the application, from database operations to server-side logic and client-side interface. Our stack includes MongoDB, Express.js, Node.js, and we complemented this with CSS for styling to ensure a user-friendly and aesthetically pleasing design.

Frontend Development:
Instead of React, our frontend is crafted using traditional HTML enhanced with CSS. This approach allows us to focus on delivering a straightforward and effective user interface that is easy to navigate and visually appealing. CSS plays a crucial role in this, enabling responsive design and a consistent look and feel across different devices and screen sizes.

Backend Development:
At the heart of Cribzz's backend is Node.js, working in concert with Express.js. This combination handles our application's server-side logic and API services, providing the robustness needed for real-time interactions and data management. Node.js is particularly well-suited for handling asynchronous operations and high volumes of traffic, which is essential for a fluid user experience.

Database:
We chose MongoDB for our database needs due to its flexibility and strong performance with large datasets. MongoDB is a NoSQL database, perfect for accommodating the varied and complex data structures we manage, such as user profiles and preferences. It allows for efficient data retrieval and manipulation, which is crucial for delivering relevant roommate suggestions quickly.

Challenges we ran into

A significant challenge in developing Cribzz was our initial decision to use React for the frontend within the MERN stack framework. Motivated by React's renowned capabilities for building dynamic user interfaces, two team members dedicated a considerable amount of time to learning the framework. However, the application quickly hit a major roadblock when we attempted to integrate React with our backend.

The specific difficulties involved problems with connecting the React frontend to the Node.js and Express backend. We faced persistent issues in state management, where maintaining consistency of data across the application proved complex. Additionally, the data flow between the server and the client side was not functioning as expected, which critically hampered both the performance and development pace of our project.

As the project timeline advanced, these integration challenges led to a reassessment of our technological approach. Ultimately, we made the difficult decision to pivot from React to a more traditional and familiar setup using HTML and CSS. This required us to essentially recode our entire frontend, a daunting task given the time already invested and the project deadlines looming ahead.

This pivot was a direct response to the integration issues, aiming to streamline development and avoid further complications that could jeopardize the project's success. By shifting to HTML and CSS, we sought to regain control over the project's technical direction and ensure a smoother continuation of development.

Accomplishments that we're proud of

One of the standout accomplishments for the Cribzz project was our team's ability to rapidly adapt and execute a significant pivot under pressure. After deciding to move away from React due to integration issues, our team displayed remarkable resilience and commitment by recoding the entire frontend using HTML and CSS. This was not a small feat, particularly given the advanced stage of development and the time constraints we were facing.

A particularly proud moment was when our team pulled together for an intensive coding session at the Armory, dedicating over 15 hours in a single day to ensure that our project remained on track. This hackathon session was not just about coding; it was a testament to our team's spirit and determination. Throughout this challenging period, our collective focus was unwavering, driven by a shared commitment to see the project succeed despite the setbacks.

Successfully transitioning to a simpler, more manageable technology stack overnight and catching up to our project timeline are achievements that speak volumes about our team's capabilities. The ability to not only troubleshoot technical issues but also to execute a strategic pivot swiftly showcased our team’s technical proficiency and adaptive project management.

This experience solidified our belief in our collective strength and our capability to tackle and overcome unexpected challenges. The pride we take in this accomplishment is immense, not only for the technical achievements but also for the teamwork and perseverance that turned a potential crisis into a triumph for Cribzz.

What we learned

Throughout the development of Cribzz, our team gained invaluable lessons in both technical skills and project management. One of the most significant educational experiences was our foray into learning React. Although we ultimately did not use React in our final project, the process of exploring and attempting to integrate it provided us with a deeper understanding of modern JavaScript frameworks and their ecosystems. This knowledge has prepared us better for future projects where such technologies might be more applicable.

We also learned the importance of aligning technology choices with the team’s existing skills and project requirements. Our attempt to use React highlighted the challenges of adopting new technologies under tight deadlines and without prior experience, teaching us to better assess the feasibility of new tools in relation to our project timelines and goals.

The pivot from React to HTML and CSS was a practical lesson in adaptability and decision-making under pressure. It reinforced the importance of flexibility in project development, especially when faced with critical technical issues. We learned that being willing to make tough decisions, such as technology shifts, is crucial to keeping a project on track.

Moreover, our hackathon coding session was not only a testament to our commitment but also a real-time lesson in teamwork and perseverance. We learned that effective communication and mutual support are as vital as technical acumen in achieving project milestones.

Overall, the development of Cribzz enriched our team with new technical knowledge, enhanced our problem-solving skills, and strengthened our capability to work collaboratively under pressure. Each lesson learned from this project has left us better equipped for future challenges in the fast-evolving field of software development.

What's next for Cribzz

Looking ahead, Cribzz is set to evolve and expand in ways that enhance user experience and extend our reach. Our immediate focus is on refining our platform to include more interactive and user-friendly features. Key among these will be the introduction of an in-app messaging system, allowing users to communicate directly within Cribzz. This will facilitate better interactions between potential roommates before they decide to live together, enhancing trust and compatibility.

We are also planning to expand our algorithm to include additional user preferences and lifestyle factors. This will refine our matching process further, making it more granular and tailored to individual needs. By incorporating machine learning techniques, we aim to continuously improve the algorithm based on user feedback and interaction patterns, ensuring that our matches become more accurate over time.

In terms of growth, we intend to extend our service to more cities and possibly internationally. Partnering with universities and real estate agencies will allow us to reach a broader audience, helping more people find compatible roommates as they transition to new phases of their lives.

Furthermore, we plan to enhance the scalability of our platform to handle an increasing number of users without compromising on performance. This will involve upgrading our infrastructure and possibly adopting more robust technologies that can support larger datasets and more complex queries.

Lastly, we are committed to maintaining the highest standards of privacy and security for our users. As part of this commitment, we will continue to update our security measures in line with the latest industry standards and regulations.
",https://github.com/Vasu1415/RoommateMatching,,"Best First Time Hack - Bitcamp, Best Moonshot Hack - Bitcamp","javascript, html, css, node.js, mongodb, express.js",Arushi,Tibrewal,atibrew1@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"This weekend at the hackathon provided our team with a hands-on, intense, and ultimately rewarding experience with several technologies, particularly MongoDB and the broader MERN stack. MongoDB stood out as a pivotal component of our project, Cribzz, due to its flexibility and powerful document-based structure which perfectly supported our needs for dynamic data management.

MongoDB:
Our interaction with MongoDB was largely positive, showcasing its robust capability in handling unstructured data. It allowed us to efficiently store and manage diverse user information and preferences, which are core to our roommate matching algorithm. However, we faced some challenges in optimizing query performance, which was a learning curve for us. The flexibility of MongoDB’s schema-less design, while beneficial, required us to think carefully about data structure to ensure efficient data retrieval and scalability.

MERN Stack:
Working with the MERN stack was an enlightening experience, especially integrating Express and Node.js to create a responsive backend. Although we initially faced hurdles with integrating React, the rest of the stack facilitated a smooth development process once we pivoted to using traditional HTML and CSS for the frontend. Node.js provided the scalability we needed, handling multiple connections at once without a hitch.

React:
Our experience with React, although challenging, taught us valuable lessons about the importance of matching technology with team skills and project timelines. React’s component-based architecture and state management features, while powerful, required a deeper initial learning investment than we were able to commit during this fast-paced hackathon.

Overall, the technology experience this weekend was immensely instructive. We appreciated the opportunity to dive deep into MongoDB and the MERN stack, gaining insights that will undoubtedly benefit our future projects. Our challenges with React have also prepared us better for future endeavors, highlighting areas for further learning and development.",University of Maryland - College Park,,University of Maryland - College Park,3,Ohsung,Kwon,kwon43536@gmail.com
Puddle,https://bitcamp2024.devpost.com/submissions/507514-puddle,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 15:27,"Inspiration


As students, we have a lot of expenses to cover, many of which are paid together with our friends. Normally, it is very hard to keep track of each person's dues and how much they've paid. 


What it does


Puddle is an app that makes the process of pooling money easier. Users can create ""pools"" which they can invite friends to. Each pool keeps track of how much each person has to pay, and how much they've paid. 


How we built it


First, we planned out a list of features that we wanted to make. Then, we went on to our prototyping stage, which included a rough skeleton draft and a finalized Figma prototype. The app was built with SvelteKit for the front-end, and Firebase for our back-end, database, and authentication manager. 


Challenges we ran into


Getting authentication to work was one of the most time-consuming parts of the project. Making the layout consistent across devices and meeting Google's standards for PWAs was very difficult.


Accomplishments that we're proud of


We're proud that we were able to develop an app following a clear timeline. 


What we learned


We've learned about the internal workings of financial management services and how to use Capitol One's Nessie API. Plus, this was our first time making a PWA (progressive web app).


What's next for Puddle


In the future, we hope to build Puddle as a native app. 

",https://github.com/TigerHacks-Competition-Team/Bitcamp-2024,https://www.youtube.com/watch?v=iI8CfmVSa98,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Financial Hack - Capital One","sveltekit, css3, tailwind, html5, http, javascript, typescript, propelauth, firestore, firebase, figma",Ruadhan,KM,ruadhan.kellermcleer@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,The wifi was great.,University of Maryland - College Park,puddleapp.club,"Wilson HS, Jackson-Reed High School, University of Maryland - College Park",3,Gus,Ruben,gusruben@protonmail.com
least supportive emotional support animal,https://bitcamp2024.devpost.com/submissions/507522-least-supportive-emotional-support-animal,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 15:36,"Inspiration

We think therapy nowadays is expensive and doesn't always work. Our solution provides easily accessible, free therapy that guarantees you the value you did not pay for. Our app connects you with one of our unlicensed feline therapists, who are less than willing to help you!

What it does

Our app allows you to connect with a feline therapist. Once you enter the chat, you can talk about your problems and get responses from select cats.

How we built it

We ran npm create svelte@latest myapp and the rest of the project built itself.
We used SvelteKit for the frontend and swiped our card for the OpenAI API. We created a basic chat interface that responds to a user's message with a response generated by GPT-3.

Challenges we ran into

Svelte was completely new to us so we had to learn everything, without the support of therapists. 

Accomplishments that we're proud of

Diving into Svelte headfirst!

What we learned

We learned how to use Svelte, Svelte project structure, and how to use the OpenAI API. During our project, we also explored other APIs like Giphy, but we ended up not including those in our project.

What's next for least supportive emotional support animal

New animals? Gacha? Subscription based service? Crypto mining in the background?
",https://github.com/spectregray/least-supportive-emotional-support-animal/,,"Best First Time Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","svelte, javascript, openai, web",selena,Bao,appleselena@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,We used SvelteKit. It was a really good experience because we were able to get started and learn it easily with the help of docs and the internet.,"University of Maryland, College Park",,University of Maryland - College Park,3,Jason,Liau,jasonbenjaminliau@gmail.com
Test 3,https://bitcamp2024.devpost.com/submissions/507544-test-3,Submitted (Hidden),Pending,Submit,4/20/2024 15:58,"Inspiration

Hello 3

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Test 3
",,,"Best UI/UX Hack - Bitcamp, Best use of AI/ML Innovation for the Francis Scott Key Bridge Recovery Efforts - Cloudforce, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group",python,Varun,Chilukuri,varunch321@gmail.com,,,Yes,MongoDB,NYU,,,0,,,
UMD Eats,https://bitcamp2024.devpost.com/submissions/507607-umd-eats,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 17:25,"Inspiration

As UMD students we recognized the poor accessibility on the UMD app on updated meals offered at the dining halls on a daily basis. Our team and I decided to use this hackathon as an opportunity to begin a project that will help update the UMD App in a more efficient manner and alert UMD students when and where their favorite meals will be offered.

What it does

Though our app does not include full functionality, it presents the meals offered at the Yahentamitsi on a specific day. This data can be used by the user to determine meals offered at breakfast, lunch, and dinner.

How we built it

Our team used VSCode to collaborate our code and implement it. We used the LiveShare feature to share code and used languages such as HTML/CSS, JavaScript, Python, BeautifulSoup, Node.js, and more.

Challenges we ran into

Several challenges we ran into was the lack of experience with web scraping as well as web-development. After watching tutorials, using HTML templates, and receiving help from mentors we were able to outline our project and begin coding.

Accomplishments that we're proud of

We are extremely happy we got this opportunity to learn more about web development and web scraping as it is skills we will definitely be using in the future.

What we learned

We learned how to trouble shoot our code and debug our design. We also gained exposure to new coding IDEs, languages, and skills. We learned how to collaborate inside a team and work with one another with assigning tasks and updates. 

What's next for UMD Eats

We hope to further implement the unique features to our project in the coming months and make it a fully functional website.
","https://github.com/NithikaRamanathan/UMD-Eats, https://umd-eats-server.vercel.app/#",,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, University Course Catalog Data Extraction and Query Challenge - Xficient","html, css, javascript, python",MeenakshiRS1,Rama Subramanian,mramasub@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"Our team got the opportunity to explore a lot of different concepts and frameworks. We learned more about web development, web scraping, and using github.","University of Maryland, College Park",umd-eats.biz,"University of Maryland - College Park, University of Maryland - University College",3,Sean,Stone,seans1022@gmail.com
Untitled,,Draft,Pending,Manage team,4/20/2024 17:43,,,,,,Thejitha,Rajapakshe,thejitha.rajapakshe@gmail.com,,,,,,,Montgomery College,0,,,
Sustainable Shelters,https://bitcamp2024.devpost.com/submissions/507635-sustainable-shelters,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 17:45,"Inspiration

We're driven by the understanding that climate change is going to shake up where and how we live, affecting everything from our homes to our wallets. But we're not just sitting back and waiting for it to happen. We're on a mission to find the best places to live – ones that can weather the storm of climate change while still being affordable for everyday folks like you and me.

Our idea came from a simple truth: we all deserve to live in places where we feel safe and secure, no matter what's going on with the weather. So, we're using smart technology to figure out which states are going to be the safest bets in the face of climate change.

But it's not just about climate – it's about making sure these places are places we can actually afford to live in. We're digging into data on things like housing prices and cost of living to find places where we can live comfortably without breaking the bank.

At the end of the day, our goal is simple: to give people like you and me the tools we need to make smart decisions about where to live, so we can build futures that are strong, stable, and secure – no matter what the weather throws at us.

What it does

The result of our analysis yields the best 11 states to live in, balancing climate resilience with housing affordability, making them ideal choices for individuals and families seeking a secure and comfortable living environment in the face of climate change.

How we built it

Climate Forecast API: The program utilizes the Open-Meteo climate forecast API to retrieve climate data for different states over a period of 25 years. This data includes correlation numbers that indicate how much each state's climate has changed over that time span. A higher correlation number suggests a greater impact from climate change.
Extracting Top 15 States with Least Correlation Number: After retrieving the climate data, the program identifies the top 15 states with the least correlation numbers. These states are considered to be less affected by climate change based on the data provided by the API.
Kaggle's Dataset on Affordability: The program accesses a dataset from Kaggle containing information about the affordability of housing in various states. This dataset likely includes factors such as median home prices, cost of living, income levels, and other relevant metrics.
Extracting Top 15 Most Affordable States: From the Kaggle dataset, the program identifies the top 15 most affordable states based on the specified criteria.
Comparing the Lists: The program compares the lists of the top 15 states with the least correlation numbers (indicating climate resilience) and the top 15 most affordable states. By finding the common states between these two lists, the program identifies the states that are both climate-resilient and affordable.
Output: The program outputs the names of the 11 states that are identified as the most climate-resilient and affordable based on the comparison.

Challenges we ran into

We initially struggled to finding the proper APIs and how to use them. However, once we figured out how to expand the data, we were able to work much faster.

Accomplishments that we're proud of

We made the OpenMeteo API work.

What we learned

We learned how to use the Python libraries Numpy, Matplotlib, and Pandas, as well as how to use them to process large amounts of data. 

What's next for Climate Change and Affordability in the United States

Now knowing which states are relatively affordable and resilient to the effects of climate change, we are interested in seeing what can incentivise people to move to those states. 
",https://github.com/Dakshita24/Bitcamp-2024,,"Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Sustainability Hack - Bitcamp, Best Use of APIs related to Housing/Climate Change - Fannie Mae","python, open-meteo-forecast, numpy, pandas, matplotlib",Riya,Thapar,riyathapar06@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"Utilizing the OpenMeteo API, we gathered vital climate data. Our final program, developed using Python along with the Matplotlib and NumPy libraries, enabled efficient analysis and visualization of this data",University of Maryland College Park,,University of Maryland - College Park,3,Dakshita,Pal,dakshitapal902@gmail.com
vike,https://bitcamp2024.devpost.com/submissions/507675-vike,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 18:14,"Inspiration

All of us are students who have been blessed with the fortunate opportunities given by modern technology. However, not everyone around the world has equal access to these gadgets that we take for granted. Realizing the need to address this issue, our team worked to create a budget friendly alternative to those unable to afford keyboards and mice. 

What it does

With nothing besides a laptop webcam and a piece of paper, we built a tool that is capable of replacing the computer mouse and keyboard by performing the same tasks at a small fraction of the price. Our project enables those unable to purchase certain technology appliances to have easy and convenient access to them wherever they go.

How we built it

Our project revolved around the use of computer vision. With the mouse, we tracked the location of the paper mouse as well as the movement of the pointer and middle finger, detecting a click whenever the finger went up and then back down onto the mouse. The keyboard was built with an on screen keyboard that could be interacted with by fingers. Each finger would have a round circle at the tips of each that would grow larger the closer it came to the camera, all enabled with the use of computer vision.

Challenges we ran into

While we initially planned to utilize a naive Mediapipe implementation and wrap up the computer vision aspect of the application within one day, this process ended up being a lot more grueling than expected. Mediapipe had issues when detecting the back of our hands versus the front of our hands, and we had no idea how to combat this. After a few hours of failed debugging, we ended up pivoting our entire approach and focusing on detecting contours with certain color values. This proved to be extremely valuable and helped us successfully implement our application shortly after.

Accomplishments that we're proud of

We’re proud of maintaining grit throughout the debugging process; there was one point halfway through the hackathon when we had considered restarting because nothing was working. However, we managed to clutch up, and we are happy with the end result! Additionally, while we are obviously proud of the application’s detection logic, our personal favorite aspect of the application is its frontend. It’s minimalistic yet functional, with a few hidden gems, and we thoroughly enjoyed creating it.

What we learned

The challenges we came across with using a naive Mediapipe implementation ended up forcing us to end up learning a lot more about restrictive color spaces, HSV format, and how contour detection can be used as a valuable heuristic for real object detection. These skills were critical to our success in developing the app.

What's next for Vike

We're hoping to merge both executables so that users can simultaneously use the virtual mouse and keyboard, which we believe would be a substantial improvement in the quality-of-life for programmers around the world.
",https://vike24.vercel.app/,https://youtu.be/ycZs0kVo5Rk,"Best First Time Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best DEI Hack sponsored by Fidelity - MLH, Most Philanthropic Hack - Bloomberg","react, tailwindcss, firebase, opencv, mediapipe, python",Aryan,Sharma,aryan.sharma0714@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"Our project focused mainly on computer vision which led to us using cv2 and Mediapipe a lot. Additionally, our project involved storing user data, which we did through the use of a Cloud Firestore database.",Centennial High School,N/A,"Centennial High School, Centennial",3,Victor,Liu,victorliu5000@gmail.com
Debuggies,https://bitcamp2024.devpost.com/submissions/507677-debuggies,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 18:15,"The battle with bugs in the computer science field is something faced by newbies and professionals alike. So, we took this literally by creating a game where a player must “fight” common programming bugs and “kill” them all. From NullPointerException bugs to StackOverFlowError bugs, you must keep your wits about you and effectively use tools like breakpoints to defeat hordes of enemies until you fully debug the battlefield. This game is not only fun and challenging, but it will also teach new programmers some of the most common errors, exceptions, and bugs that exist while programming in Java and introduce them to key functions of a debugger. 

Inspiration

As teaching assistants of a Java and C course at UMD, we often notice that students don’t like using the debugger to fix errors in their code. Most students don’t even know how to properly use a debugger and are afraid to learn, and so they will stick to inserting print statements. While this can be useful for easier assignments, using a debugger is often necessary for debugging projects that are more complex. Thus, we created the game “Debuggies” to illustrate the process of debugging in a fun, interactive manner. Through this game, we hope programming beginners will learn and recognize some common bugs in Java and see how useful and powerful a debugger can be. 

What it does

Our game creates a fast-paced real-time environment where players must constantly keep their wits about them to survive. All the enemies that the player will encounter represent common programming errors, or bugs, with their power reflecting how severe the error is. The player can shoot at these bugs to defeat them, but will quickly realize that simply shooting cannot stop this never-ending horde, so they must learn how important tools such as breakpoints (given throughout the game as abilities) are in their survival. These tools require that players can quickly and accurately identify errors in real-world code examples, creating an interactive way to not only develop one’s debugging skills, but also compete with friends while doing so. With the non-stop onslaught of enemies and bullets alike, players must learn how each bug is characterized, how to identify them in real-world code, and how to do all of this on the fly - or else risk certain death.

How we built it

Our game was built using the Java programming language in the Eclipse IDE, with the Slick2D graphics library. This season, we opted to use Java, as its object-oriented design intuitively allows for the building of large-scale systems while remaining convenient to divide into various independent systems for efficient (and fairly conflict-free) development. Everyone in our group was also familiar with Java coming into Bitcamp, giving us more time to challenge ourselves to build something we’ve never built before. 

To streamline our workflow, we used GitHub source control, and broke our project down into multiple independent systems that each of us could work on. This way, everyone could contribute equally while minimizing conflicts of code to allow for more efficient development. Throughout the course of our development we also heavily emphasized close collaboration so that everyone’s opinions could be taken into account before making any major decisions.

Challenges we ran into

Building a real-time game created a myriad of challenges, which began presenting themselves to us as early as a few hours into our development. As programmers who are not too familiar with game development, we had to go through a lot of trial and error, and many of our original systems (input, physics, rendering) had to be revised or overhauled as our project progressed and its needs became increasingly more complex. 

One notable example of this was with our physics engine. As the number of objects in our game increased into the hundreds, we found that our physics handler was not efficient enough to check for collisions in real-time. This forced a rewrite of our physics system from scratch, which took a lot of time.

Accomplishments that we're proud of

Our solutions to the needs of a real-time game are certainly not perfect, but they served as a wonderful introduction to these complexities that often go unnoticed. Being able to create a fully functional game together was an incredibly rewarding experience, and seeing our visions come together into a single fun yet practical product has been inspiring.

As a team, we’ve always wanted to build a complete game together, and we’re happy that we were able to see our vision come true at Bitcamp 2024.

What we learned

From working on this project, we’ve learned the important role planning plays in ensuring a smooth development process. During this hackathon, we took the liberty of planning a basic class structure for our program before starting to code, and we found that this led to fewer conflicts and the need for refactoring later. Had we not agreed on some sort of architecture before coding our program, our code certainly would have been a lot more disorganized and harder to work with.

We’ve also seen firsthand the importance of efficient algorithms. We know that inefficient algorithms take more time, but in the context of our program, these inefficiencies significantly influenced the rendering of our program. While developing our application, we’ve had multiple instances where we could visually see faster and more consistent results when we used more optimized algorithms.

What's next for Debuggies

After Bitcamp, we plan to add more content to Debuggies! Our work here has only just begun, and while we have some basic enemies, there’s a ton of potential for this game, both in terms of gameplay and educational value. For now, we plan to add more examples of code snippets and increase our variety of bugs. This will add more complexity to our game, making every playthrough more unique, while also giving players more information to learn from.

We also plan on expanding the game’s functionality by introducing different difficulty levels and connecting the game to a database so that high scores can be stored to encourage friendly competition between friends. 
",https://github.com/wendytu2022/Debuggies,,"Best Bitcamp Hack - Bitcamp, Best Gamification Hack - Bitcamp, Most Philanthropic Hack - Bloomberg, Best Financial Hack - Capital One,  Best Razzle Dazzle Hack - Bitcamp","java, eclipse",Shu-Ye,Lin,shuyelin06@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,The WiFi was great!,"University of Maryland, College Park",,University of Maryland - College Park,3,Anna,Dai,anna.dai916@gmail.com
Termbook,https://bitcamp2024.devpost.com/submissions/507691-termbook,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 18:50,"TermBook

Inspiration

Our team agreed journaling makes us feel better. From stress relief, to self reflection, to improved ability to communicate and express ourselves - the benefits of journaling are endless. But it can be very hard for busy developers to remember to journal, even if it would greatly benefit their mental health. 

What it does

Termbook is a complete journaling system to keep developers on the journaling journey. Each time you open your terminal - you will be prompted to enter a journal entry for the day (unless you already have). Our program will force you to write at least 50 words so you can unburden and reflect. You can then use a cloud based web app to view all your previous entries. You can use the github account you use every day with our service! We have fantatic docs and cross platform support so no matter who you are, you can get started journaling with us.

How we built it

We built the terminal aplication with Golang and the TUI framework bubbleTea. We built an api with golang to store the journals in a sqlite database and make them availble to our Next.js web app for easy viewing of your past journal entries. The web application was built with full user authentication and authorization in mind, as well as protected API routes for more security. 

Accomplishments that we're proud of

We are proud of the beautiful user experience we've created both on the web and in the terminal. We want our software to establish the relaxing, fufilling atmosphere of journaling.

Challenges we ran into

One challenge we ran into was working with Golang time stamps across the various platforms we support (mac, linux, windows). In some cases, the time stamps wouldn't match and caused strange bugs. Another issue was setting up authentication and securing next.js routes. We also spent a lot of time making sure our styling was just right.

What's next for Termbook

We would like add features like a streak tracker and better tooling for searching and and filtering through journal entries.
","https://www.termbook.co, https://github.com/jamesmontebell/termbook, https://github.com/idugan100/termbookbackend",https://youtu.be/eKhDOf6DWaA,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH","react, next.js, golang, sqlite, amazon-web-services, tailwind, css, bubbletea, lipgloss, nextauth, vercel",Brian,Bowers,bpb9629@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,We really enjoyed the simplicity and productivity of Golang and the seamless deployment experience of Next.js and Vercel.,Salisbury University,https://www.termbook.co,Salisbury University,3,Isaac,Dugan,isaacd4444@gmail.com
T.O.M. - Tabby of Motivation,https://bitcamp2024.devpost.com/submissions/507695-t-o-m-tabby-of-motivation,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 18:57,"Inspiration

The primary inspiration behind T.O.M. was actually none other than our own lives as college students. With all the near-constant rushing and stress to make it to class, submit assignments on time, pass exams, and put out quality projects, there is little time left for us to catch our breath in between and admire our handiwork. Through T.O.M., we hope to encourage students, namely those in college, to give themselves a much-needed pat on the back every now and then and remind them that regardless of how hard things feel right now, they are doing great and are on track to achieve all their dreams and goals. 

What it does

At his core, T.O.M. is simple. When activated, he displays an encouraging message to the user and reads it aloud to them. By clicking him again, he will read you another encouraging message. (You may even hear one of his favorite cat-themed proverbs!) Despite this seemingly simple surface functionality, there is a multitude of design elements incorporated into the website design that enables T.O.M. to have the calming and encouraging presence we intended. The primary color of the website is a dark shade of olive green, a color that, for many, represents harmony, peace, and tranquility. T.O.M.’s bow is a bright shade of cream, which provides a pop of energy and inspiration to the viewer, as well as a visual contrast to the rest of the website. The top menu includes just three pages - the Home page, where you first meet T.O.M.; an About Us page where you have a chance to meet and connect with our team; and a Mission Statement page where you can view the vision for T.O.M. The simple design of our website enables even first-time users to easily access and meet T.O.M., and hear his many tabby words of wisdom.

How we built it

The entire project was built on Visual Studio Code, and mostly comprises HTML and CSS. There is also some embedded JavaScript, which was used on our text-to-speech and message selection functions. The completed application was deployed on Vercel through a GitHub repository.

Challenges we ran into

We ran into quite some challenges with UI development and figuring out the text-to-speech function of T.O.M. One unexpected challenge with UI development involved choosing the right color scheme for everything we wanted to include. At first, we planned on using a blue-and-orange color scheme, but this design was ultimately scrapped in favor of more calm and “less explosive” colors. The text-to-speech function of T.O.M. took quite some time to get working, given our limited experience with anything like it.

Accomplishments that we're proud of

We are most proud of the visual design of our website. Through the use of only a few theme colors and a simple, accessible layout with well-placed user interaction elements, we were able to create a relatively minimalist and intuitive layout for the user to navigate. We are also really proud of the new skills and techniques we’ve been able to pick up through the creation of this website. While these may not be the most advanced skillsets, many of the things we did were still things we’ve never done before on a website, and were a valuable step forward in our coding skills.

What we learned

The main thing that we learned through this project was how to create better and more advanced UI designs using HTML/CSS and Javascript. While we all had some experience with these languages, this project was a big step forward in terms of design and features from all the previous websites we’ve made. It was a bit of a hassle, particularly in the beginning, getting the initial skeleton of the website figured out, and we had to use a few CSS styles we were unfamiliar with. Another thing we learned was how to create and implement a text-to-speech feature for a website. None of us had prior experience in this, and it involved a lot of trial and error to get right.

What's next for T.O.M. - Tabby of Motivation

In the future, we look to expand the functionality of T.O.M. to be more than just a fun source of encouragement for users. By integrating a GPT model with T.O.M., we aim to allow him to generate schedules for college students based on parameters taken as input, such as the things they need to do in the day and how much time each thing should take. This will require significant JavaScript and Python usage, along with a full stack framework like Django, but it will broadly expand functionality of T.O.M. and enable him to become much more than just a talking tabby (though that function will definitely stay!).
",https://t-o-m-cat.vercel.app/,,"Best First Time Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","html/css, javascript, github, vercel, vscode",Stephen,Wu,sswu2005@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"Our experience with the technologies we used went fairly smoothly. There was a bit of difficulty at the beginning setting up collaboration through GitHub, but everything worked out in the end.",University of Maryland,,University of Maryland - College Park,2,Om,Arya,om.arya0577@gmail.com
Test 5,https://bitcamp2024.devpost.com/submissions/507709-test-5,Submitted (Hidden),Pending,Submit,4/20/2024 19:31,"It came to me in a dream
",,,,dream,Varun,Chilukuri,varunch321@gmail.com,,,Yes,None,UVA,,,0,,,
Course Converse,https://bitcamp2024.devpost.com/submissions/507712-course-converse,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 19:37,"Inspiration

University course catalogs are treasure troves of information crucial for students, faculty, and administrators. Unfortunately, this valuable data is often trapped within unwieldy, unstructured PDFs, making access and utilization challenging. 
Our mission is to liberate this data by extracting key elements and converting them into a structured, machine-readable format. Moreover, we're committed to developing a natural-language query interface for precise inquiries, ensuring users receive accurate answers with specific page and paragraph citations. 

What it does

Our project, Course Catalog Intelligence, pulls important information from university course catalog PDFs and lets you ask questions in plain language. It helps everyone at the university find what they need easier.

How we built it


Indexing: We first indexed the university course catalog PDFs using Langchain's tools. 
Data Modeling: We defined a data model for the extracted course information using Pydantic. This model, named Course, includes fields such as title, code, description, credit hours, and prerequisites. This ensures consistency and clarity in the structured data representation.
Generation: To generate answers to user queries, we implemented a generation pipeline. This pipeline consists of a prompt template, a language model (in this case, ChatOllama), and an output parser.


Challenges we ran into

To start, we initially used Azure AI Document Intelligence. It is a cloud-based service that leverages machine learning models to automate data processing within applications and workflows. 

Advantages of Azure AI Document Intelligence:


Efficient Data Extraction: Document Intelligence automates the extraction process, saving time and effort.
Customization: Create custom models to handle unique document layouts and formats.
Integration: Seamlessly integrate with your existing applications and workflows.
Structured Output: Receive structured JSON output, making it easy to work with the extracted data.
Custom Models and Classification Models: we created a custom model using OCR to retrieve fields in a structured manner. Unfortunately, this approach has some limitations:


Limitations Encountered:


Training Page Limit: You mentioned that the training is limited to one page. This constraint can be challenging when dealing with longer documents.
OCR Limitations: Using OCR (Optical Character Recognition) is restricted to a single page, and consistency issues may arise across files.
Testing Variability: The testing process didn’t remain consistent across different files, which can impact reliability.


Accomplishments that we're proud of

Llama3 was released 3 days ago and we were able to leverage the model in our application!

We take immense pride in not only achieving our objectives but also in the learning trajectory that this project offers.

What's next for Course Converse

With a successful prototype in place, we are enthusiastic about expanding our model's horizon. We aim to integrate more diverse datasets, such as responses in the healthcare industry, and apply them to more industry problems. 
",https://github.com/sprihajha/bitcamp2024/tree/dev,,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, University Course Catalog Data Extraction and Query Challenge - Xficient","llama3, rag, langsmith, langchain, python, flask, git, github",Spriha ,Jha,jha.spriha@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"Langchain: Working with Langchain's tools, including text splitter, vector stores, and embeddings, was crucial for indexing and processing the course catalog PDFs. The documentation and examples provided were helpful in understanding how to integrate these tools into our project.

Azure Document Intelligence: We also explored Azure Document Intelligence for its capabilities in processing and extracting information from documents. Although we ultimately chose Langchain for our solution, Azure Document Intelligence offered robust features and integration options that we found valuable during our exploration phase.

Pydantic: We utilized Pydantic to define the data model for the extracted course information. Its simplicity and ease of use allowed us to quickly define the structure of our data and ensure its consistency.

ChatOllama: Implementing ChatOllama for natural language generation was an interesting experience. It provided us with a powerful language model to generate responses to user queries. However, fine-tuning the model's parameters to optimize performance could be challenging at times.

Llama3: We also experimented with Llama3 for language modeling, which offered advanced capabilities in generating responses to user queries. Its integration with our project provided additional flexibility and options for natural language processing tasks.

GitHub: GitHub served as our primary version control and collaboration platform throughout the hackathon. Its familiar interface and seamless integration with our workflow allowed for efficient code management and collaboration among team members.","University of the District of Columbia, New York University",,"New York University, University of the District of Columbia",1,Ronald,Ngounou,landryzinkoue@yahoo.fr
Warden: A Facial Recognition Security System,https://bitcamp2024.devpost.com/submissions/507727-warden-a-facial-recognition-security-system,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 20:13,"Inspiration

Artificial intelligence, machine learning, and computer vision have always been large topics of interest for me, so when I was brainstorming possible projects for Bitcamp this year, I recalled an idea I've always been interested in but never put to the test. 

With increasing tensions across the globe, feelings of unease and anxiety loom large. While large corporations and governments will surely have the best security systems money can buy, most are left in the dust. Even simple security systems with the most basic of cameras and alarms can quickly run up hundreds of dollars. The need for a security system that has a low cost of installation, low cost of maintenance, and low cost of energy has never been higher.

While a security system is generally not what comes to mind when most think of putting cutting-edge technology to the test, there is much more to be uncovered. 

What it does

My project revolves around the usage of cameras to detect and identify faces. It periodically takes images and detects faces in them. When a new face is detected, a new directory is made and the image, along with its landmarks, is saved. By the time the program is done running, it will have a folder for every unique face, along with every picture that was taken of that face inside the folder. This allows those who value their privacy and security to have a system that protects them without spending large amounts of money.

How I built it

I built Warden using Google Colab to host and execute my code.
I used Python for most of the computation and used a bit of JS to snag pictures from the browser.
The machine learning model I used was from Google's mediapipe, and allowed me to detect facial landmarks.
For numerical computation, I used scipy, math, numpy, and opencv.
Given the set of landmarks on a face, here is my general process for developing each face's unique matrix ID:


Select landmarks most representative of one's face
Grab x and y coordinates of each landmark, convert to np array
Calculate center of gravity and normalize to origin (some points will in in negative quadrants, now it doesn't matter where you are on the camera, it will detect you as the same)
Calculate the scale between two of the landmarks (choose two that are farther apart, maybe left cheekbone and right cheekbone) and normalize to scale (proportions will be preserved because we have normalized to the origin and we scale each point the same, and now no matter how far or close you are to the camera, you will be detected as the same)
Now we will calculate what I named Ax and Ay. We will take the x of every landmark and multiply it with every other x to create the Ax matrix. Do the same for Ay (with y coordinates instead)
(For example, if we detected 3 landmarks whose x-values ended up to be [1 2 3], then our matrix would be [[1 2 3] [2 4 6] [3 6 9]])
To see if these A matrices correspond to the same face, we want to calculate the Frobenius normalization of the difference between the two Ax matrices and add it to the Frobenius normalization of the difference between the two Ay matrices. If this value is under a set threshold, it is the same face. Otherwise, it is not.


Challenges I ran into

One of the largest challenges I had was just getting the webcam to work with Colab. Colab has some resources for snagging webcam images, but they were not great, and resorted to saving the image first, which was very inefficient for my means.
Another issue was false negatives, which I was able to solve using normalization functions.
There were also tons of minor bugs and tweaking I had to do every time I made a change that would impact what my thresholds would be. 

Accomplishments that I'm proud of

I'm proud of creating a project that works and is able to identify faces. Of course, there is lots of room for improvement, but I'm glad I was able to identify faces, group them by their owners, and have a decently low error rate.
I am also happy that I was able to attend many of the workshops that taught me things like ML.

What we learned

I learned a lot about using mediapipe, as it was my first time actually using the software (I actually learned about it from one of the sign-language detection workshops). I am very glad I was able to use a powerful API without paying (lol). I also learned a lot about ML and training from workshops. I learned how to identify who's face was who's. 

What's next for Facial Recognition Security System

In the future, this technology could be adopted into systems like security cameras or check-in cameras. There are better methods for normalization and identification, so implementing those would be a good next step as well. 
",https://github.com/dswl/Warden/tree/main,https://youtu.be/LDpJlUqgWOg,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Digital Forensics Related Hack - Cipher Tech, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group","colab, python, mediapipe, numpy, pillow, scipy, matplotlib, opencv, machine-learning, computer-vision, javascript",David,Liu,davidjinliu@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,It was good. I think the highlight of my technology experience was using mediapipe.,University of Maryland,,University of Maryland - College Park,0,,,
PeerSphere,https://bitcamp2024.devpost.com/submissions/507728-peersphere,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 20:16,"Inspiration

Our inspiration for PeerSphere came from recognizing the untapped potential of peer-to-peer learning in higher education. We believe that students have a wealth of knowledge and expertise to share with each other, beyond what is available through traditional faculty and teaching assistants. By creating a platform that connects students across universities for 1-on-1 tutoring sessions and open thread discussions, we aim to foster a vibrant community of learners helping learners. PeerSphere empowers students to take ownership of their education and benefit from the diverse perspectives and skills of their peers nationwide. Recognizing that students often learn effectively from their peers, PeerSphere seeks to harness the collective knowledge and skills of students across different universities.

What it does

PeerSphere is a dynamic web-application designed to facilitate peer-to-peer tutoring and collaborative learning among students from various educational institutions. It allows students, professors and teaching assistants all over the United States to sign up as tutors to provide one-on-one, office-hour style sessions on specific academic concepts. It leverages cutting-edge technology to enhance the learning experience through its advanced video calling feature, which is at the heart of its one-on-one tutoring sessions. It also offers an in-meeting chat option with the instructor. The platform also includes open thread discussions, where students can engage in broader conversations, ask questions, and share resources related to their studies. This structure not only enhances accessibility to diverse educational support but also cultivates a rich learning environment where students can both teach and learn in a mutually beneficial setting. By leveraging the collective knowledge of students across various institutions, PeerSphere breaks down traditional barriers and expands access to valuable educational resources beyond the confines of a single university.

How we built it

PeerSphere is a full-stack web application utilizing React Vite for the frontend, Express for the backend, and PostgreSQL for the database. We utilized WebRTC and WebSockets for the video calling and chatting, respectively. JWT and bcrypt were used for authorization and authentication. All of the code was written in TypeScript. Several other tools such as Drizzle ORM, React Query, and Joi were used to facilitate development flow.

We first ideated and designed our website on Excalidraw. We then began work separately using Git version control, and built everything little by little until we were satisfied.

We then hosted the site completely on Render. I love Render.

Challenges we ran into

Our team had a mix of experience and inexperience, thus making it difficult to distribute work initially. However, as the hackathon continued, we slowly managed to develop a good workflow where the inexperienced members worked on UI/UX and ideating while the experienced members worked more on development.

A notable challenge was the use of WebRTC to create a seamless video call experience. Doing the basics, where you copy and paste one user id to call the other, was simple enough. The true challenge was circumventing this inconvenience, which took a while to figure out.

Another obstacle was global state management, since we chose to use Redux instead of useReducer + createContext for a change. But we figured that out as well.

Hosting was also quite the challenge, for the smallest reasons possible. CORS was acting funny for a while, for example. We managed to figure it out by the end, though!

Accomplishments that we're proud of

We’re proud of creating a full-stack application that consists of many moving parts. The database, client, server… it requires a certain amount of thought to get everything working in such a short amount of time, if I can say so myself.

Of course, getting WebRTC to work was cool, too.

What we learned

Developing PeerSphere has been a profound learning experience for our team. We delved into the complexities of building a scalable web application that handles real-time video communications—a critical component of our service. We learned to integrate various APIs and technologies to facilitate interactive features like live chat and video calls. Additionally, the project sharpened our skills in user interface design, ensuring that the platform is user-friendly and accessible to students with varying levels of tech proficiency. On a broader scale, we gained insights into the logistical and ethical considerations of creating a platform that handles sensitive user data, emphasizing the importance of privacy and security in educational technologies.

Additionally, we gained valuable insights into the power of peer-to-peer learning and the importance of creating inclusive educational spaces. This experience has reinforced our belief in the transformative potential of technology to enhance education and foster meaningful connections among learners.

What's next for PeerSphere

Looking ahead, we have ambitious plans to expand and enhance PeerSphere's capabilities. One immediate goal is to introduce AI-driven features, such as a recommendation system that matches students with tutors based on learning preferences and academic strengths. We also plan to partner with universities and educational institutions to seamlessly integrate PeerSphere into their existing learning management systems, making it easier for students to access peer support. Long-term, we envision PeerSphere evolving into a comprehensive educational ecosystem that not only supports academic tutoring but also facilitates career mentoring and professional development. By continuously innovating and adapting to the evolving needs of learners, we strive to make PeerSphere the go-to platform for peer-to-peer learning, empowering students to unlock their full potential and succeed academically.
","https://github.com/Jcho114/Bitcamp2024Client, https://github.com/Jcho114/Bitcamp2024Server, https://www.canva.com/design/DAGDBi2a9K4/5AaY_29KUVQw_kX-HLhaIw/edit?utm_content=DAGDBi2a9K4&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton",https://youtu.be/ectwgvz4aFc,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp","react, typescript, vite, express.js, postgresql, drizzle, webrtc, websocket, render, joi, socket.io",Joseph,Cho,joseph.cho20@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"React, Vite, Express, TypeScript, Drizzle, React Query, PostgreSQL, JWT, WebSocket, SocketIO, WebRTC","University of Maryland, College Park",,University of Maryland - College Park,3,Aadit,Nilay,aadit@terpmail.umd.edu
StructSure,https://bitcamp2024.devpost.com/submissions/507730-structsure,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 20:16,"Inspiration

The collapse of the Francis Scott Key Bridge struck a chord with us, highlighting the importance for efficient analysis tools in disaster responses. It inspired us to leverage the hackathon platform to contribute effectively to the bridge's repair efforts, aiming to assist in rapid recovery and safety.

What it does

StructSure is designed to analyze images of bridges, to identify zones of critical damage and zones of least critical damage.

How we built it

We developed ""StructSure"" using a stack of current technologies and services. The core functionalities are powered by Microsoft Azure, particularly Azure Blob Storage for managing image data and Azure Custom Vision for analyzing and assessing damage through AI-driven image recognition. The application is built on Next.js and React, leveraging TypeScript for robust backend operations managed via Node.js. For the frontend, TailwindCSS ensures a responsive and intuitive UI. The entire application is hosted and deployed through Vercel, offering a seamless, scalable cloud solution.

Challenges we ran into

Training the AI model with Azure Custom Vision and integrating the Custom Vision into our front were the 2 most challenging parts of the project.

Accomplishments that we're proud of

Despite being newcomers to AI and ML, we successfully created a functional web-app capable of performing image analysis to aid in disaster-recovery.

What we learned

This project was a profound learning experience. We got to understand how machine learning training works with images and learning new technologies in a full-stack setting to help apply our solution to a real-world situation. 

What's next for StructSure

We plan to add more features to the Web App to give helpful insights for construction workers in safely clearing collapsed bridges. Additionally, we'd like to feed the model more data to better survey areas to warn construction workers.
",https://github.com/6rm6n/BItcamp24,,"Best Bitcamp Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best use of AI/ML Innovation for the Francis Scott Key Bridge Recovery Efforts - Cloudforce","javascript, react, azure, next.js, node.js, vercel",Arman,Mahjoor,amahjoor@gmu.edu,,Best Machine Learning Track Hack - Bitcamp,Yes,Microsoft Azure - it was awesome playing with the free Student Plan.,George Mason University,ArciTech.design,George Mason University,1,Joshua,Cancio,jd.cancio1@gmail.com
FinHack,https://bitcamp2024.devpost.com/submissions/507732-finhack,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 20:19,"Inspiration

The capital one paper that was handed out from the sponsor stands

What it does

Gives you the definition of the word button that is pressed

How we built it

Eclipse IDE then into replit

Challenges we ran into

Changing the font and alignment of the definitions which we still wasnt able to figure out

Accomplishments that we're proud of

Having the app working with the buttons and the display area

What's next for FinHack

A cleaner version where we have a menu screen, and the layout is more polished and maybe even animations for buttons and the definitions when they show up
",https://replit.com/@lycanrocks1/Bitcamp,https://youtu.be/OYPEJcMrojw,Best Financial Hack - Capital One,java,Alex,Yeh,lycanrocks1@gmail.com,,Best App Dev Track Hack - Bitcamp,No,"It was amazing to see the new people and friends, also i was able to learn and tap into a new language while working on this project which served as a learning experience and challenge",Baltimore Polytechnic Institute,N/A,"baltimore poly tech, University of Maryland - College Park",3,Eva,Jiang,evajiang05@gmail.com
StudyRooms,https://bitcamp2024.devpost.com/submissions/507736-studyrooms,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 20:21,"Inspiration

As students we understand the importance of working with others when it comes to studying and working. However, we have found that the resources to do so online are lacking, and those that exist can be improved upon. Our goal when creating StudyRooms was to provide a user-friendly chat room where individuals can work collaboratively with their peers and strangers to solve their academic challenges.

What it does

StudyRooms is more than just a chat room—it contains added features to enhance the studying experience of all the participants. StudyRooms features two pages: a homepage and a page for the chat room.

The first thing a user will come across is the homepage. The user will be prompted to enter their username, which will be what shows up in the chat room. The user will also be given the choice to create their own room, or to join an existing room by entering a uniquely generated keycode.

The base of the chatting page is the message board. This message board displays all messages sent as well as the username and a timestamp. An interactive whiteboard allows the users to draw out their ideas, while others in the room will see live updates on the drawing board. The whiteboard is able to be shown and hidden to manage the page’s space at the user’s discretion. Additionally, we incorporated a timer which counts downwards and helps users manage their time better. The timer is set with an initial setting and counts down, but can be stopped or started at any time.

All of these features come together to create a simple and responsive user experience.

How we built it

We used HTML and CSS to create and format the UI on the frontend, , as well as javascript to make the timer and whiteboard function. Python was mainly used for the backend code, in addition to some javascript. Flask was used as the framework and Socketio was used to make real time updates occur on the website and between the clients and server.

Challenges we ran into

One challenge we ran into was in determining what framework to use. While we initially planned to use React and Javascript to build *StudyRooms, we ran into many difficulties as it was our first time using it. As a result, we switched to using Flask and Python, which proved easier to do and allowed us to make the project that fit our vision.
Another challenge we face was in connecting different web flasks with sockets. 
Additionally, we found difficulties merging our code from Visual Studio Code to Github, as it merged at times when we didn't want it to, setting us far back in our process

Accomplishments that we're proud of

An accomplishment we are very proud of is getting the drawing board to work. When we first conceived the idea of this board we already knew the whiteboard would be one of the most difficult aspects to code. The main challenge lied in using Socketio to allow users to see what is being drawn in real time. However, once we were able to get it to work we were very proud of ourselves.

What we learned

We learned how to make a web page that can show edits and change in real time. Using Flask and Socketio were new concepts for us, and only through learning how to use them were we able to successfully create StudyRooms. This was our first time participating in a hackathon, and the process of connecting our frontend code to our backend code was a new experience. We were able to use Socket and Flask to support our backend which proved to be very difficult.

What's next for StudyRooms

The next steps for StudyRooms are to fine tune it and expand its reach. Since it was entirely created over the 36 hours of Bitcamp, there are many things that we would have liked to include in StudyRooms that we didn’t have the time for. Making StudyRooms into the best version that it can be, and then expanding its capacity and potential for users will be the next steps in helping people work better together online. Another addition we can make is implementing AI technology as a chat assistant for all users of the room.
",https://github.com/alanw10/StudyRooms,https://youtu.be/IM4oESimFwk,Best First Time Hack - Bitcamp,"python, socket.io, flask, css, html",chunk2,Mehta,lmml8335@gmail.com,,Best App Dev Track Hack - Bitcamp,No,I did not interact with any of the technology at this hackathon,Winston Churhcill High School,,Winston Churchill High School,2,very good player,Li,jiajakeli2123@gmail.com
Untitled,,Draft,Pending,Manage team,4/20/2024 20:26,,,,,,Sahit,Kadthala,skadthala@yahoo.com,,,,,,,,0,,,
MediCheck AI,https://bitcamp2024.devpost.com/submissions/507740-medicheck-ai,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 20:27,"Inspiration

The inspiration for MediCheck AI stems from a deep-seated concern for healthcare disparities and a firm belief in the power of technology to address them. In many parts of the world, access to quality healthcare is not readily available, particularly in underserved and remote areas. Patients in these regions often face significant challenges in obtaining timely medical attention and diagnoses due to various factors such as limited healthcare infrastructure, shortage of medical professionals, and lack of internet access.

The idea was born from a desire to leverage advancements in artificial intelligence and web technologies to provide preliminary medical assessments and guidance, even in the most remote and resource-constrained environments.

The MedLLaMa2 model represents the culmination of existing technology with immense potential to revolutionize healthcare. As an AI-powered diagnostic tool, MedLLaMa2 leverages state-of-the-art machine-learning techniques to analyze medical data and provide preliminary diagnoses.

What it does

Our project is called MediCheck AI. MediCheck AI consists of a few parts: the front-end and the AI-powered back-end.

The front end of MediCheck AI is designed to be user-friendly and visually appealing, providing a seamless experience for both healthcare professionals and patients. Users can easily input surface-level patient information, symptoms, medical history, and lifestyle factors through the website using intuitive forms and interfaces.

Upon submitting the necessary information, the data is securely transmitted to the AI-powered backend for analysis. The backend of MediCheck AI is where the magic happens. It comprises an advanced AI model named MedLLaMa2, trained on a vast dataset of medical examination questions and corresponding diagnoses.

One of the critical features of MediCheck AI is its ability to run locally on affordable embedded systems, such as the Raspberry Pi 5. This local AI implementation using the MedLLaMa2 model ensures accessibility and reliability even in areas with limited internet connectivity, making it particularly valuable for underserved communities.

How we built it

For the front-end of our website, we utilized HTML to create a user-friendly interface where patients can input information about their symptoms, medical history, and lifestyle habits. We incorporated radio buttons and text fields, allowing users to select options or type in relevant details. Additionally, CSS was employed to enhance the visual appeal and layout of the website, ensuring a seamless and engaging user experience.

On the backend, we employed Flask, a Python module for building simple website interactions, to collect the information entered by the patient on the website. Once the patient submits their information and Flask has retrieved it, the Ollama API passes the info to MedLLaMa2, and the language model processes the data and generates an input using the extracted information.

MedLLaMa2 is an advanced language model (forked from Meta’s LLaMa2 model) trained on a vast dataset of medical queries and corresponding diagnoses. It utilizes state-of-the-art natural language processing techniques to analyze the input data and generate an appropriate diagnosis based on the parameters provided. Once MedLLaMa2 processes the input, it responds with the suggested diagnosis.

Challenges we ran into

Version Control - We were working on slightly different versions of the same codebase at several points, making coordinating more challenging. 

Setting up the code environment – When we were deciding what tools to use, we tried Django instead of Flask. We ran into many issues with project configuration. We ended up using Flask for this reason.

Accomplishments that we're proud of

Since the AI model is self-hosted, we were able to implement an application that requires no internet connection. We created an attractive-looking user interface implementing features such as a dark mode and mandatory fields for users to input data. 

What we learned

When designing the application, we were able to familiarize ourselves with web development languages such as HTML, JavaScript, and CSS and develop our knowledge even further. We also learned how to use Flask to create a function that formats the patient’s information into a prompt and sends it to the LLM. 

What's next for MediCheck AI

We could release updates to our application in the future. As of right now, our application gives a diagnosis for the patient. Based on the diagnosis, we could incorporate a feature to recommend the patient to different healthcare professionals. For example, the AI could recommend potential dermatologists if a client is concerned about his dry scalp. When we implement this feature, we need to consider new details such as location and healthcare professional rating to recommend the best possible doctor for the patient’s needs.
",https://github.com/mayitreya/medicheck_ai,https://youtu.be/fgg9zzf1R_A,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp","python, html, css, javascript, github, vscode, ollama",Rahul,Ramasubramanian,rahul24@terpmail.umd.edu,,Best Machine Learning Track Hack - Bitcamp,No,"We used GitHub after struggling to coordinate through other means, which made it easier to manage different versions of the codebase. We also used Flask (a Python library) to write a function that formats the patients' information and feeds it to the LLM. The LLM itself is called MedLLaMa2, which is a fork of Meta's open-source LLaMa2 model. MedLLaMa2 itself is specifically trained on over 10,000 medical examination questions, which is perfect for our case.",University of Maryland College Park,,University of Maryland - College Park,3,Dave,Jose,davedeepujose@gmail.com
LivePresence,https://bitcamp2024.devpost.com/submissions/507741-livepresence,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 20:28,"Inspiration

At a previous hackathon, one of our friends noticed that it was extremely common to see projects involving the tracking of crime in neighborhoods, but so far, none of us have seen a project that helps people after an intrusion has occurred. This is where LivePresence comes in. Instead of providing data on what’s surrounding a home, it provides information straight to the user on what is happening within their home. Through a modular ensemble of sensors, LivePresence is able to provide information straight to a homeowner regarding how their home is currently, even in benign conditions, but also after someone may have entered. Furthermore, the user is encouraged to directly interact with the sensors using the chatbot feature implemented.
Additionally, a secondary feature of this project is that it can help homeowners improve home power efficiency by informing the homeowner of times when there is little to no activity in the home, allowing them to turn off HVAC or other high-energy usage appliances. 

What it does

LivePresence is a system that collects, displays, and analyzes data from various sensors, including CO2, temperature, motion, humidity, and Volatile Organic Compounds (VOCs). This data is passed into a hybrid quantum-classical machine learning model to determine the presence in the area. This quantum machine learning model gives us the advantage of being able to represent more states with fewer classical model parameters, saving memory and computational costs. The information from the sensors, model output, as well as an OpenAI prompt, are displayed to a web app presented to the user. The prompt allows access to a GPT 3.5 model powered by the OpenAI API, with a premade prompt to give the model context as to the information it should be describing.

How we built it

The core of the input is an ESP32-WROVER microcontroller, which ran an MQTT publisher to a Mosquitto server running on a smartphone. Data from this server is then pulled by a Flask web app running on a laptop, which updates the UI and runs the assorted data analysis algorithms, including a hybrid quantum-classical deep learning algorithm to determine occupancy from the sensor data. This UI was built using typescript shows the sensor data, and deep learning model outputs, and includes a GPT-3.5 chatbot interface with a prompt to give outputs as if it were a home security consultant. This is powered by the OpenAI API, which is also running as a backend Flask server. The hybrid quantum-classical deep learning algorithm was written using PyTorch and Qiskit, with a PyTorch neural network for the classical part and a Qiskit quantum circuit at the end for the addition of quantum algorithms into the network.

Challenges we ran into

One of the hardest parts about this project was getting the front end to reliably work, as it would occasionally cause issues with the backend and the MQTT data. We also had issues with the OpenAI API, as with the initial integration of the API we kept getting 500 errors. This ended up being due to some issues with formatting the output of the API request, which we eventually solved. The hybrid quantum deep learning algorithm also caused some trouble, as it was difficult to train due to inconsistencies in GPU support. Classical models are easily trainable on GPUs, and modern frameworks such as Qiskit also include GPU backends, but they use different APIs and drivers for each of them. This made it difficult to train on GPU, as each switch between PyTorch and Qiskit necessitated moving the data back to the CPU, passing it onto the other framework, and then having that framework move it to the GPU again. This communication overhead was so severe that it ended up being more than twice as fast just training on CPU, which is what we ended up doing. This still took a long time to train, with a training time of around 5 hours.

Accomplishments that we're proud of

There are many accomplishments in this project that we’re part of, one of which is dividing and conquering this project into smaller, more easily solvable subproblems. Each subproblem is then solved recursively. We have also successfully implemented various sensors including CO2, temperature, motion, VOCs into our system. Additionally, we drifted off from traditional machine learning methods with a hybrid quantum deep learning algorithm with PyTorch and Qiskit. We also managed to create a chatbot interface amidst obstacles in the front end. 

What we learned

We learned a lot about modern technologies involving quantum machine learning algorithms, as well as the combination of systems with AI, embedded programming, and web programming. This system involves a complex set of services that must all work together to function properly, including an MQTT broker running on a phone with the Mosquitto service, an ESP32 device to read and forward data from the sensors, an MQTT client on a laptop, the web app itself (including its frontend and backend components), a machine learning backend, and an OpenAI API backend. Orchestrating all of these services can cause a lot of integration issues, and we learned a lot about the integration of multiple components into a single service.

What's next?

Firstly, it is definitely expected that we will package the hardware side of things into a commercially viable product. This project will have more capabilities, including the ability to turn off HVAC, lights, and other climate control services when presence is not detected, in order to save power.
Then we would like to hopefully ship our project into a commercial environment from which, we can see real improvements in time to respond to potential home intrusions and more.

Additional credits and references

Wang, Qi et al. “Fear and Logging in the Internet of Things.” Network and Distributed System Security Symposium (2018).

Andrew C. Su - University of North Carolina at Chapel Hill (Helped with sourcing initial machine learning model)
Colton Fox - Virginia Tech (Front end assistance)
Dexi Lin - Georgia Institute of Technology (Hardware assistance)
",https://github.com/Fredswqa190/BitCamp2024Submission-LivePresence,," Best Hardware Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH","python, typescript, qiskit, pytorch, openai",deleted,deleted,deleted+8857530@devpost.com,,Best Advanced Quantum Track Hack,Yes,"We learned significantly more than we ever expected to in this short 36-hour stay. Between building our team up from the ground, to troubleshooting ESP32 errors, to figuring out how flask works, we've been through it all.","Princeton University, University of Maryland",livepresence.co - Highly applicable to our project. We created an AI backed home intrusion detection algorithm using Quantum Neural Networks..,"Rockville High School, University of Maryland - College Park, new hyde park memorial high school",3,Stephy,,stephyzhang2006@gmail.com
Ransomify,https://bitcamp2024.devpost.com/submissions/507745-ransomify,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 20:31,"Inspiration

A few weeks ago I thought it would be cool to splice together short clips of movies and TV shows together to kind of ""spell out"" one of my favorite songs of all time, Self Control by Frank Ocean. I thought it would be a medium that no one had really done extensively to this point. The project reminded me of writing I had seen before where people cut words and letters out of magazines, which I discovered was called ransom-note-style writing. So naturally, the name had to do something with it, hence Ransomify.

What it does

Ransomify takes a string as input and gives a video as output. Ransomify breaks the input into blocks of up to 4 words and searches for scenes from movies and TV with the phrase. It then saves those clips and splices them all together to get your message back to you.

How I built it

Ransomify was built in Python with a number of libraries and APIs. The most important are Selenium (a web driver, used to gather movie clips), Whisper (OpenAI's Automatic Speech Recognition (ASR) neural net, used to transcribe scenes), and ffmpeg (through the moviepy library).

Challenges I ran into

A big challenge was transcribing the movie scenes I was downloading. I had heard about Whisper from my friend who was working on a video editing-related project of his own months ago, and he had high praise for its .srt file generation. However, while Whisper is great for longer files, the clips I was dealing with were short and the captions required high precision to splice specific words and phrases. My research led me to another Python package named ""whisper-timestamped"", which builds upon whisper to accurately predict word-level timestamps using a technique called ""Dynamic Time Warping"". My woes didn't end there though. As good as Whisper is, it still makes mistakes in difficult situations, which would lead to errors and crashes. I eventually came up with the solution of gathering multiple video links containing the same phrase. If one clip is too difficult for the network to decipher, it moves on to the next one. When all else fails or a clip is not found containing a phrase, a new search is done on the phrase - the last word.

Accomplishments that I'm proud of

Achieving something that somewhat consistently produces something listenable.

What we learned

Strings that I strengthened this weekend include web scraping/crawling (I originally wanted to use the beautifulsoup library but the mp4 files I wanted were not static), problem-solving, Python, and file manipulation.

What's next for Ransomify

First of all, I want to improve the performance of Ransomify. As it is right now, it takes upwards of 30 minutes to generate a video that is only a few seconds long. Next, I would make it more robust because it is vulnerable to crashes when it encounters unexpected things. I'd also love to make it prettier, maybe even make it into a web app as some kind of novel thing people find and have fun with.

Note

The black screens are intentional. They serve to space apart the clips a little to make it easier to understand.
",https://github.com/justinbchai/RansomNoteVideo,https://youtu.be/S6LEx3dAr1c,Best First Time Hack - Bitcamp,"selenium, whisper, ffmpeg, playphrase.me",Justin,Chai,justinbchai@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,"I'm not very experienced at all with development in general, so my program was pretty bare-bones.",University of Maryland - College Park,,University of Maryland - College Park,0,,,
Untitled,,Draft,Pending,Manage team,4/20/2024 20:32,,,,,,Mark,Schweitzer,markdanielschweitzer@gmail.com,,,,,,,,0,,,
California Wildfires and Housing,https://bitcamp2024.devpost.com/submissions/507759-california-wildfires-and-housing,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 20:59,"Inspiration

Both of us grew up in very different parts of the world, but have devastatingly seen the impact of climate change on our surroundings, community, and environment. Since one of us is from the west coast, we wanted to explore a topic that is very impactful to the area: wildfires. Wildfires impact many factors, including housing. Taking inspiration from Fannie Mae's challenge, we wanted to explore how Californian wildfires impact the mortgage and housing situation in the state.

What it does

Using various libraries in Python and R, our team analyzed environmental and financial data to provide insight into the correlation between mortgage values and wildfires in California.  We wanted to make this information clear, so we are presenting it in a slideshow format.

How we built it

In R, we used libraries like tidyverse, terra, tigris, etc. to plot geospatial, time, and quantitative data. 

Challenges we ran into

We faced challenges finding data since this is a niche topic for a certain state. However, we were able to combine various sources to provide insightful correlations. 

Accomplishments that we're proud of

We are proud of the way we worked together and discussed potential ideas. We also are proud that we chose to explore various types of data. 

What we learned

We learned a lot about the various libraries used for data visualization. This project has made us more excited to explore how geospatial data can be combined with different forms of quantitative data. 

What's next for California Wildfires and Housing

We want to explore how the impacts of wildfires on housing vary for different parts of California. Are there certain counties that recover faster than others? How do financial factors play a roll in this?
",https://docs.google.com/presentation/d/1s2s7XUOZqa8QgZbTyISPRom5uj6CK6sPbbuXu6znr6Y/edit?usp=sharing,https://youtu.be/hOELcD_h7Yo?si=cIQ227JseipAre8_,"Best Social Good Hack - Bitcamp, Best Sustainability Hack - Bitcamp, Best Use of APIs related to Housing/Climate Change - Fannie Mae","python, r, api",sgubba1,Gubba,sgubba15@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,The experience was great. We got support from different mentors and learned a lot.,"University of Maryland, College Park",,University of Maryland - College Park,1,manasa,vinod kumar,manasavinodkumar@gmail.com
T,https://bitcamp2024.devpost.com/submissions/507772-t,Submitted (Hidden),Pending,Submit,4/20/2024 21:12,"Inspiration

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Vistra
",,https://youtube.com/shorts/wjHxAu6g3js?feature=share,,three.js,Yonatan,Tussa,ytussa@montgomerycollege.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,NA,NA,,Montgomery College,1,Doe,John,yonatant12346@gmail.com
Remorize,https://bitcamp2024.devpost.com/submissions/507774-remorize,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 21:13,"Inspiration

Having to note down and memorize everything in your day is a tedious task and creates a chance for miscommunication and misunderstanding, thus came the utility for remorize where we handle all your daily audio data to simplify your day.

What it does

Remorize is an end-to-end platform that uses a mini mic to track your daily audio activity to automate and simplify your life in many ways:

1. Hourly notes / action items list

Remorize creates an hourly dashboard for your audio as notes and action items to complete throughout your day.

2. Google Calendar integration

Remorize automatically adds any discussed event to your Google Calendar to keep you in track of what's going on.

3. Email drafts

Remorize prepares an email draft for you based on the audio context to copy and modify as per your requirements.

4. Pinecone Vector DB

Remorize stores all your audio memories in a vector database and then performs context retrieval to feed the context to your mobile as and when you're speaking in a previously relevant conversation.

How I built it


Mobile Frontend : Android Studio, Java and Speech Recognition API
Server : Python, GPT-4, Flask, APScheduler, ngrok
Web Frontend : Next.js, React.js, TailwindCSS, ReactMarkdown
Database : SQLite, Pinecone, DB Browser - sqlite


Challenges I ran into


Making sure the LLM does not hallucinate by using precise prompt engineering
Setting up the mini microphone as an audio device


Accomplishments that I'm proud of


Setting up the entire audio-to-text pipeline via the user's phone as a gateway to the server
Making a seamless backend infrastructure to create notes, action items and setting up calendar events
Making all of these features in <36 hours


What I learned


API and microservices architecture
Database management using sqlite


What's next for Remorize


Enhanced Speech Recognition : We aim to improve the accuracy and responsiveness of the speech recognition system by integrating more advanced AI models. This will help in better understanding diverse accents and dialects.
Offline Capabilities : We plan to develop offline functionalities that will allow users to access features of Remorize without an internet connection, making it more versatile in various settings.

",https://github.com/MysticVapour/remorize-hack,,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH","android-studio, java, speechrecognition, python, gpt, flask, ngrok, nextjs, react, tailwind, reactmarkdown, sqlite",Advay,Choudhury,adgoch11@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"This weekend at the hackathon, I had the opportunity to work with a range of technologies, including Android Studio, Flask, SQLite, and GPT-4, each integral to the development of our project. 
Android Studio offered a robust platform for mobile app development, although the setup can be quite resource-intensive which might challenge newer devices. 
Flask was great for quickly setting up our backend server, providing simplicity and flexibility, though it sometimes lacks the out-of-the-box functionalities that larger frameworks offer. 
SQLite served well for our database needs, offering lightweight and easy setup; however, managing complex queries and scalability can be tricky. 
Working with GPT-4 was enlightening, particularly for generating responsive text from audio; nonetheless, prompt engineering to prevent hallucination required careful handling and deeper understanding of model capabilities. 
Overall, each technology contributed significantly to our project, enhancing both functionality and my personal skill set.",University of Maryland - College Park,remorize.us,University of Maryland - College Park,0,,,
Lockness AI,https://bitcamp2024.devpost.com/submissions/507783-lockness-ai,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 21:25,"Inspiration

The Chronic Condition Warehouse (CCW) Virtual Research Data Center (VRDC) is the US government's central collection of ALL public healthcare records. Scientists, researchers, and policy makers regularly use this data for studies and policy recommendations. The VRDC is HIGHLY secure and restrictive (as it should be), and is comprised of thousands of tables (each with up to hundreds of columns). The problem is the documentation for the data structure in VRDC CCW is highly technical and dense, filled with cryptic codes and abbreviations, dispersed among hundreds of pages of PDFs. Even a simple query can cost several thousand dollars, easily ballooning a comprehensive study to the 6-figure range. This can be remedied by the power of generative AI, hosted in a private, secure environment.

What it does

We made a (self-hostable) chat application where VRDC researchers can generate complex queries based on research questions in seconds. By automating the process of parsing hundreds of pages of documentation, we improve the efficiency of researchers dramatically. Unlike general code-generation solutions, we take the approach that LLMs are here to automate mundane tasks, but intelligence ultimately lies in the hands of the user. This empowers the user to provide context and necessary corrections to the LLM along the way, eliminating hallucinations and other common errors produced by LLMs. Here's how it works: First, the user inputs a research question. Next, the LLM asks the user for any clarifications/domain expertise necessary to properly build the query. Once sufficient context is supplied, the app provides a full plain-English outline of the query generation plan. Once the user is satisfied with the outline, the LLM generates the query step-by-step, following the outline, asking for user feedback along the way. Finally, the query is concatenated and aggregated for a final result. At every step of the way in the iterative development, the user has the power to clarify and fix any errors that the LLM might introduce. The end result is a fully-functional query and hours saved for the researcher.

How we built it

After unanimously agreeing on the logical flow and design for the application, we split into two sub-teams. Ryan and Michael worked on data aggregation for the documentation, as well as prompt engineering and chaining to make the LLM pipeline. UV and Jason created on the frontend and backend architecture for the website. Since we want to make this application deployable to offline/restricted environments, we built our LLM solutions using Cohere's self-hostable Command-R-Plus model. We also used Google Cloud App Engine to host our Flask backend, and Vercel to statically host our React + Chakra UI frontend.

Challenges we ran into

LLMs are stubborn and getting them to cooperate and obey every command can be difficult. This is especially true when trying to ask for formatted output (ie: JSON). Setting up the architecture to enable chat-streaming was a challenge, as well as state-management for different message types. Finally, connecting the LLM pipeline to the frontend was a bit difficult because of diverging features that were and weren't implemented. We figured everything out in the end!

Accomplishments that we're proud of

The UI is very intuitive, professional, and elegant. Furthermore, the core LLM pipeline is impressively robust and accurate. We are confident that we can scale this solution to production, and if used by researchers, can save organizations and the American tax-payer millions of dollars collectively.

What we learned

We learned a lot about LLMs, how to prompt them, how to work with open-sourced LLMs, how to run them in a real app in real time. We also learned a lot about US healthcare infrastructure and standard data codes and formats, especially related to VRDC.

What's next for Lockness AI

We plan to add documentation ingress, to fully automate the process of teaching Lockness AI about the user's data system. We also plan to enhance our LLM pipeline through fine-tuning, using retrieval augmented generation (RAG), using additional specialist models, function calling, and adding the support for web search (for environments that can support external calls). Additionally, we plan to create a simple setup process for research agencies interested in self-hosting our product.
",https://locknessai.com,https://www.youtube.com/watch?v=K-0U_DKezDM,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group","python, react.js, flask, cohere, groq, llama-3, chakra-ui, google-cloud, vercel, pandas",Yuvan,Sundrani,yuvan.sundrani@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"Our tech stack utilized React.js, Python/Flask, Git, Pandas, and open-source AI models like llama-3 and Groq chat. The final product integrated Cohere AI's models.","University Of Maryland, College Park",locknessai.com,University of Maryland - College Park,3,jsteinberg7,,j.steinberg702@gmail.com
AI-Driven Defense Contract Insights,https://bitcamp2024.devpost.com/submissions/507786-ai-driven-defense-contract-insights,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 21:29,"Inspiration

The Department of Defense is one of the biggest investors in the world, so we wanted to extract valuable information from their contracts so that the DoD and the contractors make informed decisions and promote transparency among the people. 

What it does

The project uses generative AI to extract relevant information from the Department of Defense contracts.

How we built it


Web-scraped the contracts present on the https://www.defense.gov/News/Contracts website using Python's BeautifulSoup library for HTML parsing.
Extracted these contracts into a JSON format using the Gemini API. 
Tabulated the JSON string into a CSV file.
Classified the type of work in the contract.
Visualized and highlighted insights such as the locations where most Department of Defense (DoD) projects are taking place, the mean cost per contracting company, and the domains to which the projects belong.


Challenges we ran into

We ran into a hurdle while testing the accuracy of data extracted from contracts as there are very few tools or methods. We came up with the approach of vectorizing the data to create a RAG Stack but we faced challenges like creating chunks. Subsequently, we came up with the idea of testing by comparing the insights generated using the extracted data with Domain Knowledge.

Accomplishments that we're proud of


Integration of generative AI in our project to tabulate defense contracts.
Classification of contracts into different fields (Maintenance, Manufacturing) based on their purpose. 


What we learned


The use and integration of OpenAI API and Gemini AI.
Extracting data through websites.
How Domain Knowledge can be used to test and validate data.
How to visualize data using Tableau.


What's next for AI-Driven Defense Contract Insights

To create an inverted index search engine and implement a generative AI chat model to search through it effectively. 
",https://github.com/anjaneyak10/Hackathon.git,,Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group,"python, tableau, excel, openai, geminiai, google.generativeai",Jayesh Jairaj,Pamnani,jpamnani@umd.edu,,Best Machine Learning Track Hack - Bitcamp,Yes,"1) It was great working with Gemini API to get prompt responses.
2) We tried to implement RAG Stack but it was difficult to create chunks so we shifted our approach.",University of Maryland - College Park,,University of Maryland - College Park,2,Anjaneya Sanjay,Ketkar,aketkar@umd.edu
Message in a Bottle,https://bitcamp2024.devpost.com/submissions/507793-message-in-a-bottle,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 21:38,"Inspiration

We were inspired by the concepts of messages in a bottle being washed on on shore and found by random strangers. This concept led us to design the idea of a user collecting random messages while walking, and being able to create their own messages to send out.

What it does

While the user is walking, they can click on any bottle within range (indicated by the blue circle on the map) to open it and read it. This encourages the user to go on a journey and collect as many messages as possible. When the user is done reading a message, they can choose to create their own message to send out. Once the new message is created, the app waits for a random amount of time, then drops the bottle at the user's current location, ensuring that someone new will read the message and continue the journey.

How we built it

We used Flutter to create the app itself and design the UI/UX. We used Firebase to handle authenticating users and storing data about the bottles. We used Android Studio to emulate an Android phone for testing the app.

Challenges we ran into

One primary challenge was learning Flutter, since most of us did not have any experience with it. We were able to use the documentation in order to implement functions such as separate log-in and map pages, embedding an interactive map, and adding bottles that opened when tapped. Another challenge was using Firebase, since we also did not have much experience working with it. By reading the documentation for Firebase and Flutterfire (combines Flutter and Firebase), we created a secure authentication system and were able to efficiently store bottles in the cloud.

Accomplishments that we're proud of

We are proud of learning Flutter in a limited amount of time and developing an app with embedded mapping and authentication capabilities. We are also proud of learning Firebase in order to implement secure databases and datastores. We are also proud of our UI/UX design, which is aesthetically pleasing and makes it simple for users to operate the app.

What we learned

We learned about Flutter, Firebase, UI/UX design, and version control.

What's next for Message in a Bottle

In the future, we plan to send push notifications when a user is close to a bottle, so that they can leave the app running in the background.
",https://github.com/backedman/MessageInABottle/tree/main/message_in_a_bottle,,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","flutter, firebase, android-studio, node.js",Jay,Rana,jay.rana1@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"Flutter, Firebase, npm, git",University of Maryland College Park,,University of Maryland - College Park,3,Alex,Van,alextvann@gmail.com
Untitled,,Draft,Pending,Manage team,4/20/2024 21:38,,,,,,Lakshya,Sajal Kumar,lakshyaa@terpmail.umd.edu,,,,,,,University of Maryland - College Park,0,,,
Untitled,,Draft,Pending,Manage team,4/20/2024 21:44,,,,,,Manasvi,Hosahalli,mh110704@terpmail.umd.edu,,,,,,,University of Maryland - College Park,0,,,
ResQVision,https://bitcamp2024.devpost.com/submissions/507799-resqvision,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 21:47,"Inspiration

Our inspiration came from witnessing the challenges faced during natural disasters. We saw an opportunity to leverage AI to improve search and rescue operations and streamline debris detection, aiming to enhance disaster response efforts and aid in community recovery. We first got inspired by the fact that drones are the main source of data which we can get as input, i.e. a birds eye view of the disaster.

What it does


Search&Rescue: 
Helps detecting and marking people in real time video to let authorities know where survivors are after a disaster. This will help in effective rescue operations.
Debris Quantifier:
Analyses video footage of the structure after the disaster and tells us how much of each material is present in the scattered debris. It also generates a heatmap of the debris on google maps. This will help in recycling/disposing the debris effectively, speeding up the rebuilding process.


How we built it

We first started building the layout of how to build it. We then worked on a simple frontend with a file upload functionality. Meanwhile we also started working on how to detect people from a birds eye view. We implemented a YOLO object detection model which would help us with this. We displayed the processed video as output.
We then moved on to the debris detector functionality. We integrated google maps API for the front end and we also worked on actually calculating the mass of the debris. We selected frames from the video. We analyse the debris from these frames and then send it to a database (MongoDB). We then map it on the google maps API using a heatmap functionality. We then changed the Search&Rescue functionality for the app to work with real time video footage. 
We also added a functionality which looks at your house and tells you if there is any structural damage or weathering.

Challenges we ran into

We wanted to train our own ML model to detect debris but we couldn't find any dataset online. There was no dataset with a huge number of just debris. We combatted this by using Gemini which turned out to be pretty accurate.

What we learned

State of the art models like YOLO, How to integrate google maps and generate heat maps over it.

What's next for ResQVision

We want to train our own debris detection model and maybe use some sensors which measure stress and strain in buildings and alert authorities the second they sense fluctuations.
",https://github.com/NSP909/cmdfmydebris,,"Best Bitcamp Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Sustainability Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best use of AI/ML Innovation for the Francis Scott Key Bridge Recovery Efforts - Cloudforce, Best Use of APIs related to Housing/Climate Change - Fannie Mae, Best Financial Hack - Capital One","python, html, css, javascript, node.js, flask, react, mongodb",Anuraag,Tripathy,anuraagstudy@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,We used a YOLO ai model to detect objects and in this case we wanted to detect people so that's what we filtered out. We also used WebSockets to feed in realtime video footage. We used MongoDB too.,"University of Maryland, College Park",,University of Maryland - College Park,3,Priyadarshan,Narayanasamy,nspriyadarshan@gmail.com
BuildKey AI,https://bitcamp2024.devpost.com/submissions/507804-buildkey-ai,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 21:58,"Inspiration

After interviewing the police, emergency medical & fire-fight staff personnel at the BitCamp event. The main problem was data access and friction in decision-making. Such fieldOps teams have lot of data that is scattered in their repositories. If I could train a custom GPT with their data, it could help them with answers to queries vs links. Helping teams with efficiency (low search time) and improved decision-making. Thus helping them serve to save lives and property. 

What it does

Fetches/summerizes mission-critical information within seconds. Supports multi-lingual queries. Provide real-time traffic maps all in one place!

How we built it

We have used: LangChain, OpenAI GPT APIs, Azure App service, Astro (UI), Streamlit

Challenges we ran into

Gathering data was a huge pain-point, as there was no dataset available for such a recent event.

Accomplishments that we're proud of

A RAG-based system to answer within context. Renders real-time traffic maps. Supports multilingual languages for natural language based queries.

What we learned

Azure Copilot, Azure AI search.

What's next for BuildKey AI

Handle Images and video to get insights.
","https://github.com/urstrulykkr/BuildKey-AI/tree/main, https://build-key-ai.vercel.app/",,"Best Domain Name from GoDaddy Registry - MLH, Best use of AI/ML Innovation for the Francis Scott Key Bridge Recovery Efforts - Cloudforce, Most Philanthropic Hack - Bloomberg","python, azure, streamlit, github, astro, openai, ai, ml",Kaushik Reddy,Kanumuru,kkaushik@umd.edu,,Best Machine Learning Track Hack - Bitcamp,Yes,Azure AI was really cool!,University of Maryland,BUILDKEYAI.STUDY,University of Maryland - College Park,0,,,
Untitled,,Draft,Pending,Manage team,4/20/2024 22:04,,,,,,Bryan,Gao,brybryboi215@gmail.com,,,,,,,University of Maryland - College Park,0,,,
Miami: HPI vs Annual Rainfall,https://bitcamp2024.devpost.com/submissions/507810-miami-hpi-vs-annual-rainfall,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 22:11,"Inspiration

We recognize that climate change is a huge problem and wanted to see how fluctuations in the rainfall in a city affect the prices for living environments. We chose Miami in particular because of how prone it is to frequent rainfall. 

What it does

Our project is an attempt at understanding if any correlation exists between the annual average rainfall and the Housing Price Index in Miami-Dade County. 

How we built it

We used pandas to classify the variables in the datasets with their ordinal correspondents and to clean the merged dataset. We used R to run an ordinal logistic regression and interpret the results. 

Challenges we ran into

Connecting and merging datasets for annual rainfall and housing price index for a county in Miami. 

Accomplishments that we're proud of

We were able to find common data points and successfully remove any outliers from the datasets we obtained from credible sources online. 

What we learned

We learnt from our results that two factors may be related to each other but they do not necessarily have to be the reason for the occurence of one another. However, this does not mean that the relationship does not truly existed, it just cannot be inferred directly through our methods. 

What's next for Miami: HPI vs Annual Rainfall

We hope to gather more data points and focus more on other climatic conditions that stem from climate change (tornadoes, hurricanes, drought, flood) that affect major cities of the United States. We hope to turn our results into an interactive space for users to predict and understand what their investments in properties in a given region could look like in the future. 
",https://github.com/arshnoor08/HPI-Rainfall_Analysis_Miami-Dade,,,"r, python",Arshnoor,Bhutani,arshnoor@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"We relied on Posit Cloud for most of our analysis in R. This IDE was available to us entirely online i.e. a desktop version was not required to access additional features. However, the collaborative feature on Posit Cloud was lagging which prompted us to export and share the files with each other to work collaboratively.","University of Maryland, College Park",,University of Maryland - College Park,4,Manya,Garg,mgarg@terpmail.umd.edu
UMD Foodies,https://bitcamp2024.devpost.com/submissions/507812-umd-foodies,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 22:12,"Inspiration

One of our team members loves to go to free food events on campus. She sifts through flyers and emails, but has no way to keep track of all the details in one place. She loves sharing free food events with her friends because as upperclassmen, she understands that everyone might be sick of dining hall food or too tired to cook after a long day of class. Another team member is always on the lookout for rare campus eats (especially Tendies) and will do anything to be up-to-date with UMD Dining's menu.

What it does

UMD Foodies provides a way for students to stay updated on all the food events happening on campus. With a user-friendly interface, it aggregates event details like date, time, location, and food offerings. Users can easily browse and add events, enhancing the campus dining experience. With Google Maps integration, users can see where exactly events are occuring and how they can get there.

How we built it

We built UMD Foodies using React Native and Expo for cross-platform compatibility, the Google Maps SDK for the map of campus with pin points of free food locations, and Firebase for real-time data storage. 

Challenges we ran into

Navigating React for the first time presented a steep learning curve, consuming nearly four hours just to set up and troubleshoot issues because of superuser permissions and deprecated content. Transitioning from HTML/CSS meant adapting to React's structure, with tasks taking significantly longer than anticipated. For example, what would take us 10 minutes became 1 hour. We experienced compatibility issues when using libraries that did not support both web and mobile platforms. Integrating Google Maps proved tricky because the location kept defaulting to Google's California HQ! Additionally, we struggled with integrating a database because we wanted to use MongoDB, but that was more complex than anticipated, leading to a pivot towards Firebase. 

Accomplishments that we're proud of

Samar is proud of implementing the map feature, drawing upon skills honed in CMSC436. Sheldon is proud of his breakthrough moment when he managed to change the font after spending way too long on it. Angelyn is proud of when she managed to integrate Firebase after going in circles with MongoDB. Collectively, we are proud to have learned React Native in a short period of time, delivering a product that has the potential to enhance students' experiences.

What we learned

Sheldon learned how to integrate a calendar with events using React, Samar learned how to integrate Google Maps SDK in the context of React, and Angelyn learned how to use Firebase and started to memorize the commands for Git. We all learned how to use React and embraced the perseverance required to overcome initial hurdles. Despite challenges, Sheldon's determination fueled our progress until React setup success.

What's next for UMD Foodies

We want to enrich UMD Foodies with social features, enabling users to add and invite friends to foodie events seamlessly. Additionally, we want to integrate email parsing capabilities to automatically populate the database with events containing terms like ""free food"". These enhancements will further streamline event discovery and social interaction within the app. Finally, we want to implement a way for popular events to stand out more to our users.

Members

Angelyn Pham
Samar Khan
Sheldon Douglas
",https://github.com/sheldoug/umd_foodie_app,,"Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","react-native, firebase, google-maps, javascript, github, git, react, expo.io",Angelyn,Pham,angpham@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"React Native: there was a learning curve associated with it, especially during set up which left us frustrated during the beginning. eventually, we got past the setup stage, and things were moving better
MongoDB: we tried to connect to our app using MongoDB, but we didn't want to dive into Express/Node.js, so after looking around, we found that Firebase was a better choice given our time constraint
Firebase: this database was a lot simpler to set up than MongoDB, and it integrated smoothly with React
Google Maps SDK: it took some time to figure out how to integrate with React, and it seemed to remove the website portion of our project (we wanted it to be cross-platform). 
GitHub/Git: it made sharing this project with each other a lot easier, and it was a good skill to practice","University of Maryland, College Park",,University of Maryland - College Park,2,Sheldon,Douglas,sheldoug19@gmail.com
Conscious Cycles,https://bitcamp2024.devpost.com/submissions/507815-conscious-cycles,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 22:16,"Inspiration

A USCF study showed that ""one in three people learn they’re pregnant past six weeks’ gestation"". That's halfway through the first trimester! This number is disproportionately larger in the population of younger women and women of color. An issue that women who regularly have sex face is understanding the resources available to them and identifying the best time to take a pregnancy test. We wanted to come up with an idea to promote sexual health awareness within these communities. 

We were inspired to make this project because we are passionate about sexual health awareness on campus. As a volunteer for Help Center at UMD, we can understand how difficult it is to get access to the resources that you need to make sure you are safe and aware. 

What it does

Our app is a sexual health guide for women to identify the best time to take a pregnancy test to get the most accurate results. It also provides resources for sexual health services around campus and details different contraceptive methods to use to be safe or prevent pregnancy. 

How we built it

We used Kotlin in Android Studio to build our app. 

Challenges we ran into

We ran into a lot of issues with integrating Google Maps within our app. Learning how to work with the coordinates and fix the camera zoom so that it was in the right place was difficult. We also faced some issues with laying out some of our graphics.
Another issue we faced was research on the different topics we used in our application. We wanted to make sure that the facts we used and the algorithm we made were based on appropriate health sources. 

Accomplishments that we're proud of

We are very proud to get Google Maps up and running as it was very finicky to work with at times. We are also proud of how the app looks in general as we wanted to make sure that the elements of our app were cohesive.  

What we learned

We learned about integrating Google Maps into Android and configuring API keys. We also polished skills with laying out our UI. 

What's next for Conscious Cycles

Next, we would expand out app to include sexual health resources based on a person's current location so that we can reach an audience wider than UMD students.
",https://github.com/ZenSeven-ai/PregancyStatus,,"Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Most Philanthropic Hack - Bloomberg,  Best Razzle Dazzle Hack - Bitcamp","android-studio, kotlin",Hadijat,Oke,hadijat257@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,Through this experience I learned a lot about applying different Google APIs to a project. It was frustrating at times but when it works it makes a powerful tool.,"University of Maryland, College Park",,University of Maryland - College Park,1,azulioiscoolio,Cruz,josedcruz5@gmail.com
Untitled,,Draft,Pending,Manage team,4/20/2024 22:17,,,,,,Cedric,Yeo,pouncetail@gmail.com,,,,,,,University of Maryland - College Park,0,,,
EzStudy,https://bitcamp2024.devpost.com/submissions/507817-ezstudy,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 22:21,"Inspiration

We were inspired by AI generative tools and wanting to find a task that could be completed faster with AI. As we near finals, studying is always a looming threat floating around in the back of our heads. Thus, we wanted to create something that could make studying easier and relieve our stress just a little. 

What it does

Our web application allows the user to drop in a PDF or PowerPoint and then receives an AI output containing a summary of the file.

How we built it

We built it using Reactjs, Flask, Python, AWS, and the ChatGPT API

Challenges we ran into

We ran into website/server problems as well as trying to expand on our project idea. AWS did not want to work for the entire second day, but we got it to work after a lot of coercing. We also had lots of trouble communicating between the frontend and backend, both in testing (because of CORS), and in the final implementation because of issues with proxy passing

Accomplishments that we're proud of

We are very proud of the fact that our website has a real domain and is hosted on the cloud.  We also feel proud that this is a tool that we would actually use. There is real functionality in what we have built, and it can positively impact our lives and others.

What we learned

We learned how to use Github, Git, and Visual Studio code to push and pull files for updating code.  We also learned how to connect the front and backend of a website. We learned how to make some advanced animations with ReactJS, and how to create production web servers. 

What's next for EzStudy

EzStudy can be expanded to accept more file formats and summarize files more effectively. We also want to add functionality for providing questions based off of text, and allowing users to chat with an AI that can answer questions about the text they provided.
",http://ezsum.study,https://youtu.be/zhILWDWGliY,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Digital Forensics Related Hack - Cipher Tech","react, chatgptapi, flask, amazon-web-services, python, javascript, html, css, nginx, gunicorn",Ethan,Everitt,eeverit1@terpmail.umd.edu,,Best Cybersecurity Track Hack - Bitcamp,Yes,"The use of GitHub, Git, and Visual Studio Code to push and pull code back and forth between group members was fairly new to us. It proved to be well worth to use these applications as it saved a lot of time updating new code.",University of Maryland,Ezsum.study,University of Maryland - College Park,1,funnysomething,,adisatheesh4@gmail.com
GDP Scraper,https://bitcamp2024.devpost.com/submissions/507821-gdp-scraper,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 22:36,"Inspiration

I had no clear idea of what to do coming into Bitcamp and I thought that the Bloomberg slack channel had a good idea that I wanted to try to learn how it's done.

What it does

My program I ended up completing scrapes up to date GDP per capita of all countries in the world and calculates stats from it.

How we built it

I built it using spaCY Named Entity Recognition to identify what was a date, country, and GDP. This and urlopen were the two cornerstones of the project.

Challenges we ran into

SpaCY is not the best at recognizing things, as it bases some opinions on capitalization.

Accomplishments that we're proud of

I got a working program.

What we learned

How to scrape information from any webpage.

What's next for GDP Scraper

Fix the Bloomberg one to properly read defense contracts.
",,,Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group,"python, ner, spacy",Nick,Duvall,nickduvall03@gmail.com,,Best Machine Learning Track Hack - Bitcamp,No,"I learned mostly about ML from my project and learned about Quantum computing, reverse engineering, and VR/AR/MR in the workshops that were all cool.",Salisbury University,,Salisbury University,0,,,
Cash Claw,https://bitcamp2024.devpost.com/submissions/507825-cash-claw,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 22:41,"Inspiration

We were talking about ways to just get free and easy money and came up with the idea of credit card referral offers.

What it does

You play a small claw minigame and if you win you will get a link to sign up for a credit card that gives you $100.

How we built it

We built this in react using a sample claw machine game and then used html to create the UI popups and explanations. 

Challenges we ran into

Implementing the crane on the webpage was a big problem since it was difficult to get it to work on the web, and then getting links to work between pages was a challenge as well.

Accomplishments that we're proud of

We are very proud of being able to create this project and coming up with the idea. Finishing our vision in the short time we had was a big accomplishment for us.

What we learned

We learned that people are very adverse to credit cards for whatever reason and do not truly understand the ease of signup and the massive benefits they provide. Periodically signing up for multiple credit cards and having a higher credit limit is better for your credit score.

What's next for Cash Claw

We can expand the offers that show up when you win. We can include more lucrative offers that can give you $200 or offers for signing up and depositing into a checking account. 
",https://guanglinwei.github.io/CashClaw/,,"Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Financial Hack - Capital One","react, css, typescript, html",Andy,Zheng,sonicrules12@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,I enjoyed the wifi availability and power outlet distribution strategy. GitHub made it very easy for us to collaborate with each other and merge our changes together.,University Of Maryland: College Park,,University of Maryland - College Park,3,Vanessa,Li,vqli412@gmail.com
EmotionAI,https://bitcamp2024.devpost.com/submissions/507830-emotionai,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 23:03,"Emotion-AI

Have you ever experienced the frustration that comes with an insensitive, typical emotionless response from platforms like ChatGPT? To solve this, we created an incwedible web-app called EmotionAI, which can detect what emotions you're feeling through analyzing your facial expressions, and responding accordingly!



Our Process

Computer Vision

We first focused on training a machine learning model to accurately detect sentiment based on faces. We initially used the FER2013 dataset but switched to AffectNet because of better resolution. We used a Convolutional Neural Network inspired by susantabiswas, modifying it to work for our dataset and purposes. A major problem we faced was the model struggling to classify images in real time, so we also used OpenCV's object-detection capacities to isolate faces from an image. In the end, after hours of preprocessing, image manipulation, training, and model optimization, our models reached an average of ~94% for binary classification between ""happy"" and ""sad"" faces!



ChatGPT Integration

Then, we connected our trained CNN with the ChatGPT API to seamlessly curate personalized responses. We achieved this by obtaining a secure API key to access the GPT API remotely and gathering predictions from our CNN to generate modified prompts to feed into GPT. The idea we were going for is if the model detected you were feeling ""happy"", then ChatGPT would generate ""happy"" and ""cutesy"" responses, while if you were feeling sad, the model's energy would match your energy, and thus produce deadpan responses. Of course, this can be modified to different types of responses and the models can be changed to detect different emotions as well.

React + TypeScript + Flask

Finally, it was time for UI design! We used the React Framework with TypeScript, along with traditional CSS to make a very clean and simple interface allowing the user to communicate with our EmotionAI. React + TypeScript for the front end and Python Flask for the backend allowed us to connect the UI to the Machine Learning model, which output results to be used by our ChatGPT integration to generate sentiment-based responses. The UI design was inspired by Bitcamp's 10th anniversary, adding a sentimental touch. 

Acknowledgements

This was a project made by Minsi Hu, Davy Wang, Isabelle Park, and Zewen Ye at Bitcamp 2024 held at the University of Maryland :) Special thanks to Andy Qu for guiding us on the machine-learning aspects of the project, and all of the Bitcamp Organizers for making the event possible - we had a blast! >:D
",https://github.com/Mimsqueeze/Bitcamp-2024,,"Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Most Philanthropic Hack - Bloomberg, Best Financial Hack - Capital One","python, typescript, javascript, css3",Minsi,Hu,mimziwho@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,N/A,University of Maryland,No,"University of Maryland - University College, University of Maryland - College Park",2,Isabelle,Park,ipark12@terpmail.umd.edu
quest,https://bitcamp2024.devpost.com/submissions/507831-quest,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 23:04,"Inspiration

What if life were more like Solo Leveling, where every day presented thrilling new quests, but without the danger of having to fight monsters? Enter quest—a platform that brings a gamified spark to mundane daily routines and lets you climb the ranks with friends one quirky challenge at a time.

What is quest?

quest enhances your everyday routine with fun, unexpected missions. From finding the funkiest street art to discovering hidden landmarks in your city, quest pushes you to explore and create. Snap your achievements, get them verified, and stack up votes. It's a social network with a competitive twist!

Every morning, users are given 24 hours to complete a quest and submit a picture and/or location pin as proof. quest prompts are meant to be open-ended, allowing one’s creativity to shine through! Once you finish your daily quest, you can vote on your favorite quest submissions made by other users. As you complete quests in brave and creative ways, you’ll collect votes and climb the ranks. Users with the longest streaks of consecutive quests completed as well as the most total votes are displayed through in-app leaderboards.

How we built quest

We used Firebase’s developer tools to construct a robust and scalable backend and to secure user authentication processes. Utilizing Google Cloud's infrastructure, we ensured high availability and global scalability. The Cloud Firestore Database provided a responsive and flexible NoSQL database for storing and syncing data effortlessly across users. Firebase Cloud Functions allowed us to run serverless backend code in response to database triggers and authentication events, making the app highly responsive to user interactions. With Firebase Authentication, we implemented a seamless and secure user login system.

On the frontend side of things, React Native enabled us to build a cross-platform mobile application with a native look and feel, ensuring a smooth and consistent user experience on both iOS and Android devices. 

Challenges and accomplishments

Originally, we envisioned quest with a cutting-edge twist: using machine learning to verify user submissions. The intent was to create an automated system that could accurately assess photo submissions, rewarding users for precision and authenticity. While this innovative feature is still in the pipeline, we're enthusiastic about its development and are dedicated to bringing it to fruition in future iterations of quest.

Another challenge we faced was incorporating the diverse features typical of a social media app. Crafting a user-friendly interface, integrating real-time interactions, and ensuring a seamless social connectivity required a deep dive into both front-end and back-end intricacies.

Despite these challenges, we're proud to have gained comprehensive knowledge in Firebase and React Native. Building a robust backend with real-time data sync as well as a cross-platform mobile application as a minimum viable product was no easy task, but we felt we did a great job given the time constraint.

Moreover, we're proud to have created an engaging concept that captures the spirit of adventure in everyday life. We hope to keep working on quest and give people the thrill of “leveling up” in real life.

What's next for quest

We hope to immediately start testing quest with our friends back home and continuing to pack in features—think ML verifications, streak bonuses, team-based quests, and an experience system. There’s also lots of work to be done to strengthen the app’s backbone—smarter authentication, swift vote counts, smart caching, and neater code. Get ready for a leveled-up quest!
","https://github.com/avimahesh21/Quest-backend, https://github.com/aneil04/quest",https://youtu.be/gJcBxYiWHiY,"Best Moonshot Hack - Bitcamp, Best Gamification Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","firebase, react-native, google-cloud",Alexander,Peal,aapeal04@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,"Our tech stack consisted of Firebase, React Native, and Google Cloud. We had a positive experience with each!",Virginia Tech,,Virginia Tech,2,Avi,Maheshwari,avimaheshwork@gmail.com
Financial Advisor for College Students,https://bitcamp2024.devpost.com/submissions/507841-financial-advisor-for-college-students,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 23:12,"Inspiration

As college students, it can be difficult to understand how our current spending is affecting our long term financial goals. Our inspiration is our own questions about our spending and the desire to be more fiscally responsible.

What it does

Our project is a chatbot that can offer financial advice analyze your credit/debit card statements. It will show you the categorize your spending into different categories and make suggestions on where you can save. It can also offer independent financial advice regarding investment for beginners.

How we built it

We built our chatbot using the chat-gpt api in python and deployed it using gradio.

What we learned

We learned the versatility of language-learning models and how to implement them in our own projects. We also learned more SQL and databases.

What's next for Financial Advisor for College Students

The next thing we can add is a more in depth user interface where users can input their discretionary income so our chatbot has more information to generate financial advice.
",https://github.com/cstevens5/BitCamp2024/tree/main,,"Best Social Good Hack - Bitcamp, Best Financial Hack - Capital One","python, sql, machine-learning, ai, natural-language-processing, gradio",Sreenidhi,yaratha,yaratha@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,We had a great experience with SQL and chat-gpt API.,University of Maryland,,University of Maryland - College Park,3,Shriyans,Sairy,srisairy2@gmail.com
UMD Weather,https://bitcamp2024.devpost.com/submissions/507849-umd-weather,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 23:19,"Weather App installed within Apple

Users can search up cities, countries or zip code and find out the local time, temperature, humidity, and other unique features

**This project was built by 4 people who survived off of snacks and caffeine. The project utilizes a FE framework via React and API via openweathermap. Languages that we used consisted of React, Python, CSS. 

Challenges we ran into:

This was everyone's first time in a Hackathon and we had little to none software building skills. 
We had a hard time setting up alot of stuff, how to use github, learning the front-end and connecting it with the back-end process, and tons more. 

Accomplishments that we're proud of:

Somehow someway got this damn weather application to work
“Shoot for the stars, so if you fall you land on a cloud.”

What we learned

A lot about how front-end and back-end are tied very closely with each other

What's next for UMD Weather

Add more unique features and maybe authorization
","https://github.com/lcunnin1/WeatherApp, https://weather-mjguio5sb-levente-cunninghams-projects.vercel.app/",,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Sustainability Hack - Bitcamp, Best use of AI/ML Innovation for the Francis Scott Key Bridge Recovery Efforts - Cloudforce, Most Philanthropic Hack - Bloomberg, University Course Catalog Data Extraction and Query Challenge - Xficient,  Best Razzle Dazzle Hack - Bitcamp","react, javascript, css, python, openweathermap, jsx",Viet,Nguyen,vietnguyen0425@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,"We mainly used GitHub and VSCode to accomodate our project needs. 
It was nice learning about GitHub and how you're able to take snapshots of the code","University of Maryland, College Park",No,University of Maryland - College Park,3,lcunnin1,Cunningham,lcunnin1@terpmail.umd.edu
Untitled,,Draft,Pending,Manage team,4/20/2024 23:34,,,,,,Ostailor,Tailor,ostailor1234@gmail.com,,,,,,,University of Maryland - College Park,0,,,
Earth Rumble 5,https://bitcamp2024.devpost.com/submissions/507863-earth-rumble-5,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 23:36,"Inspiration

We are long time fans of the show and we want to experiment with motion-tracking. We think this game have the potential to encourage people to stay healthy while having a blast. 

What it does

This game simulates the famous earthbending competition and allows you to manipulate and throw rocks entirely through various movements already built-in. 

How we built it

We use mediapipe AI motion-tracking in python and feed the output into Unity. 

Challenges we ran into

Our plan to make this game into multiplayer was ultimately scrapped due to mediapipe not being able to use GPU to run 2 motion-tracking AI at the same time. We ended up focusing on building the game for a single-player and tried to add fun elements into it to make up for the other plan. 

Accomplishments


Coming up with different plan when we hit a wall/difficulty
Combining multiple technologies
Focusing on user experience with the 3D models, etc. 


What we learned


How to combine python & C#
Building Environment of the game


What's next for Earth Rumble 5

Watch out for our fire-bending feature coming later this fall!
","https://github.com/alexjbusch/earthbending-motion-tracking, https://www.youtube.com/playlist?list=PLBPym6PmE3hOraRJ1md3_B6PM75OkUB1v",https://www.youtube.com/shorts/G2zf_KgR6JY,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Gamification Hack - Bitcamp","python, unity, blender, mediapipe, spline, 3d",Indah,N,indhnformisch@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"surprisingly fast internet compared to the previous hackathons, thank you!","university of maryland, college park",,,1,Mac,Johnson,psudiname@gmail.com
PerLoan,https://bitcamp2024.devpost.com/submissions/507865-perloan,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 23:40,"Inspiration

Less than half of Americans (44%) say they can afford to pay a $1,000 emergency expense from their savings, according to Bankrate's survey of more than 1,000 respondents. Our hack is crucial as it aims to address a prevalent financial challenge encountered by millions of Americans everyday.

What it does

PerLoan is a revolutionary peer-to-peer lending service which allows people to request loans from others at a lower interest rate than traditional banks and credit cards, decreasing the burden on them, while also providing lenders with a way to grow their savings. People can either loan money to others via ""campaigns"", or they can start their own campaign! This is linked with your credit score so  these loans can be used to increase your credit score. We are also using PropelAuth to minimize account fraud and implementing a unique approach through our Artificial Intelligence model to minimize loan fraud, revolutionizing the loan industry.

How we built it

We built it using several frameworks. The front end is created with React Native, while the back end is created using Node.js, Cloudflare suite, and PropelAuth. Specifically with Cloudflare, we used Workers and D1 Database, which is a serverless SQL database, to store and manage information about the users. We also used several ML models and libraries. 

Challenges we ran into

We wanted to use PropelAuth to create the authentication for our application. However, we learned that it is not supported for mobile applications, so we were clueless as to how to proceed. We had chosen React Native solely cause of our believe that PropelAuth will work on it. None of us are familiar with React Native vs Flutter. We learned that thankfully there was a beta version of PropelAuth for React Native. We reached out to PropelAuth, and they were able to swiftly grant us access to the beta. Our app would not even be possible without their quick assistance. 

We still struggled to implement it, considering the limited support we had beyond documentation, leading to numerous errors and hours of working with their API and authentication services. After several hours, we managed to make a breakthrough, allowing us to PropelAuth to secure our application!

Accomplishments that we're proud of

We are proud of overcoming the challenges that were presented to us and creating a cohesive application that stayed true to our initial vision. We created a Figma to represent our game plan and we closely followed to ensure we stayed on track and on schedule.

What we learned

We learned how to confidently use Figma to create a prototype model of how we wanted our application to be designed, including page navigation. We also learned how to effectively use React Native, after much headache attempting to produce dev builds. We also learned a lot about back-end development and building AI models. 

What's next for PerLoan

We plan on further polishing up the UI to create a pleasant user experience with the app, and overall, prepare it to launch and help our fellow Americans who aren't as financially secure. We also hope to put this to scale and make our product ""real"", hopefully changing the loan industry in the process.
",https://github.com/lokashrinav/Loan,,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Use of PropelAuth - MLH, Most Philanthropic Hack - Bloomberg, Best Financial Hack - Capital One, University Course Catalog Data Extraction and Query Challenge - Xficient","react-native, typescript, sql, json, propelauth, cloudflare, javascript, node.js",Pranav,Palle,pranav4096@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"GitHub proved to be an invaluable tool during our hackathon journey, enabling collaboration and efficient management of our codebase. Its versatility facilitated smooth communication, streamlined version control, and effective coordination among team members, ultimately contributing to the success of our project.","University of Maryland, College Park",,"briar woods high school, University of Maryland - College Park",3,Rohan,Parikh,rohanparikh04@gmail.com
wAIste,https://bitcamp2024.devpost.com/submissions/507866-waiste,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 23:41,"Inspiration

At UMD, every waste disposal area has 3 signs indicating to the person what is compost, recyclable, or trash and has respective bins for these sections before the person throws away their item. This helps people decide which bin to throw their items in. However, this feature is not available everywhere, but we felt that we could make it accessible with an app where people can upload pictures of their items and determine their classification accordingly. Furthermore, our inspiration for wAIste came from a shared concern about the environmental impact of waste mismanagement and the potential of artificial intelligence to address this issue. We were inspired by the idea of using AI to optimize recycling processes and promote sustainability.

What it does

wAIste is an innovative project that utilizes AI technology to streamline waste management and recycling efforts. The platform allows users to upload images of various waste items, which are then analyzed by AI algorithms to determine the appropriate recycling category. It provides users with real-time feedback on how to properly dispose of different materials, ultimately promoting more effective recycling practices.

How we built it

We built wAIste using a combination of frontend and backend technologies. The frontend was developed using Flutter, a cross-platform framework for building mobile applications, allowing us to create a user-friendly interface for image uploading and result display. On the backend, we used Flask, a lightweight web framework in Python, to handle image processing and AI inference. We integrated with inference SDKs to leverage pre-trained models for waste detection and classification.

Challenges we ran into

One of the main challenges we faced was integrating multiple AI models seamlessly within the application. We had to ensure smooth communication between the frontend and backend while handling different types of image data and processing results efficiently. Additionally, optimizing the performance of AI inference on mobile devices posed technical challenges that required careful optimization and testing.

Accomplishments that we're proud of

We're proud to have successfully developed a functional prototype of wAIste that demonstrates the potential of AI in waste management. Despite facing various technical challenges, we were able to overcome them through collaboration and perseverance. Our accomplishment lies in creating a solution that has the potential to make a positive impact on environmental sustainability.

What we learned

Throughout the development process, we learned valuable lessons about the complexities of integrating AI into real-world applications. We gained insights into mobile development, backend infrastructure, and AI model deployment. Additionally, we deepened our understanding of waste management practices and the importance of promoting recycling awareness.

What's next for wAIste

In the future, we plan to further enhance wAIste by integrating additional features and expanding its capabilities. This includes improving the accuracy of AI predictions, adding support for different types of waste materials, and incorporating user feedback to enhance the user experience. We also aim to explore partnerships with recycling organizations and municipalities to scale the impact of wAIste and promote sustainable waste management on a larger scale.
",https://www.youtube.com/watch?v=ZyRgfsvGNfk,,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Sustainability Hack - Bitcamp, Most Philanthropic Hack - Bloomberg, Best Use of APIs related to Housing/Climate Change - Fannie Mae","flask, flutter, dart, server, python, javascript, c++, ruby, xcode",Arav,Luthra,aravluthra@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"During this hackathon, we interacted with various technologies including Flutter, Flask, and AI inference SDKs. Overall, our experience with these technologies was quite positive.

Flutter, as a cross-platform framework for building mobile applications, impressed us with its ease of use and flexibility. Its hot reload feature greatly accelerated our development process, allowing us to quickly iterate on UI designs and implement new features. We appreciated Flutter's rich set of widgets and its strong community support, which provided helpful resources and documentation.

Flask, a lightweight web framework in Python, proved to be an excellent choice for building our backend API. Its simplicity and flexibility made it easy to set up routes, handle requests, and integrate with AI inference SDKs. We found Flask to be well-suited for rapid prototyping and development, enabling us to focus on implementing the core functionality of our application.

Our experience with AI inference SDKs was also positive, as they provided powerful tools for incorporating AI models into our project. We were impressed by the accuracy and efficiency of the pre-trained models, which allowed us to perform real-time analysis of waste images with minimal latency. Integrating these SDKs into our Flask backend was straightforward, thanks to their well-documented APIs and helpful examples.

Overall, our technology experience during this hackathon was rewarding and educational. We gained valuable insights into mobile development, web development, and AI integration, and we look forward to further exploring these technologies in future projects.","University of Maryland, College Park",,univeristy of maryland,1,Narain,Sriram,narainsriram@gmail.com
Book Camp,https://bitcamp2024.devpost.com/submissions/507867-book-camp,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 23:41,"Inspiration

When brainstorming ideas for our project, we decided to first pick 3 Bit Camp challenges that way we could have a guideline for what we wanted to create. The 3 challenges we picked were Best First Time, Most Creative, and Gamified Every Day Task. So from here we started thinking of everyday tasks. We brainstormed a few and made app ideas for all of them. After cutting down our app ideas we eventually ended up with the idea of a gamified reading app. College and High School students will have to read a lot during their education, whether that be textbooks or just books for class. These readings can sometimes be dreaded. So our idea was to increase the incentive to read with a personalized reading buddy that read with you.

What it does

So far our app consists of a single reading buddy that reads with you and keeps track of the amount of time you've read together.

How we built it

We built it using Unity, GitHub, and Photoshop.

Challenges we ran into


Initial idea and vision were too ambitious
Not enough time to learn and do everything we wanted
Issues installing the correct version of everything we needed


Accomplishments that we're proud of


Fade in that takes places during the start of the game
The animation of our reading buddy
The reading stopwatch
Functional Instruction Panel
The music


What we learned


How to use Unity U.I
How to code in Unity
Basic Project Management
How to use GitHub
Multi-scene Management


What's next for BookCamp


A list that you can add too that keeps track of the books you read
Visual progression of reading buddy. The more you read with the reading buddy the more intelligent and happy they get.
Book recommendations
Different backgrounds for the reading buddy

",https://github.com/Komputer24/BookCamp,https://youtu.be/YCkCsysphh4,"Best First Time Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Gamification Hack - Bitcamp","unity, github, csharp, photoshop",Hailegebriel,Bizuayehu,hailebiz0@gmail.com,,Best App Dev Track Hack - Bitcamp,No,"For this project we mainly used Unity, Github, and Photoshop. Github wasn't too difficult to setup, we watched one 12 minute video and had it set up within 30 minutes. We did have a little difficulty towards the end with merging branches but it worked out in the end. Unity on the other hand was little more difficult, being relatively new to unity it was kind of hard to know where to start so during the beginning of our production phase there was a period where we didn't do much. Getting everyone on the same editor version and making it so that our work didn't conflict with each others was also a little difficult. In the end we just started adding features that were challenging but not too daunting. In foresight if we had asked for assistance earlier on we might have been better off. Lastly photoshop was used to create the animation for the reading buddy and that wasn't too bad.",University of Maryland,,University of Maryland - College Park,3,M,.,meron3319@gmail.com
AI Counselor,https://bitcamp2024.devpost.com/submissions/507868-ai-counselor,Submitted (Gallery/Visible),Pending,Submit,4/20/2024 23:43,"Inspiration

Our inspiration for this project was the Xficient challenge to build an application that parses through a university course description PDF. As an all freshman team, we know the struggle first hand of choosing classes from a selection of over 2000. Not to mention all of us have had experiences where we had to talk to a counselor, but their schedule was full for over a month. This desperation is what fueled the creation of AI counselor. A solution to help guide college students on their academic journey. While the challenge only required the application to process the first 100 pages, in order for it to truly be used as a tool to assist students, our application parses through the entire 800 page pdf.

What it does

AI Counselor is an AI assistant that takes in a university course listing PDF and responds to any question that user might have. Often times in order to retrieve information on a scale like this requires the knowledge of SQL, but this leaves most users unable to access this resource. Our application however, takes in natural language queries and outputs a result within 30 seconds. With an elegant and intuitive AI, critical course info is accessible to all.

How we built it

The core of our application started with trying to parse a PDF file and returning a readable JSON file. Due to the complex algorithms involved, our group decided on Python for its high development velocity. We experimented with various PDF parsing libraries, but landed on PyMuPDF for its speed in processing. We then split up into groups to work on converting natural language into SQL queries, exporting data from the PDF into a JSON file, and the Web Application framework to integrate each individual program. The most complex part was the conversion from natural language into SQL queries. We used Llama LLM from Meta for the conversion. However, Llama out of the box doesn't naturally output SQL queries well, so one of our group members fine-tuned the model to work better with our SQL queries.

Challenges we ran into

I would love to say it was smooth sailing all throughout, but I would be lying. We had our ups and downs, and by that I mean it was mostly down. Our morning started with a team discussion with everyone admitting that we don't really know how to use git. So instead of starting development, our team learned git using a test repository. After an arduous learning process, we finally started on our project. We then realized that we had no idea on how to structure a large scale application like this. It took a lot of fumbling through folders and redundant files to finally format our git repository. After looking through countless forums and documentations, we were able to witness our project come together like a puzzle. There was a moment around 2 in the afternoon where we wondered if we should just walk away, but we persevered.

Accomplishments that we're proud of

Our program runs mostly locally and does not require any external API access such as GPT-4. The PDF processing is extremely fast and deceptively simple. We also expanded the scope off the initial problem, expanding our program to cover the entire 800 page PDF rather than the 100 paged recommended. Most importantly, we persevered. We initially started with low hopes for our project, and believed it would a broken mess when we were done wit it. Regardless, we gave it our best shot and are genuinely proud of what we had created. From using technologies that we were not necessarily familiar with to ""powering"" through and squashing all of the bugs we encountered, we were truly able to work together as a team to make something beautiful.

What we learned

Sometimes you have to shoot for the moon, because you never know where you will end up. It might be cliche, but we really didn't expect to achieve anything close to the final product that we have today. There were many times that we thought that we would end up with a broken mess, but we pushed through it all and coded for about 30 hours. This experience taught us all about the development cycle, and what it takes to create a large scale application like this. And while we are incredibly proud of our final product, the experience we gained on this journey is worth much more than any prize could be. 

What's next for AI Counselor

We were limited by the hardware that we had due to the size of the llm. We had to take shortcuts in order to get around the fact we had limited processing power. Another feature we wanted to implement was to parse through multiple PDFs so that the model has more context to go off of. We would also like to implement auto updating the course catalogue to reflect the courses that change over the semester. We could go on and on, but those are the main features we would implement next.
",https://github.com/TomMitchell123/Bitcamp2024,https://youtu.be/tD3pK2KsXCc,"Best Moonshot Hack - Bitcamp, University Course Catalog Data Extraction and Query Challenge - Xficient","flask, react, python, javascript, ai, llm, json, llama3, ollama, html5, natural-language-processing, github, sql",Sunil,Pateel,spateel@terpmail.umd.edu,,Best Machine Learning Track Hack - Bitcamp,Yes,Most of the technology we interacted with was well documented so finding answers about bugs was not too hard.,University of Maryland,,University of Maryland - College Park,3,Jinson,Jimmy,jjimmy@terpmail.umd.edu
Wallet-Wise Realty,https://bitcamp2024.devpost.com/submissions/507872-wallet-wise-realty,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 0:00,"Inspiration

Our inspiration for this project was that we wanted to remedy housing shortages and homelessness. In 2023 the Department of Housing and Urban Development found that the amount of homeless Americans starkly increased from 2022 by about 12%. This is extremely worrisome because of the exponential nature of this data. Additionally, many of our group members come from larger cities where homelessness is more apparent. Seeing people sleeping in the freezing cold makes us feel for them and want to do something to fix it. 

What it does

Half of buying a house is first searching for one. So, to tackle this issue, we have decided to take advantage of available data in the housing market and a consumer's spending and income data to sophisticatedly compute which properties they should look into purchasing. We incorporate data points such as the the square footage per dollar, the number of rooms, the number of baths, etc. We are able to display this information neatly to the user with lists and popups to give more insight into the property. We also save the user's spending and income data for better ease of use the next time.

How we built it

We built the application using ReactJS, Firebase, Python Flask, REST API calls, and mathematical computation. On the first day of the hackathon, we started by organizing our thoughts fully using diagrams and flow charts. We spent a couple hours doing this before writing a single line of code because of how important this step is to the software development cycle. Without a fully formed plan, the pace of work will tend to be much slower since confusion comes into the mix. Next, we started implementing our application by splitting up into teams before ultimately convening back together finish the frontend.  We managed to work at an exceptional pace and were able to debug our errors rather quickly to keep us on track to finish.

Challenges we ran into

Some challenges we ran into were along the line of being too ambitious for our given time frame. We hoped to be able to analyze spending data Capital One's API, and also implement many more visualization components. Unfortunately due to a lack of time, we were unable to fully accomplish our goals. Delving deeper into our issues with the Capital One API, we were very excited to use it because of how it gave us the ability to a specific user's spending data with tools such as machine learning (utilizing random forest regression) however, we quickly found that the API did not give us access to individual consumer data and so, we had to scrap a portion of our idea.

Accomplishments that we're proud of

First and foremost, we are proud that we were able to even finish our application. Given that this was a first time hackathon for our group members, we still managed to learn extremely quickly. Our abilities to learn and then make consequential contributions was a huge accomplishment and we hope to take this same momentum into future projects. Additionally, we worked with technologies many of us were initially unfamiliar with such as Firebase and Google SSO login. Despite coming in blind on how to implement them, we were still able to seamlessly integrate them into our application. 

As a collective, our favorite features were the spinning globe on the search page (using only HTML and CSS) and the calculations and mathematical formula used for the Affordability and Preference Scores, as it took a lot of planning and consideration.

What we learned

On the technical side we picked up things from each other. Some of us were good at frontend and CSS while others were better at designing a backend and doing API requests. Additionally, from attending multiple workshops we deepened our knowledge on things like Flutter & Firebase, SQL, and Content Creation.

However, we also learned how to not only budget our time effectively, but also know when a project is just ambitious enough such that everyone in the group is able to significantly grow in their computer science knowledge. We also learned the value of planning and how it can dramatically speed everything up by putting everyone on the same page. Furthermore, we learned how to work together well despite lacking quality sleep and long hours. We know that these skills will translate extremely well into the actual work force and makes us excited to continue learning. 

What's next for Wallet-Wise Realty

The next steps for Wallet-Wise Realty would to implement the functionality from the Capital One API as mentioned before. This way, our algorithm would be able to be a lot more sophisticated. With the emergence of big data and data processing as a large field in computer science, we would be excited to use this to dip our toes into the field. We also want to partner with a large firm such as Capital One who does not have this functionality already built in. Doing so, we would have the ability to bring our application to the people who it would benefit the most. We would also like to make this web app responsive for mobile users, or use Flutter to develop it into a mobile app, as Flutter is a lot faster and easier to use than React for mobile app development. Additionally, we already use Firebase so integrating Flutter with Firebase would be seamless.
","https://github.com/Joshua152/Bitcamp2024, http://bitcamp-login.web.app",,"Best UI/UX Hack - Bitcamp, Best Financial Hack - Capital One","javascript, html, css, python, firebase, oauth, restapi",Joshua,Au,joshuahyau@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"Capital One's Nessie API: Although we saw its potential for something innovative, the API was simply too stripped down without access to meaningful consumer data. We were under the impression that the data on the API overview would be accurate however, it was not.",University of Maryland - College Park,,"University of Maryland - College Park, University of Maryland - University College, Dougherty Valley High School",3,Noah,Der Garabedian,noahd3485@gmail.com
Green Companion,https://bitcamp2024.devpost.com/submissions/507875-green-companion,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 0:03,"Inspiration

Our project is fueled by a profound desire to share our passion for nature with the global community. We recognize that the art of cultivating and nurturing plants is often undervalued and oversimplified. Many believe that adequate sunlight and water suffice, yet this common misconception leads to either overwatering or undernourishing, resulting in the untimely demise of countless plants. We aim to correct these misunderstandings by introducing innovative, user-friendly technology that ensures plants not only survive but thrive.

What it does

Project GreenCompanion not only simplifies the complexities of plant care but also educates and involves the user, creating a deeper sense of responsibility and connection to the environment. By integrating technology with traditional gardening practices, we offer a solution that enhances living spaces, improves mental well-being, and brings the beauty and benefits of nature into modern homes.

How we built it

We added the moisture sensor with Arduino to detect the moisture levels. We looked at different datasets and statistics to verify the proper moisture value of healthy soil. Then we added a servo to give the plant a dancing effect as the speaker plays rickroll music when the soil is too wet and the doom theme song when the soil is too dry. (We added the illusion of the plant singing to you)

We also used a Raspberry Pie to run a Computer Vision program with a Logitech camera that detects the nearest window or light source and then activates the motor which rotates the plant on its axis facing the direction of the light. (Giving the illusion of a curious pet who always follows the light)

We used Blender and Fusion 360 to design the 3D chassis for the robot, hosting all the electronics inside it neatly while designing it to look like a normal flower pot from the outside.

Challenges we ran into

While using the moisture sensor we found a major flaw with all the other products that use this sensor. When the sensor is being used it starts electrolysis and gets rusted quickly (within 3-5 days)

While 3D designing we had to redesign 3-4 times as we had a lot of moving parts which could in turn loosen the electronic wires.

After making the final design the printing time was coming to 1 day 4 hours which would be unfair to everyone else as we would be using the printers for the majority of the hackathon.

After successfully creating the AI model for light detection and axis rotation, when the time came to implement it, our Raspberry Pi started giving issues and would not connect and take in code. Unfortunately, we could not get it to work even with the faculty leading to us not implementing the AI model which was ready for deployment.

Accomplishments that we're proud of

To avoid rusting, we found out that indoor plants need water for an average of 6-12 hr and we added a logical statement that checks the moisture level in between the above range and checks the moisture level after 10 minutes after watering the plant.

The 3D model was successfully scaled down by 83% reducing the time from 1 day 4 hours to 4 hours. We used different tricks to keep the model working while sticking to the time limit and showing common courtesy.

What we learned

We learned about the limitations of a well-established sensor and how to counter them, we also learned how to pivot in the last moments as things don't always go according to plan as we had to break our final model into smaller pieces while still designing it to be capable to give a demo.

What's next for Green Companion

We will be printing our full-size model and running the AI model with it, testing the project again with its full potential is what we aim for in the future.
",https://github.com/thatDaiwikKashyap/GreenCompanion,," Best Hardware Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Sustainability Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","python, c++, autodesk-fusion-360, blender, cv2",Daiwik,Kashyap,daiwik242@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,We used different hardware available to us at the hackathon like Arduino and Raspberry Pie. We also used many of the electric components and 3d printers. We used GitHub to share files.,Pennsylvania State University,,Pennsylvania State University,2,Swayam,Bansal,swayambansal01@gmail.com
Untitled,,Draft,Pending,Manage team,4/21/2024 0:09,,,,,,Alex,Y,blueputty01@gmail.com,,,,,,,West Windsor-Plainsboro High School South,0,,,
Bitcamp Brawlers - Disaster Data,https://bitcamp2024.devpost.com/submissions/507884-bitcamp-brawlers-disaster-data,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 0:32,"Inspiration

The Fannie Mae challenge inspired us to analyze natural disaster data and housing effects.

What it does

Our web application allows a user to understand the prevalence of certain natural disasters in each of the 50 states. Then, they can look deeper into this data and its effect on housing. At the bottom we have a footer to provide additional resources and help to anyone struggling with the aftermath of these events. 

How we built it

We used React and TypeScript for our frontend development. We used Python and FastAPI for our backend development.

Challenges we ran into

Finding extensive and reliable data sets to analyze, formatting our data in an appealing way, and fixing never ending bugs!

Accomplishments that we're proud of

Coloring the heat map, finishing the side bar, click transitions.

What we learned

Always start with a concrete idea before going into development

What's next for Bitcamp Brawlers - Disaster Data

We hope to extend on what we accomplished this weekend in the future
","https://github.com/madelineanson/Bitcamp-Brawlers, https://github.com/jasonyih/BitcampBackend",,Best Use of APIs related to Housing/Climate Change - Fannie Mae,"react, typescript, fastapi, python",Madeline,Anson,madelineganson@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,I loved working with FastAPI because it was easy to set up and understand. I also loved using React as opposed to JavaScript.,"University of Maryland, College Park",,University of Maryland - College Park,4,Kimber,Gonzalez Lopez,martinezkimber03@gmail.com
ProjectFM,https://bitcamp2024.devpost.com/submissions/507898-projectfm,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 1:02,"Inspiration

Our inspiration for ProjectFM stemmed from the desire to empower individuals with comprehensive housing information tailored to their unique needs. We envisioned a platform that seamlessly integrates housing and climate data, leveraging modern technologies to simplify the decision-making process for finding the perfect place to call home.

What it does

ProjectFM harnesses the power of Next.js, PropelAuth, JavaScript, HTML, Tailwind CSS, and Python to deliver a user-friendly experience that combines housing and climate information. By utilizing APIs, our platform calculates and presents essential data points, facilitating informed decisions about housing locations. Users can explore various factors, from housing affordability to climate suitability, all within a single interface.

How we built it

We meticulously crafted ProjectFM using a stack of cutting-edge technologies. Next.js provided the foundation for our dynamic web application, while PropelAuth ensured secure authentication and user management. JavaScript and HTML were instrumental in implementing functionality and structure, respectively. Tailwind CSS empowered us to create a sleek and responsive design, enhancing the user experience. Python served as the backbone for handling data processing and API interactions, seamlessly integrating housing and climate information into our platform.

Challenges we ran into

Throughout the development process, we encountered several challenges that pushed us to innovate and problem-solve. Integrating multiple APIs and ensuring smooth data flow presented initial hurdles, requiring meticulous planning and implementation. Additionally, optimizing performance and maintaining code scalability posed ongoing challenges as we aimed to deliver a fast and efficient user experience. Overcoming these obstacles demanded collaborative efforts, extensive testing, and continuous refinement of our approach.

Accomplishments that we're proud of

We take immense pride in the achievements of ProjectFM, including:

Successfully integrating diverse technologies to create a cohesive and feature-rich platform.
Implementing a user-friendly interface that streamlines the housing location selection process.
Leveraging APIs to provide accurate and up-to-date housing and climate information.
Prioritizing data security and user privacy through robust authentication mechanisms.
Receiving positive feedback from early users and stakeholders, validating the value proposition of our solution.

What we learned

The development of ProjectFM provided invaluable learning experiences for our team. We deepened our understanding of Next.js and Tailwind CSS, mastering their capabilities for building modern web applications. We gained proficiency in leveraging APIs to access external data sources and process information dynamically. Additionally, collaborating on a complex project enhanced our teamwork, communication, and problem-solving skills, equipping us for future endeavors in software development.

What's next for ProjectFM

Looking ahead, we envision several exciting opportunities to enhance and expand ProjectFM:

Implementing advanced algorithms for personalized housing recommendations based on user preferences and feedback.
Introducing additional data sources and metrics to provide comprehensive insights into housing suitability.
Enhancing the platform's scalability and performance to accommodate growing user demand.
Exploring partnerships with real estate agencies and environmental organizations to enrich data offerings and extend our reach.
Continuously refining the user experience through iterative updates and user feedback integration.
ProjectFM is poised to evolve into the go-to destination for informed housing decisions, empowering individuals to find their ideal living spaces with confidence and ease.
","https://projectfm.vercel.app/, https://github.com/Ramareigns/BitCamp-24",,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Use of PropelAuth - MLH, Most Philanthropic Hack - Bloomberg, Best Use of APIs related to Housing/Climate Change - Fannie Mae","nextjs, javascript, html, tailwindcss, typescript, python, propelauth, api",Ramareigns,Wijesinghe,ramithwijesinghe@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,We got to learn a lot about web development and PropelAuth.,University of Maryland,No,University of Maryland - College Park,1,M,Dev,mattbook321@gmail.com
Address Gun Violence in Schools in DC,https://bitcamp2024.devpost.com/submissions/507900-address-gun-violence-in-schools-in-dc,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 1:04,"Inspiration

As students of an educational institution, we assume that schools are a safe space for us to learn and explore our interests. However, to see it being jeopardized due to a weapon has long lasting effects on people that experience a school shooting. In some cases, students may experience symptoms of post-traumatic stress disorder (PTSD) and have difficulty concentrating on their studies or participating in school activities. Additionally, students who have lost friends or loved ones in these events may struggle with grief and feelings of isolation. So, this topic not only needs to be addressed to protect innocent people from harm's way but it also holds an emotional connection to us as students of schools.

What it does

It provides information about school shootings in DC from the years 2020-2023 and displays it in an easy-to-understand format that has details about specific shootings.

How we built it

We developed the graphs using ArcGIS, as it is a great tool to visualize various types of data. We implemented these graphs as tables into an app that was made with the Flutter plug-in.

Challenges we ran into

We originally wanted to directly implement our graphs from ESRI into our app, but was facing challenges with the API. Instead, we used to design structures like image carousels to showcase the same information.

Accomplishments that we're proud of

This is our first time using Flutter and creating a project for a hackathon. We learned a lot from this process and are proud of our results in the time we had.

What we learned

We learned a lot about how to develop an app using Flutter that has multiple pages and how to integrate images and nav bars.

What's next for Address Gun Violence in Schools in DC

We want to find a way to automate the data that is put onto this app, and ideally make one for each state.
",https://github.com/sgubba1/gunviolenceindcschools-bitcamp,https://youtu.be/hOELcD_h7Yo?si=yNYRN0THKwcRx_HD,"Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp","flutter, dart, esri",avishig,Gupta,avishigupta1115@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"It was a great experience, and we learned a lot from the mentors that helped us!",University of Maryland - College Park,,University of Maryland - College Park,0,,,
SkyCast,,Draft,Pending,Project details,4/21/2024 1:05,,,,,,Shyam,Ganapathy,shyamganapathy@live.com,,,Yes,,University Of Maryland,,University of Maryland - College Park,3,Akhil,Metukuru,akhil.metukuru2016@gmail.com
Audit AI,https://bitcamp2024.devpost.com/submissions/507902-audit-ai,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 1:06,"Inspiration

The idea for Audit AI struck us one evening as we were browsing through an online gallery of digital artwork. Amidst the stunning visuals, we stumbled upon a controversy surrounding the authenticity of some pieces. It was a wake-up call to the growing concern of AI-generated content masquerading as genuine artwork. This sparked our curiosity and motivated us to develop a solution that empowers individuals to discern between real and AI-generated art effortlessly.

What it does

Audit AI is a Google Chrome extension designed to provide users with quick insights into the authenticity of digital artwork they encounter while browsing the internet. With just a right-click, users can select ""Audit AI"" to initiate instant analysis. Leveraging advanced computer vision models like YOLO, the extension swiftly identifies key features and patterns to determine whether the artwork is real or AI-generated. It's a simple yet powerful tool that promotes transparency and trust in the digital art community.

How we built it

Building Audit AI required a combination of backend and frontend technologies. We utilized Flask for the backend, creating endpoints to handle image analysis requests. On the frontend, we leveraged JavaScript to develop the Chrome extension interface, seamlessly integrating it with the browsing experience. Behind the scenes, state-of-the-art computer vision algorithms like YOLO were employed to accurately recognize and classify images. Throughout the development process, we prioritized user experience, ensuring that Audit AI delivers fast and reliable results without disrupting browsing flow.

Challenges we ran into

While developing Audit AI, we encountered various challenges that tested our problem-solving skills. Optimizing the performance of image recognition algorithms to deliver real-time analysis proved to be a significant hurdle. We had to fine-tune parameters and optimize algorithms to ensure both accuracy and speed. Additionally, handling the diverse range of image formats and sizes encountered across the web posed another challenge. Overcoming these obstacles required diligent testing, iteration, and collaboration among team members.

Accomplishments that we're proud of

We take pride in the creation of Audit AI, a tool that addresses a pressing need in the digital art landscape. By empowering users to make informed decisions about the authenticity of artwork online, we contribute to fostering transparency and integrity in the digital art community. Our accomplishment lies not only in the technical implementation but also in the potential impact Audit AI can have on combating digital art misinformation and plagiarism.

What we learned

Developing Audit AI was a learning journey that provided valuable insights into computer vision, web development, and user interface design. We deepened our understanding of image recognition algorithms and gained practical experience in deploying machine learning models in real-world applications. Additionally, we learned about the importance of user feedback and iterative development in creating a polished and user-friendly product.

What's next for Audit AI

Looking ahead, we envision further enhancements to Audit AI's capabilities. This includes integrating more advanced image recognition algorithms to improve accuracy and expanding compatibility with additional online platforms and browsers. We also aim to collaborate with experts in the digital art community to continuously refine and validate Audit AI's analysis. Ultimately, our goal is to empower users with a reliable and trustworthy tool for navigating the ever-evolving landscape of digital art.
",https://github.com/ukataria/Bitcamp2024/tree/main,https://youtu.be/BXBHUO--pkk,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH","javascript, python, html, css, flask, ultralytics, torch, google-extension",Ateef,Mahmud,ateefayman@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"During the hackathon, our team had the opportunity to engage with a variety of technologies crucial to the development of our project, Audit AI. Flask served as our backend framework, facilitating seamless communication between the Chrome extension frontend and our image recognition algorithms through RESTful APIs. JavaScript was used in crafting an interactive user interface for the extension, while YOLO (You Only Look Once) powered our image recognition system, accurately classifying artwork as real or AI-generated. GitHub played a pivotal role in enabling collaboration, version control, and project management, ensuring efficient workflow and code integration. Additionally, Chrome DevTools proved indispensable for debugging and optimizing the extension, providing insights into frontend behavior and network requests. Our overarching experience with these technologies was positive, enabling us to develop a user-friendly solution for authenticating digital artwork while overcoming various challenges along the way.","University of Maryland, College Park and Carnegie Mellon University","We registered ""audit-ai.co"" to reflect our project, Audit AI, dedicated to verifying AI-generated content. The name is concise and memorable, emphasizing our platform's purpose.","University of Maryland - College Park, Carnegie Mellon University",3,Mehul,Goel,mehulg@andrew.cmu.edu
Vacation Location,https://bitcamp2024.devpost.com/submissions/507908-vacation-location,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 1:19,"Inspiration

We wanted a program that would enable homeowners to plan for the future and buy houses that would sustain their market value.

What it does

We developed a program that is able to indicate whether a given county is suitable for buying a house based on previous natural disaster data in the area as well as home costs during a given time frame. The program retrieves the first natural disaster that occurred in the given county and time frame and also retrieves data about housing costs between a year before and after the natural disaster occurred in monthly intervals.

How we built it

We used Svelte for the front-end and Flask for the backend. In Svelte, we utilized Google Maps' API to display a map. In the map, we added markers to indicate natural disasters that occurred in a given county during a given time span. The markers were labeled with the name of the natural disasters and were clickable to show the user data on housing costs of houses in the specified area and time frame. Using Flask, we utilized Zillow's housing cost API as well as the U.S. Census' counties API to get the counties of every state and a typical house cost for a given county during a certain time frame.

Challenges we ran into

Some challenges we ran into were learning how to use the Google Maps API, finding comprehensive datasets suitable for use, correctly parsing and packaging data, integrating Flask with Svelte, making sure files had access to other necessary files by changing directories and paths, and making sure that versions of python were consistent.

Accomplishments that we're proud of

Implementing an interactive map using the Google Maps API, creating a marker on the Google Maps API based on a user's input for location, making the marker able to be clicked and open a pop up with information, accurately parsing through databases for necessary information by using SQLite3, and retrieving data from 12 months before and after a natural disaster's date.

What we learned

We learned how to use the Google Maps API, how to pull data from databases and parse through that data, how to integrate Flask and Svelte, how to create a clickable marker that appears on the map, how to manipulate and send the data from the back-end Flask server to the front-end Svelte server and have that data appear to the user.

What's next for Vacation Location

Some next steps include adding more categories that help to indicate whether a location is fit for a vacation house such as income data, education data, and crime data for a given county during a given time frame.
",https://github.com/abdul8117/bitcamp2024,https://www.youtube.com/watch?v=lczj_15mTUw,"Best Bitcamp Hack - Bitcamp, Best Use of APIs related to Housing/Climate Change - Fannie Mae","python, javascript, sqlite, svelte, flask, json, query, html, google-maps, css, fema-database, zillow-database, us-county-census-database, vscode, pycharm",Alexander,Tong,alexdthi@gmail.com,,Best App Dev Track Hack - Bitcamp,No,GitHub was extremely useful for allowing my team to easily share code between frontend and backend teams as well as between the two teams.,"University of Maryland, College Park",,"Thomas Jefferson High School for Science and Technology, University of Maryland - College Park",3,Kathy331,Chen,kathychen331@outlook.com
Moth Challenege,https://bitcamp2024.devpost.com/submissions/507911-moth-challenege,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 1:25,"The Story Behind ""The Moth Challenge""

Inspiration

Our journey began with a spark of inspiration from the infamous Cicada 3301 puzzles and the CIA's Cyber Security Intelligence Tests. These challenges, known for their complexity and the depth of knowledge they require, motivated us to create an accessible platform where anyone can learn and test their cybersecurity skills. We aimed to demystify the field of cyber security and make it engaging through gamified challenges.

What We Learned

As we embarked on this project, none of us were seasoned security experts. This meant that every step of our journey was not just about building something but also about learning it deeply ourselves. We had to dive into various cybersecurity concepts such as cryptography, steganography, and web security. Learning to implement these in Python, JavaScript, and through web frameworks like React and Flask was equally challenging and exhilarating.

We also explored using Firebase for backend services, which was a new technology for some team members. The learning curve was steep but rewarding, as we managed to integrate all these technologies into a seamless experience for the user.

How We Built It

Our tech stack was comprehensive:

Frontend: We used React to build a user-friendly interface. This allowed us to create a dynamic and responsive design that could accommodate the various types of puzzles and challenges.
Backend: Flask served as our backend framework, handling requests and serving the content needed for each challenge.
Programming: Core logic and puzzle algorithms were implemented in Python and JavaScript, which allowed us to manipulate data effectively and handle complex operations.
Database & Hosting: Firebase provided us with the tools necessary for hosting our application and managing user data securely and efficiently.

Challenges Faced

One of the major challenges we faced was the initial lack of deep knowledge in cybersecurity. Each member of the team had to undertake personal studies and group learning sessions. We also encountered technical difficulties in integrating various technologies. Debugging cross-language interactions between Python and JavaScript posed significant hurdles.

Moreover, designing puzzles that were challenging yet solvable for beginners required a delicate balance. We spent numerous hours tweaking the difficulty levels and ensuring that the learning curve was not too steep.

Conclusion

Building ""The Moth Challenge"" was as much about constructing a project as it was about personal growth and team development. We pushed the boundaries of our knowledge and skills, learned from each other, and created a platform that we hope will inspire and educate many others in the field of cybersecurity. This project not only taught us about technical skills but also about resilience, teamwork, and the importance of a clear, shared vision.
","https://github.com/kartikey-onlineGOD/BitCamp-2024-Cyber-, http://phishandchips.us",https://www.youtube.com/watch?v=GeW_RyMXBL8,"Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best Digital Forensics Related Hack - Cipher Tech","python, firebase, flask, google, google-cloud, javascript, figma, html5, css3, react, react-native",Kartikey,Pandey,kartikeypandey18@gmail.com,,Best Cybersecurity Track Hack - Bitcamp,Yes,"During our recent hackathon, we utilized Firebase for our backend services, attracted by its scalability and comprehensive features. Here are some key insights:

Usability
Firebase's intuitive console and excellent documentation made it easy to implement features like databases, user authentication, and hosting. Its user-friendly design is ideal for both novices and experienced developers.

Performance
Firebase excelled in real-time data syncing with Firestore, enhancing the responsiveness of our application. However, complex queries sometimes reduced performance, an area for potential improvement.

Integration
The seamless integration with various platforms and Google Cloud services streamlined our development process, making Firebase a versatile tool for cross-platform development.

Cost
The free tier is generous, but it's important to monitor usage to avoid unexpected costs, especially in a scalable project environment.

Overall Impact
Firebase significantly reduced our backend development time, allowing us to focus on enhancing user experience. Its ease of use and robust features made it a standout choice for the hackathon.

Suggestions for Improvement
Better support for complex queries in Firestore and clearer pricing guidelines would further enhance Firebase’s utility.

In conclusion, Firebase is highly recommended for its robust features and ease of deployment, making it an excellent choice for rapid development environments like hackathons.",Pennsylvania State University,phishandchips.us,Pennsylvania State University,1,Parth,Kshirsagar,parth.kshirsagar1410@gmail.com
Extreme Weather events and Mortgage Payment,https://bitcamp2024.devpost.com/submissions/507912-extreme-weather-events-and-mortgage-payment,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 1:27,"Inspiration
       Data Exploration is always exciting, diving deep into the unknowns to discover new story. 

What it does
      It analyses the dataset and provide the relationship between the extreme weather events and mortgage payment. 

How I built it
       I used Jupyter Notebook as a platform with programing language of python. 

Challenges I ran into
      Integrating a chatbot to the notebook was very challenging. 

Accomplishments that I'm proud of
       Using AI chatbot and Choropleth map inside the Notebook.

What I learned
      I learned to create a chatbot and the create Choropleth maps. 

What's next for Extreme Weather events and Mortgage Payment
     As a future project, can use ML to predict the likely extreme weather pattern and Mortgage payment failure. 
",,,"Best First Time Hack - Bitcamp, Best Use of APIs related to Housing/Climate Change - Fannie Mae","python, jupyter-notebook, pandas-ai, panda, numpy, geojson, plot, matplot",Sherin Feno,Kumaresan,sherink1@umbc.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,Jupyter Notebook,University of Maryland Baltimore County,No,University of Maryland - Baltimore County,0,,,
Club Terp,https://bitcamp2024.devpost.com/submissions/507936-club-terp,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:02,"Inspiration

Our inspiration for this project came from our experience with a website called YemNews. YemNews helps users discover a tailored selection of news stories based on their interests each day. Intrigued by this concept, we sought to create a similar platform for the University of Maryland (UMD) community.

We recognized the need for a centralized hub where members of the UMD community could easily find events that cater to their interests and schedules. With this vision in mind, we embarked on developing a website that serves as an events finder specifically designed for the UMD community. Our goal was to provide a seamless and personalized experience for users to explore and engage with various events happening on or near the UMD campus.

What it does

The UMD Events Finder is designed to streamline the process of discovering campus events for members of the University of Maryland (UMD) community. 

User Experience


Interest Input: Users can input their interests via a search bar on the platform.
AI Matchmaking: Our AI ""matchmaker"" algorithm processes the user's interests and preferences.
Event Recommendations: Based on the user's input, the system suggests relevant events from the calendar.umd.edu listing.
Personalized Experience: Users receive tailored event suggestions that align with their interests and preferences.


Integration with Calendar.umd.edu

Our platform aggregates events from the official UMD event calendar, ensuring comprehensive coverage of campus activities.

How we built it

Backend


We utilized a Python script to extract event data from calendar.umd.edu and transform it into a CSV file.
Leveraging the OpenAI API, we developed an AI model capable of generating event recommendations based on user interests.
Python scripting was employed for data processing and model integration.


Frontend


Our frontend was developed using JavaScript, HTML, and CSS
The frontend allows users to input their interests and interact with the AI ""matchmaker"" to receive personalized event recommendations.


Hosting


AWS Lightrail: We chose AWS Lightrail to host our web application, scripts, and AI models. Lightrail provided a reliable and scalable hosting solution, ensuring optimal performance for our platform.


Workflow


Data Extraction: Event data was collected from calendar.umd.edu using a Python script and converted into a CSV format.
AI Integration: The CSV file served as input for our AI model, which generated event recommendations based on user interests.
Frontend Development: Using JavaScript, HTML, and CSS, we developed the frontend interface for users to input their interests and receive event recommendations.
Deployment: The entire system, including the frontend, backend scripts, and AI models, was deployed on AWS Lightrail for hosting.


Challenges we ran into


Working with difficult APIs
Time Constraint
Lack of experience with web development and interacting with APIs


Accomplishments that we're proud of


The amount of AWS and OpenAI we were able to use in this project
The amount of APIs we learned in this short time
Our productivity


What we learned


We need to use less APIs
Managing time properly
 How we can develop a product from an idea to its finished


What's next for Club Terp

The next steps for this product is fixing the final bug fixes we didn't get to as well as integrating more UMD websites so we can find more events to recommend. We also want to create a better UI/UX design
",https://github.com/Raghav-Chakravarthy/testudoMLtrack.git,,"Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp","python, node.js, javascript, css, html, chromedriver, selenium, amazon-web-services",Mihir,Mahesh,emailmihirmahesh@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"This hackathon, our team worked in Node.js and cloud storage technologies to help trigger our machine learning models based on user's interests.",University of Maryland College Park,No,University of Maryland - College Park,3,Shaashvat,Shetty,shaarna8@gmail.com
CuttingCorners,https://bitcamp2024.devpost.com/submissions/507940-cuttingcorners,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:08,"Inspiration

We wanted to create a game that matched the vibe of our favorite co-op multiplayer games, like Gartic Phone and Jackbox but with a technical twist.

What it does

Welcome to CuttingCorners- a telephone-esque drawing game you can enjoy with 3 of your friends. Given part of a picture, exercise your artistic ability by trying to fill in the rest using your imagination and godlike intuition! At the end, see how you and your friends did by checking if our AI agent can guess what you were trying to draw!

How we built it

We are using p5js, a javascript graphics library, along with custom images for our frontend. To build the online multiplayer we are using express and Socket.io. We are hosting our server on Heroku, which manages lobbies, communication between clients, and requests to and from our API.

To power the classifier, we used pytorch to replicate a cutting-edge CNN architecture for image classification, Alexnet. We trained the network on 25000 data points from 25 different classes, and consistently achieved 80-90% test accuracy. Afterwards, we connected the saved model to our API to enable the app to classify user inputs and give a confidence score for the classification. The dataset comes from an open sourced project by Google called ‘Quick, Draw!’

To have the frontend be able to utilize our model, we decided to use FastAPI to build a Restful API that is able to take in base64, a string representation of the user-drawn image, and manipulate it in order to compress it down into a 28x28 grayscale matrix that our model needs as input. We then used Railway to host our python backend.

Accomplishments that we're proud of

We're really proud of how fun the game is - we couldn't stop laughing playing it, and others seemed to have found it fun too. It makes the grind worth it to build an actually enjoyable hack that anyone can use!

What we learned

We gained experience working with large datasets for computer vision and image classification tasks, deploying python APIs, working with base64 image data and using p5.js to build a robust multiplayer system. 

What's next for CuttingCorners

We hope to introduce new features into our game, such as different game modes and difficulties, and train the model on more classes to allow for a more robust gaming experience.
",https://floating-earth-49506-74598c9829a7.herokuapp.com/,,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp","pytorch, p5.js, python, fastapi, pydantic, pandas, javascript, pil, socket.io, express.js",Kieran,Khan,kierank.pc@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"FastAPI itself is easy to use but difficult to deploy, especially if you're trying to do it for free.","University of Maryland, College Park",,University of Maryland - College Park,3,Matthew,Liu,mliu218@terpmail.umd.edu
GuessExamPerformance,https://bitcamp2024.devpost.com/submissions/507945-guessexamperformance,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:10,"Inspiration

After exams do you wonder how other people feel about the exam? Yes, our model has the ability to give you a slight idea of how the person in the video might feel about the exam, by emotion recognition.

What it does

It takes in a video mp4 file (maybe of you taking an exam or checking your answer with friends) and evaluate each frame to collect your facial emotion information. Then conclude your overall emotion and infer your performance on an exam.

How we built it

The model first detects face and then recognize emotions from those faces. We process videos frame-by-frame to collect data. The face detection model is based on Meta's end-to-end object detection model. Then from fer2013 data set, we filter out some controversial training data and use a CNN to train our emotion recognition model. And finally with the models, we can predict emotions from human face photos.

Challenges we ran into

The training data set was really large and partial unfiltered, it took us a lot of time to select the good training data.

Accomplishments that we're proud of

Training a model and videos processing.

What we learned

Think carefully and logically before making a move.

What's next for GuessExamPerformance

Probably deception detection through maybe micro expression analysis.
",https://github.com/AdrianHuang2002/GuessExamPerformance/tree/master,https://youtu.be/chLOtS3u0Fo,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best use of AI/ML Innovation for the Francis Scott Key Bridge Recovery Efforts - Cloudforce","python, computer-vision, facial-expression-recognition, ml, detr",junyun,huang,h975894552@gmail.com,,Best Machine Learning Track Hack - Bitcamp,No,"GitHub, computer vision, ML, AI, End-to-End Object Detection with Transformers, Facial Expression Recognition",University of Maryland College Park,,University of Maryland - College Park,1,Tim,Zhang,czhang35@terpmail.umd.edu
TerpFit,https://bitcamp2024.devpost.com/submissions/507952-terpfit,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:28,"Inspiration

Working out at Eppley, waiting for machines, and extending your workouts because you are waiting for long periods. Occasionally, working out alone and wanting someone else to work out with and potentially become friends.

What it does

A user creates a profile using registration and login features, which are stored and authenticated using Firebase. Then, the user can create a workout plan, find a workout buddy, or see the availability of machines at Eppley Recreation Center. Creating a workout plan entails building a five or 7-day schedule where you decide which exercises and muscles you will be training on that day. You can view your past workout plans, and a reward program is in place for those who stick to their workout routine. Your profile will show the user's avatar, some information about the user, and their status in the rewards. An info button displays the various tiers in the status program. For the find workout buddy section, after answering a couple of questions, a list of potential buddies will be displayed. You can press on the buddy and receive contact information to contact them. We did not create the front-end or back-end for the machine availability aspect, but we brainstormed the implementation.

How we built it

We built it in Visual Studio Code, using React Expo and viewing our code on our phones. We started with Figma to visualize the UI that we wanted to create. Then, we split up and worked on React-Native to implement the front end and create a database and fast API to track machine availability. Then, we worked on Firebase to authenticate user profiles. After assembling the project pieces, we pushed all our code to GitHub for future use despite being unable to create a finished result. 

Challenges we ran into

We ran into a challenge when initially implementing the front end using React. We were creating a mobile app, and while trying to navigate between pages, we used React Router. While running into several errors, we eventually realized that React Router is only meant for web applications and React-Native is intended for mobile applications. Another challenge we encountered was not getting Firebase to authenticate user profiles, and we could not debug the issue.

Accomplishments that we're proud of

We are proud of the front-end implementation, from drawing the user interface on paper to Figma and then in react native.

What we learned

We learned a lot about the React tech stack, Firebase documentation, and command line arguments to emulate React expo apps on a mobile phone.

What's next for TerpFit

We plan on continuing to work on this project as we are passionate about the finished project and hope to piece all our technologies together to create a functional application.
",https://github.com/eswar-karavadi/Bitcamp2024,https://youtu.be/wiweOYJOOt0,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp","react-native, firebase, python, javascript, fastapi",Rivan,Parikh,rparikh6@terpmail.umd.edu,,Best App Dev Track Hack - Bitcamp,No,"React-Native, React-Router-Dom, Figma, Firebase Authentication, Firebase Realtime Database, GitHub, Command Line, Python","University of Maryland, College Park",,University of Maryland - College Park,3,Aymaan,Hussain,ahussai8@terpmail.umd.edu
fortnite battle pass,https://bitcamp2024.devpost.com/submissions/507953-fortnite-battle-pass,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:28,"Inspiration

i really like fortnite and vbucks and the costco churro

What it does

you can write thoughts about fortnite and the (former) costco churro. we don't store your data!!!

How we built it

i wrote code

Challenges we ran into

idk how to do html

Accomplishments that we're proud of

first bitcamp!!!

What we learned

i gotta prepare more and think of an actual project idea next time

What's next for fortnite battle pass

:)
",https://github.com/jzhu0717/bitcamp24,,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp","react, html5, css, javascript",Joshua,Zhu,joshuazjzhu@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,i learned more features about github,"University of Maryland, College Park",,University of Maryland - College Park,0,,,
The Better Bridge Card Game,https://bitcamp2024.devpost.com/submissions/507960-the-better-bridge-card-game,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:37,"Inspiration

We all liked the card game Bridge

What it does

Allows the user to play a modified Bridge card game against two computer opponents with a computer teammate.

How we built it

We built the project using Python, the PyGame library

Challenges we ran into

Unfamiliarity with the libraries, collaborative software development workflow.

Accomplishments that we're proud of

We got it working in a very short timeframe with a language/library we don't typically use

What we learned

We learned how to use PyGame, Git, Python

What's next for The Better Bridge Card Game

Making the betting system work and adding machine learning to the computer players
",https://github.com/Sonikyu/Bitcamp-2024-Better-Bridge,,,"python, pygame, github, love",John,Riganati,iamjpr3@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,"Github worked well for collaboration, PyGame was likely not the right choice for our project",University of Maryland College Park,,"University of Maryland - College Park, Hunter College High School",3,Max,Park,parkr.m465@gmail.com
TaskBuddy,https://bitcamp2024.devpost.com/submissions/507964-taskbuddy,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:43,"Inspiration

Duolingo

What it does

It detects completed tasks based on a database of completed task photos. Users lose points for not completing tasks within a set amount of time.

How we built it

Unreal Engine 5

Challenges we ran into

Getting AR app to run on my phone.

Accomplishments that we're proud of

What we learned

What's next for TaskBuddy
",,,"Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Gamification Hack - Bitcamp","unreal-engine, ar, mobile",Jeshua,SS,jazzyjeshua@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,I struggled to get Unreal Engine to comply with my phone even though it's fairly new.,Baltimore Polytechnic Institute,,Baltimore Polytechnic Institute,0,,,
PocketBot,https://bitcamp2024.devpost.com/submissions/507975-pocketbot,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:55,"Inspiration

Vikram was working on a startup that builds chatbot-like services for different companies called SynTag. He and Jugraj wanted to explore what it would be like to flip this paradigm and instead build chatbots for customers. This led to the idea of PocketBot, a chatbot for you to use on any and every website you visit. This removes your reliance on crappy chatbots from other websites and gives you the best experience no matter where you go. 

What it does

PocketBot is a Chrome extension that can be enabled on any webpage and can extract important information to help you with any questions you may have. Whether you want to find an email or phone number for a retail website or ask about NBA statistics on www.nba.com, this chatbot will find and return the information that is right for you in seconds. 

How we built it

We used an HTML/CSS/Javascript project outline to make the Chrome extension development as easy as possible. Web scraping services were abstracted to a next.js API hosted on Vercel with extra long-duration limits. The scraping API itself was courtesy of scrapingbee.com. Jugraj built a custom depth-5 content surfer to extract unique text from the top of the DOM. Intelligent responses were given by integrating with OpenAI's assistants API, which allowed for vector search into the scraped data. 

Challenges we ran into


The browser for our web scraper could only be used locally, since the chach file exceeded the limitations of Vercel. This prompted us to switch to an external provider's API.
Popular frontend development frameworks like next.js and React were hard to integrate with the chrome extension framework. Thus, we were forced to operate in the limitations of HTML/CSS/JS.
The Assistants API for ChatGPT is relatively new, so polling for chat completions was hard to implement given the restriction on FE frameworks
We were limited in the intelligence we could integrate with a chrome extension because of the strict Content Security Policies enabled. 


Accomplishments that we're proud of

First, we are proud that our chatbot works on pretty much any website you visit.
Second, we take good advantage of caching mechanisms on the client and server side, to ensure that loading your PocketBot takes just a split second if you've already seen the site before, OR EVEN if someone else has visited the site with this extension.
Third, we are proud of our UI development skills, given that we didn't use any frameworks and were minimal with just HTML/CSS/Javascript. 

What we learned


Jugraj learned javascript
Vikram learned HTML/CSS/JS again
We both learned how to make a chrome extension
There is always a way around your obstacles. Just need to be patient and think calmly.


What's next for PocketBot


Add a call-bot which calls the company on behalf of the customer using a Voice API
Add an email scraping service and an email generator
Add billing so we can monetize
Implement more security protocols

","https://github.com/jugrajsingh04/bitcamp-chatbot-final, https://github.com/jugrajsingh04/bitcamp-chatbot-api",https://youtu.be/767-XfsuAwM,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp","openai, vercel, scrapingbee, chrome, next.js, html, axios",Jugraj,Singh,jsingh18@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"I enjoyed working with the Assistants API (part of OpenAI). Making a Chrome extension was educational as well, and we both gained a deeper appreciation for building products from scratch. On top of that, we loved how easy Vercel was to use and debug with Next.js and loved the ease of using ScraperBee as well. GitHub was instrumental to our collaborative process.","University of Maryland, College Park",,University of Maryland - College Park,1,Vikram,Khandelwal,vikram@syntag.ai
saplng,https://bitcamp2024.devpost.com/submissions/507976-saplng,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:56,"Inspiration

saplng came about through our ideation process, where we knew we wanted to build something related to sustainability and gamification, but weren't sure what direction to pursue. When thinking upon our own experiences related to sustainability, we quickly realized that none of knew much about gardening, despite being mildly interested. With this in mind, we wanted to use this as a chance to not only learn about a topic we wanted to learn more about but also make this learning experience easier and better for other people like us. 

What it does

saplng encourages users to begin their new gardening journeys with its intuitive game interface and care tips. Upon adding their plants, users can view information essential to the growth of their plants along with recommended journey paths that provide guidance for new gardeners. Upon completing quests relative to users' plants and their specific needs, experience can be gained to acquire new badges, profile customization options, and reach the leaderboards to compete with local users. For a more thorough care plan, the walk through feature provides step by step plans with supplemental videos starting from set-up to the final stages of planting. With the help of saplng, people without a background in gardening can lead a more sustainable and plant-friendly lifestyle.

How we built it

We decided to build this hack using React Native, a framework that helped us develop the mobile app using JavaScript and React. We also used Android Studio Iguana to emulate a mobile device to run our software on. We were able to create our sleek user interface using custom, specially-designed art and a component-based architecture. 

Challenges we ran into

We ran into quite a few issues as we were developing our hack. First of all, none of us had created a mobile app before. Lots of research had to be done to figure out how we wanted to approach this daunting task. Another major problem was that none of us had used JavaScript before. Some of us had previously used similar languages, but it still took some getting used to.

Accomplishments that we're proud of

First and foremost, we're proud of our app's design. Everything you see on the screen was custom-made by our UX designer, Cat. All of the back-end development was done by Ryan and Jack. It took a lot of hard work and commitment to finish within 36 hours!

What we learned

We learned how to use JavaScript and about mobile app development from all angles. We also learned how to better collaborate in a group with differing skill backgrounds. This also helped us with target prioritization and time allocation.

What's next for Saplng

There are a lot of additions that we had in mind, but didn't have time to implement. A few of them include language support, profile customization, improved breadth and depth of guides, and video support. This is a project we really enjoyed and we would love to continue our work on it.
",,,"Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Sustainability Hack - Bitcamp","react, javascript, procreate, figma, android-studio",Ryan,DeCamp,ryan.e.decamp@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"We really enjoyed working in Visual Studio Live Share as a shared workspace for our code. It was super responsive to change from one person so it was very easy to code at the same time and ensure we were working effectively in the same program. In addition, we did much of our design in Procreate which was easy due to our team's experience in it. Finally, working in Android Studio Iguana for the first time was a little difficult with the learning curve (especially as all iPhone users), but over the weekend we got better at interacting with it.","University of Maryland, College Park",,University of Maryland - College Park,2,Jack,Burke,jburke18@terpmail.umd.edu
Weathering Waves,https://bitcamp2024.devpost.com/submissions/507980-weathering-waves,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 2:57,"Inspiration

Throughout the United States, it has progressively become harder and more expensive to become a homeowner. As young people who want to become homeowners later in life, we wanted to create a tool that can help prospective homeowners make more informed decisions.

What it does

Weathering Waves processes and analyzes a database of over 1,000,000 homes provided by Fannie Mae. Users can access this data in the form of graphs generated by our code and examine them for implications of hurricanes on foreclosure rates through heatmaps and bar charts, particularly focusing on Florida. 

How we built it

Our project was developed in two main stages. 
*Initially, we faced challenges in processing the vast dataset efficiently. We began by exploring database processing options like MySQL.
*However, we later found that using Python with libraries such as Pandas, Numpy, and Matplotlib in a Jupyter Notebook for data processing and visualization was more optimized for our goals. This allowed us to navigate through the extensive dataset while managing data effectively.

Challenges we ran into

One of the major hurdles we encountered was handling the large dataset provided by Fannie Mae. We initially explored database processing options but eventually settled on Python and its data manipulation libraries. We also spent a lot of time figuring out which aspects of the data to use. Learning to efficiently process and visualize data in Python was a significant learning curve for our team but ultimately contributed to our success.

Accomplishments that we're proud of

We are particularly proud of successfully processing a dataset of over a million lines and effectively learning and utilizing Python for data manipulation and visualization. Additionally, we successfully developed a website using the Mercury framework while scripting in Python. Our proudest achievements stem from the learning experiences gained throughout the project.

What we learned

Our project provided numerous learning opportunities, particularly in mastering Python for data processing and visualization. We also gained valuable insights into frontend and backend development, as well as the challenges of working with large datasets and integrating diverse technologies within a short timeframe.

What's next for Weathering Waves

Moving forward, we aim to expand Weathering Waves into an interactive application that can provide even more representations of the data we have to meet the user’s specific needs. To do this, we plan to add features like the ability to search or filter by location for home safety assessments or mortgage loan data based on location-specific risks from severe weather events.
","https://github.com/michelleehc/weathering-waves, https://1drv.ms/p/c/25b3b4e8c89ca336/EUr3QhESyDREum55RlZFf5UBMZpM6nJMwNlAOrAlklRTjA?e=CiwUrc, https://www.figma.com/proto/EA8Vj0TlreTLemLyetacfb/Weathering-Waves-Website?node-id=0-7&scaling=scale-down-width&mode=design&t=fJ5QmSgmJODBZJbz-1",,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best Use of APIs related to Housing/Climate Change - Fannie Mae, Best Financial Hack - Capital One","python, pandas, matplotlib, seaborn, databases, jupyter, mercury, figma, powerpoint, github",Carolyn,Lee,ckl62015@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"We used GitHub to collaborate on coding. Initially, it was challenging to setup and sync GitHub, but we were able to get the project working eventually.","University of Maryland, College Park",WEATHERING-WAVES.CO,University of Maryland - College Park,3,Dilan,Kaza,dkaza0001@gmail.com
Untitled,,Draft,Pending,Manage team,4/21/2024 3:02,,,,,,Shashank,Bhardwaj,sbhardw7@umd.edu,,,,,,,,0,,,
Health Check-Up,https://bitcamp2024.devpost.com/submissions/507988-health-check-up,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 3:05,"Inspiration

In honor of STI Awareness Week, April 14-20, we decided to make a health screener. Screening tests are used to check for possible health problems before they become a bigger issue. This helps catch issues early on, allowing for lifestyle changes or closer monitoring. Early detection can also allow for more effective treatment/preventative measures.

What it does

Our Machine-Learning Model to diagnose your current symptoms. Our UI features a questionnaire that inputs your information and symptoms to give you a prognosis of possible ailments you might have.

How we built it

We used machine learning to do the health screening aspect of the website, specifically using the random forest algorithm. We trained the model using data from link due to it having lots of data with numerous symptoms and the ailments associated with it. From this, the model will be able to predict what ailment a user may have from their symptom inputs.

Challenges we ran into

The biggest challenge we ran into was keeping the design of our UI/UX consistent throughout all of our website's pages.

Accomplishments that we're proud of

We are proud of coming up with a cohesive final product. Our team of two consists of a CS major and a Biology major so the coding levels of our group have much variation. Being able to work together and make one cohesive product was rewarding.

What we learned

We learned a lot about web development and machine learning from the workshops and throughout our processes.

What's Next for Health Screening

We hope to acquire up-to-date and bigger data sets to keep improving our MLM to give the most accurate possible prognoses. The ideal final goal would be to have our technology in the real world used by professional medical industries as needed.
",https://github.com/KylieGong/Bitcamp2024,,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp","html, css, flask, python, javascript, py",Julie,Lin,jlinx2004@icloud.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,The technology experience was good.,University of Maryland,zestybesty.club | We chose this in honor of the new lion that was debuted for the Terp's Lion Dance team at UMD.,"University of Maryland - University College, University of Maryland - College Park",1,Kylie,Gong,kyliegong123@gmail.com
Carbon Cadet,https://bitcamp2024.devpost.com/submissions/507989-carbon-cadet,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 3:05,"At Carbon Cadet, we're passionate about empowering individuals to take meaningful action against climate change. Our platform provides a comprehensive solution for calculating carbon emissions across various aspects of your daily life, including electricity usage, food consumption, travel habits, and water usage. By simply inputting your data, you can gain insights into your carbon footprint and identify areas where you can make positive changes. But we don't stop there. Carbon Cadet goes a step further by offering a pledge feature, allowing users to set personalized targets for reducing their emissions. Whether you're a student, a professional, or anyone in between, Carbon Cadet is here to support you on your journey towards a more sustainable future. Join us and be part of the solution!
","https://github.com/binny-chopra/carbon-cadet, https://github.com/log4jDominion/CarbonCadet/tree/main",https://youtu.be/1G0TDAgGlmc,,"angular.js, java, postgresql, h2, springboot, openai, javascript, typescript, html5, scss, css3, bootstrap",Binny,Chopra,159.binny@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,Great learning experience. I don't understand why students including us always short on time. There is always something to do. This is the BEST time I had in CP so far because it included a lot of learning and challenges. Thanks Bitcamp.,University of Maryland College Park,NA,,1,Shashank,Bhardwaj,sbhardw7@umd.edu
Budget Hero,https://bitcamp2024.devpost.com/submissions/507990-budget-hero,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 3:08,"Inspiration

Many college students struggle with their finances. It's hard to keep track of all of the incoming and outgoing steams of money, especially while juggling classes, social events, and everything else in life. That's why we decided to create a finance tracking tool, but with a twist.

What it does

Budget Hero is a simple web application that stores your transactions and gamifies the experience of saving money each day. Every single positive transaction allows Mr. Coin to attack your greatest enemies: bad credit, gambling addiction, and a super secret powerful boss. By losing money, your enemies gain their health back, and attack Mr. Coin in return. All of your transactions are stored on the CapitalOne NessieAPI and in a backend server.

How we built it

We built this application with NodeJS, React, and FastAPI. React / JS was used for the front end, and FastAPI / Python was used for the backend. We wrapped the CapitalOne NessieAPI with our own API to prevent sensitive data leakage without forcing users to generate their own API keys in a theoretical deployment situation. We stored data in python dataclasses, and wrote a converter function to serialize our data into JSON.

Challenges we ran into

One major challenge was integrating a game into our project. React is NOT good at creating game-like structures, so we had to creatively overcome this issue. 

Accomplishments that we're proud of

We are proud of this project's frontend UI/UX. We customized the art used in this project, and we are especially proud of the animation of the stock bad enemy guy.

What we learned

We learned a lot about frontend and backend development, web game design, and working as a team.

What's next for Budget Hero

In the future, we can further implement the NessieAPI to include more types of bank statement, like recurring payments, subscriptions, and much much more. We can also host the website in the future.
",https://github.com/cwdalziel/bitcamp-2024,https://youtu.be/Jztrv4u6J70,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best Financial Hack - Capital One","javascript, python, html5, css3, react",Carson,Dalziel,cdalziel@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,We would like to give a big thank you to Capital One for providing the Nessie API that we utilized for this project.,"University of Maryland, College Park",budgethero.biz,University of Maryland - College Park,2,Yuji,Wexler,yuji@terpmail.umd.edu
StudyGrapher,https://bitcamp2024.devpost.com/submissions/507992-studygrapher,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 3:12,"Inspiration

As students, we often struggle with managing our study time effectively, especially when preparing for exams. We decided to create a tool that would help visualize exam topics and their relative importance, making it easier to prioritize studying material that will actually appear on the test, and to allocate our study time more efficiently. We were inspired by the idea of using interactive data visualization to simplify complex information and make it more accessible.

What it does

StudyGrapher is an interactive web application that visualizes exam topics. Each node on the page represents a topic, with the size of the node proportional to the recommended study time. The topics within each node are ranked based on their relative importance in the exam, with 1 being most important and common on the test. Users can hover over a node to view detailed information about the topic, including its description, exam percentage, and study time. The graph is interactive, allowing users to drag nodes around.

How we built it

We built StudyGrapher using a combination of web technologies. The frontend was developed using HTML, CSS, and JavaScript, using the D3.js library for creating the interactive graph. We used Bootstrap for responsive design and styling. The backend was implemented using Node.js, which reads the exam topics data from a CSV file generated by the Claude API and serves it to the frontend. We used Git for version control and collaborated using GitHub.

Challenges we ran into

One of the main challenges we faced was organizing the exam topics data in a format that could be easily visualized using D3.js. We had to prompt engineer the Claude model to ensure that the CSV files we received were uniform in terms of formatting, and that the data was structured correctly for the graph layout. Another challenge was optimizing the performance of the graph, especially when dealing with a large number of nodes. Another challenge was the token cost, as we had to downgrade from the Claude 3 Opus model to the Claude 3 Haiku because we are broke.

Accomplishments that we're proud of

We are proud of creating a functional and visually appealing tool that addresses a real problem faced by students. StudyGrapher effectively visualizes exam topics and provides an intuitive way to prioritize study time. We successfully integrated various web technologies and libraries to create a seamless user experience. Despite the time constraints we were able to deliver a working prototype that demonstrates potential of data visualization in the education domain.

What we learned

Throughout the development of StudyGrapher, we gained valuable experience in working with D3.js for creating interactive data visualizations. We learned how to structure and manipulate data to create meaningful representations, as well as learning how to prompt engineer to get the results we wanted from the Claude model. Additionally, we learned that effective collaboration and communication with each other is very important.

What's next for StudyGrapher

We see many potential future enhancements for StudyGrapher. We plan to provide more data to the user, such as providing study material for each topic, as we would like to integrate machine learning algorithms to provide personalized study recommendations based on user preferences and performance. Furthermore, we would like to make the graph directed, and have related topics point to one another.
",https://github.com/alleny0o/StudyGrapher-2024/tree/main,https://youtu.be/qZMmtCCEzSw?feature=shared,"Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp","javascript, node.js, d3.js, anthropicapi, bootstrap, html, css",Ethan,Qiu,ecq6096@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,ClaudeAPI has a quickstart guide and a useful workbench. Very easy to use 10/10 would recommend,Winston Churchill High School,,winston chuchill high school,2,Allen,Yoo,ayoo123@terpmail.umd.edu
EDUHoot,https://bitcamp2024.devpost.com/submissions/508004-eduhoot,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 3:35,"Inspiration

The Ohio State University's National Student Financial Wellness Study found that 72 percent of college students experience financial stress. Even the members in our group have had struggles with managing their finances and we are sure that many other college students are facing the same issue. This is why we thought EDUHoot would be great for any college student who wants to start budgeting and get into healthy spending habits.

What it does

EDUHoot allows users to create a budget at the beginning of each month where you can create different categories and allocate dollar amounts for them. Users can also add different expenses throughout the month. For example if I spend $20 on groceries then I would enter that in here. Users also have the ability to enter in bills so that EDUHoot can send reminders about bill dates so that the user can make sure to pay the bill on time to avoid any late fees.

How we built it

We build our app using Flutter and Dart.

Challenges we ran into

One major challenge we ran into was coming up with a good plan and design for our app. Since all of our team members had never developed an app before, we struggled to figure out what data we wanted to collect from the users and how we wanted to display that data. Another challenge was figuring out which platform to use. There are so many platforms out there that let you develop apps but we had to find one that was free and was able to be downloaded on our computers.

Accomplishments that we're proud of

An accomplishment we are proud of is the delete button on our create budget and create expense. This took a long time to get working but we think it adds a polished look to that screen. Another accompaniment we are proud of is the overall UI in the different screens in our app. This includes the colors and icons on the bottom tab bar.

What we learned

We learned several things through the development of our app. We realized how important teamwork was. Last night, one of our team members was having trouble with the bill notification system, so we had to sit together and debug the code and come up with solutions to fix the problem. We also learned more about app development in general and got an idea for what app developers in the workforce do.

What's next for EDUHoot

There are a few things we wanted to add to EDUHoot but were unable to. First is a sign in page. We wanted to add a google sign in pop up that allowed the user to log in to proceed using the app. We tried to do so but we faced several errors and since we had other tasks remaining we had to drop this idea. We also wanted to add a pie chart for every month that displayed how much you spent in a given month compared to your budget. We got a pie chart working but we had an issue where the same pie chart was being displayed for every month so we could not include this. This is something we want to fix and add to our app in the future as it would make EDUHoot more visually appealing and user friendly. 
",https://github.com/Vpenmets/untitled1/tree/main/lib,https://vimeo.com/937321369?share=copy,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Financial Hack - Capital One","dart, flutter",Ananya,J,ananyaj1230@gmail.com,,Best App Dev Track Hack - Bitcamp,No,The experience was great. We used flutter it was a little difficult to use at first but as we went through it worked out pretty well,University of Maryland,no,University of Maryland - College Park,1,Vpenmets,penmetsa,viharikahari13@gmail.com
ParsePal,https://bitcamp2024.devpost.com/submissions/508008-parsepal,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 3:37,"Inspiration

The burgeoning popularity of Large Language Models and their wide array of applications drove us to leverage this technology in order to simplify the tedious process of manually searching through digital documents.

What it does

Using the given course catalog for the University Course Catalog Data Extraction and Query Challenge, users can ask a chatbot to search through this catalog based on queried phrases. Users can also use the chatbot to search through their own uploaded documents as well. To further tailor this experience specifically for each individual user, the user's chat history is stored and connected to the user's account for future viewing.

How we built it

We used the Next.js framework to create the frontend of the website using react and Flask to implement the backend. Users log in using PropelAuth technology in order to protect their information and so that their chat history can be stored using a Neon database and retrieved at a later date. We then used various libraries to parse information from the inputted PDFs and preprocess this data; vector embeddings were created for each sentence and stored in a Pinecone vector database. Vector embeddings were also created for user queries to the chatbot and compared with the vector database, returning the five closest matches with their respective page and sentence numbers. This information is used to retrieve the image of the corresponding page, which is then sent to the GPT-4 vision model in order to find the answer that best matches the user's query.

Challenges we ran into

We ran into some issues relating to confusion surrounding the exact parameters of the Xficient challenge. Issues with storing the images to be sent to the GPT-4 vision model were also challenging. 

Accomplishments that we're proud of

Successfully parsing information from the course catalog document to be used for the chatbot was a huge accomplishment for our team. Given the setbacks that we faced with this process due to some misunderstandings of the challenge instructions, finishing this capability proved to be a monumental achievement. 

What we learned

We learned how to successfully host both the frontend and backend for our web application using the Next.js framework. 

What's next for ParsePal

Looking ahead, ParsePal has two key improvements. First, we'll smooth out the chatbot's user interface to ensure a comfortable user experience. This will make interacting with ParsePal more intuitive and enjoyable. Second, we'll increase storage capacity for document images processed by the GPT-4 vision model. This allows us to serve a wider range of users by accommodating larger document volumes. Additionally, we will also work to streamline the document search and querying process so that users can more quickly find the information they need.
",http://parsepal.info,,"Best Moonshot Hack - Bitcamp, Best Use of PropelAuth - MLH, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group, University Course Catalog Data Extraction and Query Challenge - Xficient","next.js, python, flask, react, gpt-4, pinecone, neon, pdfplumber, propelauth, vercel, github",Fortune,Alebiosu,fortunealebiosu710@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"We had an overall smooth and positive experience with the technologies we used during Bitcamp. We used PropelAuth in order to handle user authentication and account management, which significantly streamlined what would have otherwise been an arduous process. We used Pinecone and GPT-4 for data processing, which had an API that was extremely robust, intuitive, and versatile.","University of Maryland, College Park",We went with parsepal.info because it's both descriptive and inviting,"University of Maryland - College Park, umbc",3,Neil,Hajela,nhajela1@gmail.com
MindMesh,https://bitcamp2024.devpost.com/submissions/508015-mindmesh,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 3:55,"Inspiration

With brain-computer interface technology like Neuralink gaining popularity, we sought to offer a non-intrusive alternative, with a focus on accessibility and downright convenience.

We figured that although the technology was interesting, it still had to solve a genuine problem, and we could provide the most value for users who need seamless integration of assistive technology into their everyday lives. 

What It Does

MindMesh monitors & interprets EEG brainwaves using the Neurosity Crown, allowing users to interface with IoT applications via thought. This includes controlling smart home devices such as lights and televisions just by using your imagination, potentially providing increased accessibility and support for those with visual/physical capabilities. 

How We Built It

Neurosity SDK

This allowed us to access raw, real-time EEG data streamed directly from the Crown headset. One of the key data-points we handled was ‘predictions’, a list that provides crucial user data such as the label of the user’s thought, along with a probability and confidence interval.

(simplified example) : 'predictions': [{'label': leftArm, 'probability': 0.867}]

Using this SDK, we developed controllers that perform data cleaning and interpretation. These classes interface with the client application, to determine when a POST request should be sent to the Unity server.

Unity Server

This is the backbone of the virtual environment, listening for requests from the client applications and determining the corresponding action to be performed in the virtual environment (dimming lights, turning on the A/C, etc.). 

Light Listener

This separate server application allowed us to communicate with the physical smart light bulb
for our demo, listening for POST requests from the client and then either turning the bulb on/off/brighter/dimmer.

Challenges We Ran Into

As soon as we had all of the individual parts working, our headset was severely damaged during a demo. This resulted in the loss of training data due to connectivity/syncing issues. 

This meant that we needed to find a different way to interpret partial & messy data, with a level of accuracy high enough to build a functional application. 

Accomplishments that We're Proud of

It seemed like with every new feature we wanted to add, we needed to figure out some scrappy, slapped-together approach that involved quick and collaborative brainstorming. We were all able to learn something new, ranging from languages to programmable light bulbs.

What We Learned

We learned that when working on a large-scope project with multiple evolving elements, communication is essential. Oftentimes we’d find out two people were building cannibalizing features, or one person is expecting an input from another component that wasn’t accounted for.

Although we each focused our work on specialized components, we realized that we needed to have a stronger understanding of how the system operated as a whole.

What's Next for MindMesh

The Neurosity Crown itself provides accurate data at a reasonable speed, but their SDK is relatively underdeveloped. We’re aiming to refactor the open-source SDK, allowing for more developer functionality such as subscription-multithreading, variable polling rates, etc.

Doing so will allow developers to build applications for more IoT devices, promoting a wider range of accessibility applications.
",https://github.com/morotioye/MindMesh,https://youtu.be/l0ELfyP4SCg,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp","unity, python, c#, web-sockets, neurositysdk, github, flask",Moroti,Oyeyemi,woonrie@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"We mainly used Unity and Neurosity SDK. Overall we had a great time however, it was difficult getting the different pieces of tech to communicate with one another properly.","University of Maryland, Baltimore County and University of Maryland, College Park",,"University of Maryland - Baltimore County, umbc",3,Darren,dong,darrend2@umbc.edu
JobGPT,https://bitcamp2024.devpost.com/submissions/508017-jobgpt,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 3:56,"Introducing JobGPT: Revolutionizing the job application process with the power of AI. Here's how we're transforming your job search:

Automated Applications: JobGPT uses your resume to intelligently scan, filter, and apply to relevant job postings on top platforms like LinkedIn and Workday.
AI-Enhanced Interactions: Our system integrates ChatGPT to answer any inquiries from potential employers that aren't directly answered by your resume, ensuring your applications are always engaging and responsive.
Time Efficiency: Streamline your job search process, saving you countless hours typically spent on manual applications.
Tailored Experience: With personalized job matching, JobGPT ensures that you’re applying to the best fit for your skills and ambitions.

Join us at JobGPT and empower your job search to be smarter, faster, and more efficient. Start landing your dream job today!
",https://github.com/jgmathew2/JobGPT,,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","react, electron, typescript, javascript, python, openai, selenium",Steven,Ha,stevenha75@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,I slept for one hour. So much debugging.,University of Maryland,No,"University of Maryland - College Park, Acton-Boxborough Regional High School",2,Johan,Mathew,johanmathew.george@gmail.com
Stalkr,https://bitcamp2024.devpost.com/submissions/508037-stalkr,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 4:28,"Inspiration

We always feel like we're wasting our days so we wanted to make an app that helps us track our time. We also introduced a social component to increase motivation.

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Stalkr
",,,,"svelte, supabase, typescript",aagraw,Agrawal,amol.ag+github@gmail.com,,Best App Dev Track Hack - Bitcamp,No,Auth is hard.,University of Maryland,,University of Maryland - College Park,1,James,Wang,jameswang905@gmail.com
Roomiez,https://bitcamp2024.devpost.com/submissions/508044-roomiez,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 4:34,"Inspiration

Living with other people is hard. They have different schedules, different needs, and have different levels of hygiene that may or may not match yours. I personally had issues with my roommates especially surrounding chores and bills, and an app like this would have simplified it a lot.

What it does

Our current iteration implements chore scheduling for all the roommates in a shared residence so they can add, delete, and view chores that need to be done and upcoming ones.

How we built it

We built 2 separate repos. One for the front-end and one for the back-end. The front-end is hosted on Vercel and is using React, NextJS, and Tailwind CSS. The front-end makes calls to our backend which is coded using Python and Flask, uses MongoDB as a database, and is also hosted on Vercel.

Challenges we ran into

One challenge for us was determining how to host our backend. We looked into Google Cloud, Heroku, and then finally decide on Vercel since it was simple and one of our members had experience with it previously. Another challenge was connecting the front-end and back-end together and required a lot of  debugging to make sure API calls worked.

Accomplishments that we're proud of

We got the website running despite a lot of hurdles and lack of previous experience with our back-end frameworks.

What we learned

We learned how to build a back-end API and integrate with the front-end.

What's next for Roomiez

We were not able to implement the billing and account aspect of the website due to time constraints, so that would be the next step. Afterwards, we would add additional features that would allow users to find potential roommates with preferred qualities and we could also integrate the platform with universities.
","https://github.com/ChuckVisuals/bitcamp24/tree/master, https://github.com/xilacxilac/bitcamp-backend, https://bitcamp24.vercel.app/",https://youtu.be/bzhRXx1pz0A,,"python, typescript, nextjs, tailwind, mongodb, vercel, flask",Calix,Tran-Luu,xilacxilac@gmail.com,,Best App Dev Track Hack - Bitcamp,No,Github and MongoDB made our development really simple.,"University of Maryland, College Park",,"University of Maryland - College Park, UMD",2,Dohyun,Kim,andrewbada24@gmail.com
bitcrafts,,Draft,Pending,Project details,4/21/2024 4:51,"Inspiration

We all come from very diverse backgrounds and realized we have a lot to offer each other and realized other cultures definitely had more to share as well.

What it does

Allows users to upload ""crafts"" which can be recipes or arts and crafts including materials and instructions.

How we built it

React front end, Spring Boot backend, Mongo DB database

Challenges we ran into

Most of our team had very little experience with React, and so it was a learning process for all involved.

Accomplishments that we're proud of

Fully functional backend with REST API connected to a Mongo DB.

What we learned

A lot about managing our time efficiently and delegating tasks.

What's next for bitcrafts

Refine the front-end, connect more of it to the back-end.
",,,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best DEI Hack sponsored by Fidelity - MLH, Best Use of PropelAuth - MLH,  Best Razzle Dazzle Hack - Bitcamp","spring, react, mongodb, propelauth",Daniel,Lugasi,dlugasi1@gulls.salisbury.edu,,,Yes,"PropelAuth was nice to use, it just was a bit difficult implementing into our project as our backend used Java and there was no native java support.",Salisbury University,,Salisbury University,0,,,
Shield Cortex,https://bitcamp2024.devpost.com/submissions/508054-shield-cortex,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 5:00,"Inspiration

As we looked through the available challenges for Bitcamp, we quickly found that the Bloomberg challenge was the most appealing for our team, as we all wanted to see what difference we could make with the defense data. We quickly found a room and got to work brainstorming across several whiteboards and comparing the different ways we could use this data for the greater good. As we searched for problems that we could address using this data, we realized that clarity with the public was the most pressing issue for this data at the moment. 

What it does

Shield Cortex starts by parsing through updated Defense Contract data straight from the DOD website and extracts the most important information straight to our website, where it will be charted on a world map for public viewing. This service helps keep a more informed and safe public by providing people with openly accessible information on DOD initiatives and how they are impacting the world. This will both help suppress the fears of people who formerly lacked exposure to this form of data, and provide opportunities for a more informed and democratic public to voice their opinions on US defense contracting. This can provide for not only a more informed America, but a more ethically progressive society across the globe.

How we built it

Backend development used a webscraper to scrape the DOD data which was then passed through our own Natural Language Processing Algorithm to extract key information from the contracts we needed to pass through our Google Maps interface. The Webscraper used Beautiful Soup and Selenium libraries and the Natural Language Processing model uses spaCy and implements a Named Entity Recognition model to extract key information. Front-end development worked with React to import the Google Maps interface and add interactive popups based on backend-passed data.

Challenges we ran into


Geolocation Data
npm vulnerabilities
Webscraping with Selenium and adjusting to dynamic updating of the website
Connecting the natural language model to Firebase


Accomplishments that we're proud of


Creating our own Natural Language Processing algorithm to extract key information from paragraph data
creating an interactive Google Maps UI to visualize data


What we learned


How to parse through data
Natural Language Processing
Web Scraping
Google Maps frontend development
How to share a repository with branches


What's next for Shield Cortex

We plan to continue growing by finding new ways to connect with activist groups and keep the public informed and happy with the way government is run. We will also continue to develop the interface with potentially other pages, as well as a scroll feature for different dates.
",https://github.com/riantiwari/ShieldCortex,https://youtu.be/gLk0Yn7OBh8,Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group,"sql, python, react, javascript, css, google-maps",Jack,Winkler,jack.p.winkler@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"We used GitHub to share all of our code repositories, which was a very helpful tool to merge frontend and backend all in one place. While we had a few issues with development in different branches and proper push/pull timing, it was overall a great learning experience and shared workspace for us.","University of Maryland, University of Maryland, Baltimore County",shieldcortex.co,"University of Maryland - Baltimore County, University of Maryland - College Park, UMD",3,Rohith,Koneru,rckoneru@terpmail.umd.edu
Connective,https://bitcamp2024.devpost.com/submissions/508062-connective,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 5:07,"Inspiration

Heading into a new semester can feel daunting, especially if you find yourself without familiar faces in your classes. Our app is designed to bridge that gap, connecting you with fellow students enrolled in the same courses.

What it does

By tapping into your Canvas profile, our app automatically fetches the list of courses you're enrolled in. It then matches you with other users who have signed up for our service and are taking the same classes. 

How we built it

Our app uses screen scraping to collect your course list directly from Canvas, which it then stores in an SQL database. By analyzing this data, we can efficiently match you with other users who are in the same classes, helping you connect with classmates effortlessly.

Challenges we ran into

We originally used Testudo to obtain class information, but the Testudo website was down on the day of judging, so we had to quickly develop a solution using Canvas.

Accomplishments that we're proud of

Our app offers a way for students to connect, collaborate, and enjoy their academic journey together. Whether you're looking to form study groups or just make new friends in your classes, our tool gives students a way to meet peers with similar interests and schedules.

What we learned

We learned React, Flask, SQL, and Selenium web scraping to accomplish this project.

What's next for Connective

We plan to make a more robust UI with more social features.
",https://github.com/daven-c/Course,https://youtu.be/OK9z4lBm2gs,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp","javascript, css, flask, selenium, sqlite, sql, sqlalchemy, react",Ben,Szeto,johndoejohndoe540@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"We used Testudo in our project, but it closed during our development of the application, so we had to work hard to finish our task.",University of Virginia,,"University of Virginia, Oakton High School, Langley High School",3,Daven,C,dchang1iz@gmail.com
Stranger Danger,https://bitcamp2024.devpost.com/submissions/508065-stranger-danger,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 5:11,"Inspiration

The inspiration for this project is to keep individuals safe from strangers through the use of cameras. Imagine you are sitting in your house and hear the bell ring in the middle of the night. Stranger Danger! will allow you to identify whether you know the individual at the door, as well as who it is, or if it is a stranger, in which case you don't have to open the door. All we need is a camera at the front door that can take a picture of the individual and upload it to our service.

What it does

Our project trains a machine learning model on sets of images for individuals to be able to identify these individuals in new images generated by the camera feeds at peoples' front doors or wherever they need protection. This machine learning model will be able to search all of its training information to see if it knows who the person is in new image based on all of its old images. If the answer is a no, then the user receives a Stranger Danger! message. Else, the name of the identified person is received.

How we built it

We built the machine learning model using a set of Python libraries that save the training data in dictionaries of encodings. These dictionaries are then searched every time a new image is sent in, to identify all of the people in this new image. Then, bounding boxes are drawn around all of the identified faces, with their names in the bottom left of the bounding box. The box will be green if identification was successful, else red.

Challenges we ran into

The main challenge we ran into was handling the case of multiple faces being in the same picture. We dealt with this by splitting each face into its own bounding box that will be analyzed separately, and then we combined the results back together. If at least 1 of these boxes contains a stranger, then we just say Stranger Danger!

Accomplishments that we're proud of

We are proud of developing a working machine learning model that can analyze images. Previously, we have only worked with data-based machine learning models, so expanding to using images was a cool thing to try at Bitcamp!

What we learned

We learned how to use a variety of technologies like Anvil to create a UI and numerous Python libraries like pickle and face_recognition.

What's next for Stranger Danger

The next steps are to improve the model by providing it with even more training data, so that the accuracy improves. Also, we want to make a better UI so that interacting with the model becomes even smoother.
",,,"Best Bitcamp Hack - Bitcamp, Best Social Good Hack - Bitcamp, Most Philanthropic Hack - Bloomberg,  Best Razzle Dazzle Hack - Bitcamp","python, jupyter-notebook, machine-learning, anvil, computer-vision",Rhizling,Sakhamuri,saisakhamuri10@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,GitHub was good at version control. Python was good for writing all of our machine learning code. Anvil was good for making our UI.,University of Maryland College Park,,University of Maryland - College Park,2,Sahit,Kadthala,kadthala16@gmail.com
OptiGuard,https://bitcamp2024.devpost.com/submissions/508075-optiguard,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 5:24,"Inspiration

Safety and security are things that we expect to be common in the United States. However, in many public areas that sense of peace has vanished. Over the last 10 years, 2023 had the most major crimes, arson, robbery, and homicide, among others by almost 300 more cases than the next closest year. Existing alert systems have a latency of 10-15 minutes between an active threat and an alert being sent out. Our project OptiGuard aims to effectively solve this major issue with its full-stack computer vision application. We can instantly detect violence and alert users before a threat escalates. We do this by using a series of custom Mobilnet Bi-LSTM and YOLO v5 face detection Convolutional Neural Network to identify violence in real-time and track the individuals involved across multiple live feeds. Additionally, we leveraged homography mapping and represented the aggressors in real time on a geo-spatial map tracking their real-time movements. 

What it does

OptiGuard takes two or more live feeds and both detect violence while also tracking the people involved in the violence across multiple feeds. It then takes the video feed and creates a geo-spatial map that shows real-time updates of the assailant’s and victim’s location as they move. Tracking the same people across multiple camera angles is something novel that we built from scratch as there’s no publicly available code to do so. In essence, the idea is that our project is replicable for a large host of CCTV cameras and using multithreading we can integrate violence detection, and tracking across a large public space. 

Cross-Camera Tracking: It tracks assailants and victims across different camera angles. Even if people are detected, if their faces aren’t identified during a violent attack, they will be ignored. Additionally, individuals who were in frame during a violent attack, but weren’t detected to be engaged in a violent action aren’t tracked by a bounding box either. 

Mapping: It takes in a camera feed and is able to project the assailant’s and victim’s location onto a geo-spatial map. Based on the camera feed, it’s able to update the location of the aforementioned people in real-time. 

Multiple Live Streams: It concurrently runs two live streams and runs multiple models simultaneously. Users can see the live feed of each camera and also the outputs of our application.

People Detection: It detects people’s faces in both live streams at the same time. Moreover, it tags and monitors people involved in a violent conflict across cameras by tagging the person with a label and a bounding box. It would not tag a person in the second feed if they were not involved in the violence in the first feed. 

Violence Detection: It takes in a live feed and is able to detect where there’s violence or not. 

User Interface: We built a user interface that lets administrators track violence across an aesthetic display of live feeds. This includes video playback of the violent incident, live feed of the incident area, and switching between different cameras available. Additionally, the general public is allowed to upload images with descriptions when they see violence, aiding our models and can report feedback. We have a notification system that will ping users' phones when violence is detected near their local area.

How we built it

Detecting Violence: We use a 16-frame sliding window technique to use as input data for our Mobile-Net Bi-LSTM neural network that identifies violence from images. 

Mobile-Net Bi-LSTM: We trained this neural network on the RWF-2000 dataset to identify violence in videos. It consisted of an input layer, a Mobile-Net layer, a Bidirectional-LSTM layer, and then a sequence of repeated dense and dropout layers. This enabled us to utilize our camera threads and leverage our model to accurately detect violence in a live feed. 

Violence Metric: Based on the confidence level outputted by the Mobile-Net Bi-LSTM on the current frame, if the confidence level is above 0.3, we were able to output a percentage representative of how violent the situation is (0-100). We save this percentage for administrators to access in the future. 

Tracking assailants across different cameras: We captured individuals' faces based on the violence metric through a pre-trained YOLOv5 model for face detection that we modified for our own purposes. This included additional capturing for more than one face and visual display with naming. We cut bounding boxes detected by the YOLO model to store faces that we could compare via the SSIM metric from the Sci-Kit Image framework. We don’t store repeat faces by checking the SSIM metric of face cropped via the YOLO model with all other faces already stored, saving memory and runtime. Thus, if faces appear in the other live feed, we were able to compare the faces appearing to the faces stored from the violent interaction to determine if they were involved in the violent interaction or not. This way, we don’t tag innocent bystanders. 

SSIM: We use the SSIM metric to determine how similar two faces are. It’s a basic metric we used to construct our model and compare faces against each other standardizing the faces that our live feed scans and accurately comparing faces to determine individuals to track into another camera angle. 

Concurrent camera live feeds/multithreading: We used multithreading to handle running two live streams concurrently. Moreover, each livestream had a YOLO model running in addition to one of them running the violence detection model. After using the SSIM metric to only store unique images of the assailant and the victim, we use the metric on the detected faces in the other live stream to check if it’s a face of the assailant or the victim. If it is, we draw a bounding box; otherwise, we don’t. 

Visualization: Using OpenCV, we were able to output the live feeds from each of the cameras. Moreover, we were able to place the bounding boxes from YOLO and the result of the violence detection model.  

Homography/geo-spatial mapping: We isolate the person we focus on via tracking assailants across different cameras. For demo purposes, we use arbitrary coordinates, but it can easily be modified so that we base coordinates based off of which camera we are looking at. Then, we used a homography mapping to project the person’s location onto a 2D geo-map for all people involved in the violent interaction. As the person moves in the camera, their location updates in real-time. 

Challenges we ran into

Training violence-detection: The model took a while to fine-tune and train given the large dataset. Once we switched to GPU computation, it made it much faster.

Concurrent Model Use: Originally, running the YOLO models at the same time as the violence detection model was too computationally expensive for our laptops. By running the two YOLO models through our GPU, we were able to get both working at once. 

Tracking across cameras: There is no publicly available approach to track individuals. We had to come up with a novel solution comparing values using an SSIM metric function and comparing live faces. The difficulty with this approach was figuring out how to properly store and compare faces (and not storing repeat faces). We did this by ensuring there were no duplicates and saved runtime by cropping faces and comparing them to the existing faces we store in our model (this is done through the yolov5 face detection model we leveraged). 

Accomplishments that we're proud of


Creating our own novel tracking framework across multiple camera feeds
Training and fitting a Mobile-Net Bi-LSTM to accurately detect violence occurring in a live feed. 
Integrating our mobile-net model to our full stack application
Mapping the aggressor and assailant to geo-spatial coordinates and tracking them in real-time by feeding interpolated positions. 


What we learned


Running multiple models on concurrent live streams via multithreading
Training our own Mobile-Net Bi-LSTM neural network
Performing facial recognition across different camera angles
Using homography mapping to project geospatial locations


What's next for OptiGuard


Database: If we use a database, we can store much larger amounts of people. Over time, the number of people involved in violent interactions goes up. This way, it would be more viable in larger public settings like stadiums or streets. Essentially improving our model's testing accuracy and more accurately detects faces from a larger group of people. 
Tracking: We would like to improve our tracking effectiveness and efficiency over the two cameras using convolutional neural networks, which are more accurate. This can be done with better technology and more resources.
High Frame Integration of Live Feeds with UI: We hope to feed live camera frames to our hosted server and quickly categorize and assess those images to be displayed on our webpage in an efficient manner. This can be done with access to more resources instead of running all of these models on one laptop.

","https://youtu.be/ntlUSdo0CfA, https://github.com/sakethc4/OptiGuard/tree/main",https://youtu.be/aeYlPbdsk_s,"Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Most Philanthropic Hack - Bloomberg","python, tensorflow, keras, sci-kit-image, numpy, opencv, javascript, css, html, pil, yolo, pytorch, leaflet.js",Saketh,Chintalapati,saketh.c4@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,We had an enjoyable experience learning about machine learning and integrating it with complex technologies.,University of Maryland - College Park,,University of Maryland - College Park,3,Vishal,Kotha,vishalrk0922@gmail.com
TriAd,https://bitcamp2024.devpost.com/submissions/508079-triad,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 5:26,"Inspiration

As four students going into the next school-year looking for off-campus housing, we quickly became frustrated with the lack of options for viewing and touring that many apartments had. With the implementation of TriAd, it would greatly improve buyers' experiences — not just for potential real estate tenants, but for every product thinkable.

What it does

TriAd takes in a user-inputted video scanning a 360 of a space or around an object which is then taken and converted to a 3D modeled simulation. This simulation is then converted to be viewable in virtual reality through an Oculus Quest or other compatible devices, allowing the user to view a space or object with the detail and scale as it would appear in-person.

How we built it

TriAd was built using the latest technologies and novel research programs to revolutionize the way advertising is done in 3D. Triad works in three parts: a frontend-server framework, a 3D reconstruction software hosted on a Linux Environment and a Mesh to VR program that converts the 3D model into a VR where customers can view the product in 3D. The detailed description is explained below:

Front and Backend Frameworks: React front end combined with a FastAPI backend built on Python. The backend connects to a MongoDB database where the users initial video advertisement is placed into MongoDB Database using Mongo

Image Extraction: The video is then pulled from the MongoDB Database and is ran through a software called FFMPEG where it splices the video into seperate images making it more optimal to run feature extraction and 3D reconstruction.

Feature Extraction: The spliced images via FFMPEG are then ran through COLMAP, a AI library used for intelligent feature extraction from images. The feature extraction allows us to determine the relative positioning of each frame in context to the video to make 3D reconstruction more accurate.

3D Reconstruction via NeuralAngelo: NeuralAngelo is a novel 3D reconstruction library built by Nvidia Labs. Our group utilized this advanced software that is often used for research purpose and applied it to our project. NeuralAngelo is trained on around 350 epochs and 20,000 iterations (this is relatively small but the best we could do given our hardware) using the images and the feature extracted via COLMAP.

Isosurface Extraction: Finally after a 3D reconstruction is built via Nvidia's NeuralAngelo library, we conduct a Isosurface extraction which converts the 3D model into a mesh with textures that can then be viewed with in a 3D library.

After receiving the model as a PLY file, we utilized Aspose 3D API to convert the PLY file into a STL file. Next, we converted the STL file into a more advanced FBX file using Blender headless scripting. Then, we used Blender headless scripting again to send the FBX file straight into the Oculus. 

Challenges we ran into

Throughout our testing and development, we continuously ran into one problem: hardware limitations. With the intensive hardware requirements of NeuralAngelo and its' strenuous runtime tasks, we quickly found that the hardware available at our disposable was able to do the job, but at a very slow rate, taking just over two hours just to produce a 3D reconstruction without texture, color, or intensive detail. Due to the great amount of time that NeuralAngelo originally seemed to take, we spent a lot of time debating over whether to stick to NeuralAngelo for our reconstruction library or choose an alternative like Nvidia's other instant neural graphics primitives library, but ultimately decided to continue with NeuralAngelo. Because of time constraints, we first turned to using virtual machines with vGPUs, but eventually we found that requests for access to ones with powerful enough hardware weren't able to be fulfilled within the 24-hour time period or were reserved strictly for businesses. Additionally, of the one virtual machine that we were able to secure, there was no GUI available and as a result caused certain programs to run inefficiently, forcing us to make do with what we had at our disposal. 
In our attempts to recreate the 3D models generated by NeuralAngelo in virtual reality, we also faced challenges in our methods at first; using Unity posed many challenges and led to a dead end in terms of complexity of GUI usage and other factors, ultimately leading us to use Blender headless scripting to send to the Oculus, which we also had a fair number of connectivity/running issues with. 

Accomplishments that we're proud of

We are proud of a project that combined so many multifaceted technologies. We used hardware, machine learning, Nvidia GPUs, Linux and Windows environments, databases, a multitude of frameworks, and so many other new technologies and got them to seamlessly integrate with each other to create a creative and unique project.

What we learned

We used a LOT of new technologies in this project. It was our first ever time building and training a model using a NVIDIA GPU and using softwares such as COLMAP, NeuralAngelo, Instant-NGP. Additionally, it was the first time we deployed a project on a linux environment and used a relational database such as MongoDB integrated into our project. This was also our first time using hardware and specifically the Oculus VR headset. None of us used hardware before so this was our very first time using it and integrating it into our project.

What's next for TriAd

Next for TriAd is deploying on a more powerful VM. We were limited by laptop hardware to run these complex and computational expensive programs and as such the project was way less accurate than what it could be. Additionally, we envision a world where our 3D applications can apply to more than just advertisement but in spatial mapping, industrial design and many other applications. 
",https://github.com/ShaunakS05/VRCard,https://youtu.be/ujkpmZcjAGE," Best Hardware Hack - Bitcamp, Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Most Philanthropic Hack - Bloomberg, Best Financial Hack - Capital One, University Course Catalog Data Extraction and Query Challenge - Xficient,  Best Razzle Dazzle Hack - Bitcamp","python, react, fastapi, neuralangelo, mongodb, colmap, vr, oculus, aspose",Bryan,Xiong,bryan.xiong234@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"We had a lot of valuable information that we used for vital parts of our project, including Mongo and GitHub in particular.",University of Maryland College Park,,University of Maryland - College Park,3,Brennan,Pan,brennan.pan3@gmail.com
Graphical Investment Strategic Planning,https://bitcamp2024.devpost.com/submissions/508091-graphical-investment-strategic-planning,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 5:37,"Inspiration

It is not uncommon to give children U.S. Government Savings Bonds as gifts, or to discover troves of Government Bonds when settling the estates of older relatives.  For generations of investors, U.S. Government Savings Bonds have offered a steady, dependable, long-term investment strategy with virtually no-risk.  However, savings bonds might be the most profitable investment at all times over the course of their three-decade investment period. Especially today, in this age of high interest rates, older bonds, ""locked-in"" at low interest rates might be more profitably invested elsewhere, even in other very low (virtually no-risk) investment options, like FDIC-insured accounts (variable interest rates) or more recently issued bonds (lock-in a higher rate for another 30 years).  Determining the present- and future-values of bonds can be done using a the US Treasury website, but it is notoriously poorly designed and requires tedious manual labor to type in serial numbers and issue dates for a large stack of bonds. Further, from only that website, it is more difficult to understand the potential bond values in the future, at a glance, especially in comparison to other options.  An easier way to (1) automate data entry into the US Treasury website, useful for large troves of old bonds, and (2) understand their value in comparable low-risk investment options adds great value to those seeking low-risk, long-term investment options.

What it does

This application does two main jobs:
(1) Leverages optical character recognition (OCR) to detect text on a U.S. Government saving bonds for easy submission to integrated web app.  This greatly speeds inputting of large stacks of bonds accumulated by grandparents in safe deposit box.
(2) Enables easy ""at-a-glance"" visualization of asset values over time and compares between various options, including maintaining the Savings Bond through its maturity, or redemption (including early redemption fee penalties), and switching the investment allocation to an FDIC-insured high-yield savings account or certificate of deposit or other fixed- or variable-rate deposit accounts.  This functionality makes strategic assessments of low-risk investments easy and presents quantitive, logic-based metrics to plan changes in investment strategy (e.g., in response to for changing monetary policies).

How we built it

Uses web scraping (Beautiful Soup) to automatically read the current Federal Reserve interest rate as well as interest rates from leading banks.
Using open OCR and computer vision technologies to read text from images of bonds.
Automatically submits bond information to US Treasury website, via a custom-made web app portal, and automatically receives a reply with bond statistics.
Uses response data from US Treasury website to determine past, present, and future bond values, and presents a dynamically generated plot to visualize the information.  Graphically compiles and compares different investment options to weigh options against keeping or redeeming bonds or Certificates of Deposit (CDs).
Hosted on a locally running web server.

Challenges we ran into

Django makes hosting static web content somewhat difficult but, since necessity is the mother of invention, this challenge spurred the development of live, on-the-fly, dynamic generation of plot visualizations, which is one of the greatest assets of this application.

Accomplishments that we're proud of

The dynamic plotting is very slick, as-is scraping the current interest rates from publicly accessible web pages.
Querying the US Treasury website with custom data is incredibly useful functionality.

What we learned

Never used Django before.  It has a shallow learning curve (i.e., high effort, low gains), but it is well-suited to this type of task to create dynamically generated web content and interacting with other web portals.

What's next for Graphical Investment Strategic Planning

Expand the functionality of the computer vision OCR to enable multiple bonds within a single image (i.e., parallelize the data collection and data processing).  This has a direct application to the sad and not uncommon task of Estate Executorship.
",https://github.com/Jeffrey-Schwartz/GraphicalInvestment/tree/master/bond_calculator,,"Best Social Good Hack - Bitcamp, Best Financial Hack - Capital One","python, django, open-cv, html5, javascript",Jeffrey,Schwartz,jjschwar@umd.edu,,Best App Dev Track Hack - Bitcamp,Yes,"The workshops were shockingly poorly planned.  It was almost insulting, as an audience member, to be subjected to such poorly planned/executed workshop presentations (specifically, machine learning).",University of Maryland,,University of Maryland - College Park,0,,,
EVolution Betting Webapp,https://bitcamp2024.devpost.com/submissions/508104-evolution-betting-webapp,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 5:58,"Inspiration

Our friends have been describing their adventures with sports betting and we wanted to research if there were any computer science solutions for finding mathematical strategies to win better money.

What it does

It calculates EV betting for different sportsbooks to come up with the best bets to place.

How we built it

NodeJS, React, Python with FastAPI, GitHub, built our own API, accessed an external API called ""The Odds API""

Challenges we ran into

Server issues, hosting issues

Accomplishments that we're proud of

Calculating EV and displaying live data from the server

What we learned

How to do server-based cloud hosting of a WebApp

What's next for EVolution Betting Webapp

Adding more types of bets and more statistics to help develop strategies
","https://amishcodingsociety.us, https://github.com/spcoughlin/BitCamp2024/",,,"node.js, react, python, fastapi",Alec,Agayan,alecagayan24@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,It was awesome!,"University of Maryland, College Park","amishcodingsociety.us, because we thought it was creative and funny",University of Maryland - College Park,2,Tal,Ledeniov,ledeniov@umd.edu
ContractScope,https://bitcamp2024.devpost.com/submissions/508111-contractscope,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 6:06,"Project Story: Automating Government Contract Analysis with Custom NLP Model

About the Project

Our project came about from the need to efficiently analyze a large volume of government contracts from the Department of Defense (DOD) website.  We aimed to streamline this process by building and training our own Natural Language Processing (NLP) model, leveraging the robust infrastructure of the AWS ecosystem and newer ML models such as BERT

Inspiration

The inspiration for this project arose from recognizing the time-consuming nature of manually parsing through large blocks of text whether that be long articles or government contracts. We saw an opportunity to harness the power of NLP and machine learning to automate this process, allowing for quicker and more accurate analysis of contract data.

What We Learned

Throughout the development journey, we gained valuable insights into various AWS services and machine learning techniques. We deepened our understanding of AWS Lambda and EventBridge for scheduling tasks, AWS SageMaker & API Gateway for model training and deployment, and Python + React TypeScript for the backend and frontend work

One of the key lessons we learned was the importance of data preprocessing and model optimization. We experimented with different NLP architectures and fine-tuning strategies to ensure the accuracy and efficiency of our model while still being robust and lightweight.

Building the Project

Our project centered around React TypeScript on the frontend and Python + AWS to process and manage the data passed into our frontend. The overall AWS ecosystem centered around AWS Lambda and EventBridge which triggered a scheduled function to scrape the latest contracts from the DOD website. These contracts were then fed into our custom NLP model deployed on AWS SageMaker via API Gateway .

Once analyzed, the contract data was stored in two DynamoDB tables, providing a scalable and reliable storage solution. This data was then seamlessly accessed and presented on our frontend interface, providing users with valuable insights into government contract details.

Challenges Faced

One of the main challenges we faced while creating our project was deploying our NLP model onto our AWS ecosystem as there was simply too much data to process locally. We struggled for a long time uploading our model to Sagemaker and creating an endpoint for it.

Additionally, with the complexity of some of the contracts, it required a lot of time manually parsing and inspecting to create our testing and blind dataset to evaluate our model against current LLMs. 

Lastly, integrating and synchronizing across numerous AWS services required a lot of additional AWS features that we had never used in depth such as IAM.

Accomplishments that we're proud of


Created, trained, and deployed a NLP model to analyze government contracts that performs better than ChatGPT
Developed a working AWS ecosystem to automatically parse data from the DOD contracts website , feed into our LLM model, and then update our frontend daily.
Created a sleek UI to view insights into our NLP model.


Design Diagram


",https://github.com/TylerK4832/joebiden,https://youtu.be/_HmigEf25Q4,"Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Use of Taipy - MLH, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group,  Best Razzle Dazzle Hack - Bitcamp","typescript, python, react, amazon-dynamodb, s3, amazon-web-services, lambda, eventbridge, sagemaker, beautiful-soup",Brian,Lau,blau1@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"We used React TypeScript and an AWS ecosystem (Lambda, CloudWatch, Sagemaker, API Gateway)",University of Maryland: College Park,N/A,"University of Maryland - College Park, University of Maryland - University College",3,Tyler,Kempton,tk90005@gmail.com
UMD Map Shortest Path Finder,,Draft,Pending,Project details,4/21/2024 6:16,"Inspiration

What it does

It searches through every building on UMD currently inputted

How we built it

Challenges we ran into

We're a very inexperienced team, all being freshmen. We started our official project very late and struggled to learn Dijkstra's algorithm. 

Accomplishments that we're proud of

What we learned

What's next for UMD Map Shortest Path Finder

Inputting every location on UMD into the project
",,,,java,Henry,Gardiner,henrygdnr@gmail.com,,,,,,,University of Maryland - College Park,0,,,
Imparsonator,https://bitcamp2024.devpost.com/submissions/508131-imparsonator,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 6:24,"Inspiration

As freshmen students at the University of Maryland, we understand the struggle of striking the right balance and not succumbing to the pressure that comes with college. We created Imparsonator to analyze different factors that can play into possible dropout reasons. We are empathetic to struggles that we often see from our classmates, and we wanted to expand past our vision to analyze more diverse data on reasons why college students drop off.

What it does

By providing analytical details through our logistic regression model which helps identify communities in danger of dropping out and an NLP prompting model based on GPT which queries our SQL database, Imparsonator can provide relevant information on the trends of college dropouts. 

How we built it

NLP model:
1) SQLite
2) GPT (OpenAI)
3) Dotenv

Other ML models:
1) Logistic regression (multimodal + bimodal)
3) sklearn, mathplot.lib, & numpy
2) CSV

Parsonator's website:
1) HTML
2) Bootstrap API
3) Python API
4) Javascript/CSS

Challenges we ran into

Challenges included analyzing our dataset which had unnecessary information not relevant to our result and being able to convert to different extensions for different uses. In addition, we often switched between multimodal and bimodal models due to cost and efficiency. Finally, adding both the NLP model and logistic regression into a usable website 

Accomplishments that we're proud of

We are proud of our successful implementation of an NLP model that utilizes prompting to give us any information related to our database. We are also proud of the flexibility Imparsonator has to adapt to different datasets as well as our several different models that are used to analyze our database. 

What we learned

We learned that data processing can vary depending on what type of ML model is used as well as how the conversion of data for certain APIs. In addition, we learned different prompt techniques for the best result in both SQL and GPT. 

What's next for Imparsonator

1) Implementation of OpenAI: We hope to have better categorization of our data to accomplish smoother prompting and opportunity for more predictive analysis. 
2) Machine learning: We wish to implement the KNN (K cluster nearest neighbor) for the multimodal regression of the data which will allow us to make college student predictions on students not
3) Website development: Finally, we would like to increase the usability of the user experience by adding more features including the ability to analyze other datasets and give better visuals that directly relate to the user's prompting. 
",https://github.com/SalSaloni/Bitcampers.git,https://vimeo.com/937368637?share=copy,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Most Philanthropic Hack - Bloomberg, Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group","python, sqlite, gpt, html, machine-learning, logistic, dotenv, bootstrap",Saloni,Gupta,salonigupta12405@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"Python API, GPT, dotenv, Bootstrap, HTML, sklearn, mathplot.lib, numpy, &, Github",University of Maryland College Park,No,"University of Maryland - College Park, University of Maryland - University College",2,Anusha,Sharma,asharm50@terpmail.umd.edu
Parsinate,,Draft,Pending,Project overview,4/21/2024 6:34,,,,,,Anusha,Sharma,asharm50@terpmail.umd.edu,,,,,,,University of Maryland - College Park,0,,,
NeuroNavigate,https://bitcamp2024.devpost.com/submissions/508142-neuronavigate,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 6:39,"Inspiration

Our inspiration for creating NeuroNavigate stems from reading that the number of special education teachers declined during the coronavirus pandemic. We wanted to develop a tool that could help fill this gap and provide support for children with autism, ensuring they can still access valuable resources and practice important skills even when teacher availability is limited.

What it does

Our app provides students with autism a platform to practice conversation skills and emotional recognition. Through interactive exercises and feedback, users can enhance their social abilities, even when direct teacher guidance is scarce. This tool aims to empower students, offering them a supportive environment to develop essential life skills independently.

How we built it

The development of NeuroNavigate involved integrating advanced technologies including Python, Flask, OpenCV, and Mediapipe for facial and eye tracking, Whisper for real-time speech transcription, and OpenAI's GPT for simulated conversations. The core emotional recognition capability is powered by a VGG19 neural network model trained on the FER-2013 dataset, adapted for real-time interaction. This model uses weights trained to recognize facial expressions from grayscale images, enabling the app to understand and react to the user's emotional states during gameplay.

Challenges we ran into

We encountered several challenges, including the complexity of accurately tracking eye movements and facial expressions in varied lighting and dynamic conditions. Ensuring the app's interfaces were intuitive and engaging for children also required extensive testing and iteration. Furthermore, managing data privacy and security, given the sensitive nature of the information processed, was a critical area of focus.

Accomplishments that we're proud of

We are particularly proud of the app's ability to dynamically adapt to each child's interaction, providing a highly personalized learning experience. The positive feedback from initial trials with educators and parents has been incredibly rewarding. Moreover, our success in integrating complex technologies to work seamlessly in real-time applications has set a new standard for what we can achieve in educational technology for special needs.

What we learned

This project deepened our understanding of both the technological and psychological aspects of designing educational tools for children with autism. We gained insights into the importance of user-centered design and the effectiveness of integrating real-time feedback mechanisms. Additionally, the process highlighted the value of interdisciplinary collaboration, bringing together fields such as AI, machine learning, psychology, and education.

What's next for NeuroNavigate

Our next steps involve applying to Y Combinator to gain access to critical resources, mentorship, and funding opportunities. We aim to refine NeuroNavigate through further pilot studies and expand its reach into new markets by adapting the app for different languages and cultural contexts. Our long-term vision is to explore applications of this technology for adults with autism and other communication challenges, ultimately aiming to make a global impact.
",https://github.com/AwesomeCuber6543/BitCamp,https://youtu.be/ZqIpjJDmcwo,"Best Bitcamp Hack - Bitcamp, Best Social Good Hack - Bitcamp, Most Philanthropic Hack - Bloomberg","python, swift, uikit, flask, machine-learning, google-web-speech-api, neural-networks, convolutional-neural-networks, multithreading, kaldi, vosk, vgg19, openai",Yahia,Salman,yahia.salman.04@gmail.com,,Best Machine Learning Track Hack - Bitcamp,No,"Mediapipe:
Mediapipe provided us with cutting-edge tools for facial and eye tracking, which were integral to our application. We found it slightly challenging to integrate and optimize it alongside our other systems due to its comprehensive yet complex configuration options.
VGG19 and FER-2013:
Training our model on the FER-2013 dataset using the VGG19 architecture allowed us to achieve high accuracy in emotion recognition. Fine-tuning and adapting VGG19 to work effectively with grayscale input was complex and time-consuming, particularly when trying to optimize processing speed without sacrificing accuracy.",George Mason University,No.,George Mason University,1,Amaya,McBride,amcbrid4@gmu.edu
Foragr,https://bitcamp2024.devpost.com/submissions/508145-foragr,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 6:42,"Inspiration

We were inspired by apps such as Cats and Soup which gave us the idea for the logo style and the camping theme that we thought matched well with the bitcamp theme.

What it does

It takes the location the user puts in, then uses a database of recipes and gives the user 2 recipes for the state they selected with the ingredients foraged in that state.

How we built it

We built it using react framework and arrays in javascript, along with react-router to link the pages together. Then we completed the CSS for each page to make it look better.

Challenges we ran into

At first the links for react-router were not working, it took us many hours to get it working again.

Accomplishments that we're proud of

Finishing the page linking for the firs time with no experience.

What we learned

How wrapping and paths work in the context of React and HTML.

What's next for Foragr

We plan to implement more ChatGPT API features in the coming days or weeks.
",https://github.com/rh0214/Bitcamp2024FINAL,https://youtu.be/OY4ubROaVVo,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Sustainability Hack - Bitcamp","react, css",Ethan,Zhang,etzhcoder@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,"As a first time react user, the platform was a little harder than anticipated, however after we learned the functions and processes we got the hang of it.",Marriotts Ridge High School,,Marriotts Ridge High School,1,Raihan,Hasan,raihanhasan427@gmail.com
Terrapin Wars,https://bitcamp2024.devpost.com/submissions/508150-terrapin-wars,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 6:46,"Project Inspiration:

Entering college, I noticed a trend among my friends where we started sharing our locations with each other for safety reasons. It became a convenient way to keep track of each other's whereabouts and ensure everyone was okay. However, I found myself intrigued by the idea of leveraging this location-sharing aspect for something more engaging and interactive, and so I wanted to create a fun game out of it that encouraged students around campus to move around more.

Learning Experience:

As I delved into the concept of turning location-sharing into a game, I learned a lot about the potential of gamification to encourage movement and social interaction. It was fascinating to explore how technology could be utilized to enhance real-world experiences and foster connections among friends.

Project Development and Challenges Faced:

Implementing the Google Maps API into the app was one of the significant challenges I faced during development. Integrating this feature seamlessly into the gameplay required careful planning and attention to detail. Additionally, app development itself posed its own set of difficulties, from user interface design to backend functionality.

Despite these challenges, I we managed to get the map working and placed checkpoints down. Some of the components our team worked on was getting a database working in order to track user's real time locations, their user id, and the total points they've obtain. Although we could not complete the implementation of the real-time location tracking, through iteration and testing, we refined the app to the best of our abilities and were able to learn a lot about databases such as firebase.
",https://github.com/echang505/TerrapinWars,,"Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp","flutter, firebase, dart, html",Helen,Li,hli12349@terpmail.umd.edu,,Best Machine Learning Track Hack - Bitcamp,No,I interacted with the 3d printer,"Univeristy of Maryland, College Park",,University of Maryland - College Park,1,Eric,Chang,eric.chang1000@gmail.com
LE SSERAFIND,https://bitcamp2024.devpost.com/submissions/508163-le-sserafind,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:10,"Inspiration

We're both interested in Kpop groups, and have the shared experience of being overwhelmed trying to figure out who's who at first.

What it does

When users input an image of a member into LE SSERAFIND, the program tries to identify what member it is, and outputs their name.

How we built it

The classification model is a small convolutional neural network built using PyTorch. The website itself is React-based, and mainly consists of a ""Choose file"" button. When a file is selected, it's sent to the CNN and the final classification is returned and displayed. 

Challenges we ran into

We collected all of the data on our own, which meant that we weren't able to collect a significant amount of data. Because of this, our model struggled with overfitting and didn't have a particularly high accuracy on the test set.

Accomplishments that we're proud of

We're both usually the designers instead of the programmers, so we're proud of ourselves for taking on such a big task, achieving an accuracy better than guessing, and dipping our toes into full-stack development.

What we learned

How to use Github pages, how to connect the interface to the model, how to address overfitting in models

What's next for LE SSERAFIND

Collecting more data
","https://github.com/jamnavarro/bitcamp, http://lesserafind.co",,"Best UI/UX Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH,  Best Razzle Dazzle Hack - Bitcamp","python, pytorch, javascript, flask, react",Ireland,Parrish,iparris1@jhu.edu,,Best Machine Learning Track Hack - Bitcamp,Yes,"We used GitHub and GitHub pages, which was convenient. We used Porkbun/GoDaddy to claim a domain name, and it was a bit difficult trying to get them to work.",Johns Hopkins University,"lesserafind.co. Like Le Sserafim, but the find part was added because we're 'finding' the members!",Johns Hopkins University,1,Jam,Navarro,jamsnavarro1@gmail.com
Mogulator,https://bitcamp2024.devpost.com/submissions/508165-mogulator,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:11,"Inspiration

We wanted to do something with computer vision, incorporating it with a hardware component like a vehicle. Our group wanted to do something that would bring some laughter and levity to such an intense competition, thus we decided that we would use a drone to fly around to other contestants and give them a unique score based on their personal features. 

What it does

The mogulator is a web app that allows the user to remotely control a drone. When the user clicks the ""mog"" button, we start capturing the live video feed from our drone and detect facial landmarks on people in our line of sight, giving them a score based on certain criteria. It also has a component that detects when a person in the frame is flexing their jawline, further increasing their score. 

How we built it

Streamed drone data to python server run locally on laptop which uses MCTNN to find landmarks and calculate mog score. Factors of the score include canthal tilt, facial symmetry, facial harmony, and others. The video is them streamed to a react webpage which include buttons to control the drone with. 

Challenges we ran into

Figuring out how to deal with conflicting use of ports when it came to integrating our drone code with our website, object detection issues with the mogging. 

Accomplishments that we're proud of

Got better at using React.js to design our frontend. Also discovered using Flask to insert python scripts into our website. Got experience using opencv, working with a drone, and training our own machine learning model

What we learned

Learned Front end, learned Back end. learned CV and training ai models

What's next for Mogulator

We want to make it more accurate and consider more variables. It would also be great if we could make more improvements to the drone itself, even perhaps creating our own next time
",https://github.com/Ritz963/Bitcamp2024/tree/main,https://youtu.be/iWsx_MJKhzE," Best Hardware Hack - Bitcamp, Best First Time Hack - Bitcamp","react, typescript, python, flask, opencv, mediapipe, numpy, threading, tello, keras, pickle, drone, matplotlib",Kevin,Chong,kevin.chong147@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,Used github to collaborate on our project and ran into some issues but we made it work,University of Maryland,,University of Maryland - College Park,3,Ritz963,Thakur,ritvik.thakur04@gmail.com
TerPilot,https://bitcamp2024.devpost.com/submissions/508167-terpilot,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:15,"Inspiration

Navigating through Testudo and ELMS can often be a daunting task, particularly during class registration. Students find themselves juggling multiple tabs to compare class times, seat availability, professor ratings, and campus maps to ensure they can make it to class on time. Recognizing this challenge, we’ve developed a user-friendly, all-in-one application tailored specifically for UMD students. This innovative platform streamlines the process, making it a seamless and stress-free experience.

What it does

TerPilot is a cutting-edge platform that seamlessly integrates traditional algorithms with Large Language Models (LLMs) to revolutionize course selection, schedule generation, and academic progress tracking. By tackling the NP-hard problem of schedule planning, TerPilot ensures that students can effortlessly navigate their academic journey. Its sophisticated algorithms work with the user-friendly interface, providing an unparalleled experience for students aiming to graduate successfully.

How we built it

The frontend was developed using React for a dynamic and responsive user interface. For the backend, we used Flask with Python, and PostgreSQL for the database. We leveraged scraped data from Testudo and PlanetTerp APIs with the help of BeautifulSoup to obtain relevant information for our algorithms and LLM.

Challenges we ran into

One of the most time-consuming tasks was to process the vast amount of scraped data. We ended up with over 14 million characters of data that we store in our database.

Accomplishments that we're proud of

Integrating multiple tools to create a large project in 36 hours with a team of three people.

What we learned

We challenged ourselves to use new tools and learn techniques we had never used before or feared using. However, we gained valuable knowledge that will aid us in future hackathons.

What's next for TerPilot

We plan to integrate terpilot to ELMS and gradescope for direct access to grades and schedules. Furthermore, we plan to give it access to latest news and events on-campus. Finally, we aim to improve our algorithms and increase the efficiency of our LLMs to be more sustainable.
",https://github.com/Loldude0/terpilot,https://youtu.be/Yq7wT-6QJU0,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH","github, react, flask, html, css, javascript, python, postgresql, gemini-pro, beautiful-soup, digitalocean",Dahong,Luo,dappon.04@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"It has been a grueling weekend, but we managed to build something that we are very proud of, and we are very happy about it. We also learned many things.","The University of Maryland, College Park",terpilot.co,"University of Maryland - College Park, Plano West Senior High School",2,pranav-2506,Sridar,pranav25@terpmail.umd.edu
News Swipe,https://bitcamp2024.devpost.com/submissions/508168-news-swipe,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:16,"Inspiration

We were inspired because we wanted to read more, so we thought of a way to efficiently sort through news articles that we would be interested in

What it does

It is a Tinder-style app where users can like or dislike an article based on a short description of it.

How we built it

We built it with React, JS and Python

Challenges we ran into

We ran into issues trying to pick out key words from article summaries

Accomplishments that we're proud of

We all learned how to use React despite not knowing beforehand

What we learned

We learned how to build a web app from the ground up

What's next for News Swipe

We want to fine tune it and iron out some bugs
",https://github.com/jainansh16/news-swipe.git,https://youtu.be/FE5XH81rGy0,"Best Bitcamp Hack - Bitcamp, Best Moonshot Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","python, react, html, css, newsapi, textblob, javascript",Ansh,Jain,ajain316@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,"We used React, JS and Python as well as GitHub.",University of Maryland College Park,,University of Maryland - College Park,2,Elvin,Sellappan,elsellan@gmail.com
Traffic Optimization using Quantum Computation,https://bitcamp2024.devpost.com/submissions/508174-traffic-optimization-using-quantum-computation,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:24,"Inspiration

The trip to Bitcamp 2024 at UMD, which should have taken only 40 minutes, ended up taking over an hour due to traffic. This frustrating experience sparked an intriguing idea, what if we could enhance the efficiency of traffic intersections? By reducing idling times and prioritizing traffic flow based on intersection density, we could significantly decrease pollution. However, controlling traffic on such a large scale presents a formidable challenge. Traditional computers struggle to handle the vast amount of data and to make decisions quickly and efficiently. This limitation led us to explore the potential of Quantum Computing. Utilizing the Quantum Approximate Optimization Algorithm, we were able to make decisions faster, more efficiently, and on a much larger scale.

What it does

Current traffic management systems are struggling to fulfill the Sustainable Development Goal 11, which aims to make cities inclusive, safe, resilient, and sustainable. Traditional traffic signal systems contribute to heavy and inefficient flow of traffic, increasing issues of congestion, particularly at key intersections. This not only causes significant delays and driver frustration but also increases fuel consumption due to prolonged idling and repetitive stop-and-go cycles, leading to higher emissions and greater environmental impact. Furthermore, congested roads heighten the risk of accidents. By implementing more efficient traffic management strategies, cities can enhance road safety, reduce congestion, and lower emission levels, aligning more closely with the objectives of SDG 11.

How we built it

Using Quantum Approximate Optimization Algorithm (QAOA), which is optimized for solving complex combinatorial optimization problems like traffic light configuration, to find the traffic signal with the heaviest traffic flow based on the graph.​ we also used a hybrid quantum-classical approach where a classical optimizer adjusts quantum gate parameters to minimize the cost function, refining these through iterative feedback from quantum measurements.​

Libraries used: pennylane, numpy, matplotlib, cirq, NetworkX.

Challenges we ran into

Our biggest challenge was that we had limited knowledge prior to the last 15 hours. We had to attend many workshops here and study research papers to understand Quantum Computations and Algorithms from scratch. We had to make visualizations for traffic intersections at different scenarios and integrate various factors like prioritizing traffic flow based on traffic density among other things were few of the other challenges we ran into.   

Accomplishments that we're proud of

Quantum computers offer a significant speed advantage over classical computers, enabling the processing of large datasets at unprecedented rates. This could potentially unlock our capability to allow for a real-time traffic management, which can greatly enhance the efficiency of traffic flow, reduce congestion, and subsequently lower fuel consumption and emissions. Additionally, we trained our model to reduce idling times contribute to decreased environmental impact which was our first priority - Sustainability.  Our project directly supports Sustainable Development Goal 11, aiming to make cities and human settlements more inclusive, safe, resilient, and sustainable.
​

What we learned

We learnt to utilize quantum superposition which allow these computers to evaluate multiple traffic signals simultaneously, significantly enhancing their parallel processing capabilities. In addition, we learnt and used Specialized quantum algorithms, such as the Quantum Approximate Optimization Algorithm (QAOA), which are particularly well-suited for solving optimization problems and are used to iteratively refine solutions to reduce traffic congestion effectively. We have also learnt to use pennylane, which consists various libraries and used it in the project.

What's next for Traffic Optimization using Quantum Computation

The future of traffic optimization using quantum computation looks promising, focusing primarily on optimizing traffic light timings to ensure the most efficient and fastest routes for drivers. As quantum technology continues to advance, its capacity to manage larger and more complex systems will grow, providing a scalable solution that can adapt to future urban planning challenges. Currently, this approach assumes an ideal scenario, but we expect to introduce additional factors and parameters to fine-tune the model further. This expansion aims to enhance its capabilities and functionality, enabling it to represent and efficiently manage a large network of urban traffic.

​
","https://github.com/Rohan-Payyavula/Traffic-Signal-Optimization-with-Quantum, https://gmuedu-my.sharepoint.com/:p:/g/personal/rpayyavu_gmu_edu/EWSjYOcCkZNHnFVSivZ9eHsBcC4cAYlDiOj1tNAdtX2p6g?e=e5X6Im",,"Best Bitcamp Hack - Bitcamp, Best Sustainability Hack - Bitcamp","python, cirq, matplotlib, networkx, numpy, pennylane, random",Nikhil,Tirunagiri,nikhiltirunagiri@outlook.com,,Best Advanced Quantum Track Hack,Yes,"Github - used github to seamlessly integrate workflow,
 Anaconda & Jupyter notebook - used jupyter notebook to run our code and visualize very easily, pennylane - used pennylane for and to quantum machine learning model.","George Mason University, University of Maryland",,"George Mason University, John P. Stevens",2,Rohan,Payyavula,payyavularohan2004@gmail.com
Chore2Do,https://bitcamp2024.devpost.com/submissions/508179-chore2do,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:33,"Inspiration

Due to the track gamification hack prize requirements, I wanted to create a game that used chores as the main mechanic. 

What it does

You can view the small interior houses.

How we built it

Made in Unreal Engine 4

Challenges we ran into

Due to my limited knowledge of Unreal Engine, I wasn't able to make a full-fledged game. 

Accomplishments that we're proud of

I am proud that I was able to understand some of Unreal Engine's blueprint system.

What we learned

I learned more about Unreal Engine's blueprint system and the logic with it. 

What's next for Chore2Do

Maybe in the future, I will create the mechanics of the game like a timer and the abilities to do chores.
",,,Best Gamification Hack - Bitcamp,unreal-engine,Jayden,Hooper,jhoop1026@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"I used Unreal Engine and OpenAI for the entirety of my project. Unreal Engine is very extensive and has the ability to be used to create many things, but is very challenging at first to get the hang off everything. OpenAI just helped me figure out how I should do certain things.",Baltimore Polytechnic Institute,,,0,,,
Nuke Nester,https://bitcamp2024.devpost.com/submissions/508186-nuke-nester,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:36,"Inspiration

The growing need for sustainable and safe nuclear waste management inspired us to develop ""Nuke Nester."" Our goal was to create a platform that not only aids companies in responsibly disposing of nuclear waste but also contributes to environmental safety and sustainability.

What it does

""Nuke Nester"" is a digital platform that allows companies to easily manage the disposal of nuclear waste. Users can pinpoint disposal sites on a map, track the decay time of nuclear materials, and view statistics related to their carbon emissions, all aimed at promoting transparent and responsible waste management.

How we built it

We built ""Nuke Nester"" using a modern tech stack that includes Next.js and Tailwind CSS for the frontend, and Express and Node.js for the backend. Data storage is handled by MongoDB, with authentication managed by PropelAuth. The platform integrates Mapbox for precise map functionalities and is deployed via Render.com, with domain management by GoDaddy.

Challenges we ran into

Integrating Mapbox for precise location pinning was challenging, particularly in determining the exact disposal locations for nuclear waste. Additionally, we encountered latency issues with MongoDB being hosted on the Virginia side while our hosting was on the west coast. There were also minor hiccups with DNS configuration post-domain registration with GoDaddy, but all these challenges were successfully resolved.

Accomplishments that we're proud of

We are particularly proud of successfully integrating multiple technologies within the short span of 36 hours, resulting in a fully functional website that runs optimally and error-free on the server.

What we learned

This project was a significant learning curve in areas such as DNS hosting and navigating the complexities of the Mapbox API. These experiences have enriched our technical expertise and problem-solving skills.

What's next for Nuke Nester

Moving forward, we plan to enhance the features of ""Nuke Nester"" by incorporating advanced analytical tools to provide deeper insights into waste management practices. We also aim to expand our user base and explore partnerships with governmental bodies to further the impact of our solution.
","https://github.com/orgs/NukeNester/repositories, https://nukeydookie.us/",https://youtu.be/-BFn0Yk0Bo4,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Sustainability Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best Use of PropelAuth - MLH","next.js, react, tailwind, mongodb, node.js, express.js, mapbox, google-auth, propelauth",Tirth,Patel,tirthppatelofficial@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"This weekend at the hackathon, we leveraged technologies like Mapbox, MongoDB, GitHub, Render.com, and GoDaddy. While Mapbox offered detailed mapping capabilities crucial for our project, we encountered challenges with MongoDB's server location and minor DNS issues with GoDaddy. Overall, GitHub and Render.com facilitated effective collaboration and deployment, though each platform had its learning curve and opportunities for improvement.","University of Maryland, Baltimore County (UMBC)","Yes, we register a GoDaddy domain name called ""nukeydookie.us"". It a pun on our product concept, we help companies dispose nukes","University of Maryland - Baltimore County, University of Maryland - College Park",3,Eric,Chen,echen9870@gmail.com
LitterBox,https://bitcamp2024.devpost.com/submissions/508189-litterbox,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:36,"Inspiration

We were inspired by Duolingo and how gamification can make tasks that are usually not fun enjoyable. We wanted to make banking and saving less of a chore and reward good spending habits. 

What it does

LitterBox is a banking and budgeting app at its core. It tracks monthly spending, categorizes it, and displays it understandably. It allows for transfers between a user's checking and savings account. It also allows them to set saving goals and track their progress. It incentivizes good spending habits and saving by rewarding users with points they can spend on Turnip, their virtual cat.

How we built it

We used Swift to build the IOS app. We used Capital One's Nessie API to make get and post requests to extract financial and account information.

Challenges we ran into

Learning to use Swift and Xcode as first-time IOS app developers was challenging. We struggled with implementing the reward system and accessing variables across multiple views. 

Accomplishments that we're proud of

We are very proud to have a functioning app! We chose to do something we had never done before to learn a new skill, and we are proud of what we have accomplished.

What we learned

We learned how to code in Swift and use Xcode. We learned a lot about IOS app development. We also learned how to collaborate with code and design.

What's next for LitterBox

If we had more time, we would clean up the design and work out some functionality flaws. We would also love to incentivize learning about good spending habits (maybe mini-games in the future?). LitterBox is currently connected to a sample data API, but one day, we would love to see it truly deployed. 
",https://github.com/caremackin/LitterBox,https://vimeo.com/937363895?share=copy,"Best First Time Hack - Bitcamp, Best Gamification Hack - Bitcamp, Best Financial Hack - Capital One",swift,caremackin,Mackin,cmackin712@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,We used Xcode and GitHub. It was our first time using Xcode and it was good!,University of Maryland,,University of Maryland - College Park,1,ukonduru123,Konduru,ukonduru@terpmail.umd.edu
I'm Not Single Club,https://bitcamp2024.devpost.com/submissions/508191-i-m-not-single-club,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:38,"

Inspiration:

For CS majors, diving into the world of relationship compatibility is a hilarious departure from the usual realms of coding and debugging. We were inspired by the lack of a way to determine if couples are a good fit or not. Creating a platform like im.notsingle.club allows us to apply our skills to something fun and meaningful, bringing couples closer together through technology. 

What it does

There are 3 different ways to test compatibility on our website, the first being by Zodiac sign, next with an actual personality test where you can rank preferences and lastly a hot takes quiz where you can pick and choose which option you agree with. 

How we built it

We built 'im.notsingle.club' using a combination of HTML, JavaScript, and CSS to create a user-friendly and interactive website. Our team integrated three different compatibility tests into the platform. 

The HTML structure forms the backbone of our site, defining the layout and content. JavaScript adds dynamic functionality, allowing users to interact with the tests and receive instant feedback. CSS is used for styling, ensuring a good design. To create the compatibility tests, we researched and selected questions that are both fun and insightful, designed to reveal compatibility between partners. These questions cover a range of topics to provide a comprehensive assessment of relationship compatibility.

Challenges we ran into

There were multiple challenges met at all levels of this project. The first thig we were confused about was how we were going to compare compatibility. Initially we wanted to match a user up with someone who had taken the age but we quickly realized that would involve working with a database that stores each users information. We weren't super well versed in databases and for us to be able to match a user, we would need a bunch of people to take the quiz which given the time wasn't plausible and randomly generating new users would defeat the point of a match making sight. One solution we thought about was to make the users enter their email but that was also dropped when we ran into various issues about signing up to save  progress and user input and then matching it to someone with a unique personality score. 
","https://im.notsingle.club/, https://github.com/richa-g7/richa-g7",,,"html, javascript, css, api",Stuti,Pardiwala,spardiwa@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,We used GitHub among a group of 3 allowing us to collaboratively work on the project at the same time.,University of Maryland- College Park.,im.notsingle.club,,2,Sravya,Patibandla,spatiban@terpmail.umd.edu
SmartStudy,https://bitcamp2024.devpost.com/submissions/508192-smartstudy,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:38,"I have always learned best from flashcards and understand that many other people are just like me. And when people want to learn about something new, they can come to the website and learn.

The website contains sets of flashcards that the user can create themselves adding the front and back to each card. However, there is also an option for the user to create flashcards using AI. They just have to enter in a topic and the number of flash cards that they want. The website will generate those flashcards and the user can review over them, which shuffles through the flashcards randomly.

I built the backend of the project on Javascript, and I used HTML and CSS for designing the frontend of the project.

I ran into a big challenge of storing the flashcards in its own set. The implementation of the AI was also very difficult and took a lot of time to debug.

However, I am very proud that I was about to involve AI in my project, as it makes the overall user experience much better.

I learned how to start servers through Javascript and also building the front end. Everything that I did in this project I practically learned since I have had almost no exposure to these skills.

SmartStudy's next steps would be to improve the overall layout and color scheme of the website.
",https://github.com/nithinbhandari7/SmartStudy.git,,,"javascript, html, css, node.js, express.js, openai, mongoose, ejs",Nithin,Bhandari,nbhandar@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,"I interacted with a lot of Javascript and HTML, which I am not very used to, but I had to master them to my best ability to be able to complete the project.",University of Maryland,no,,0,,,
Tailored,,Draft,Pending,Project overview,4/21/2024 7:43,,,,,"flask, kafka, python, html, javascript",David,Shukhin,davidshukhin@gmail.com,,,,,,,University of Maryland - College Park,0,,,
autobahn,https://bitcamp2024.devpost.com/submissions/508203-autobahn,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:45,"Inspiration

Purchasing a car can be tedious. From choosing your very first car to finding that perfect daily driver, it can take a lot of dealership visits and website hopping before you find the car that suits you.

What it does

That's why we created autobahn. Acting as the highway to your first car with no limits, we get rid of all of the hassle for you! We've managed to accumulate car listings from every major retailer in the United States just to make everyone's life a little bit easier.

How we built it

We utilized web scraping to gather data from websites you already know, such as CarMax or Autotrader, and compiled all into one website. We set up our front-end using technologies like React, Javascript, and CSS to create a minimalistic design where customers can simply search for results using year, make, and model! With the input from the user, we used Selenium to automate the process of searching up the exact same car onto other car sales websites. Then, BeautifulSoup webscraped all of the appropriate data to send back to the front-end, all in the blink of an eye!

Challenges we ran into

Our most difficult challenges were inexperience and time constraint. None of us had previously utilized webscraping applications, nor had we touched automation to asynchronously browse the internet and utilize user inputs to obtain data. With just 36 hours, we definitely had an ambitious goal, but we were set on doing our best.

Accomplishments that we're proud of

We still managed to create our web application! We decided to leave out some options for the sake of time, such as showing fuel economy or exterior color, but since we offer direct links to each listing, you'll be able to find out every specification and feature in no time!

What we learned

We gained a lot of hands-on experience with webscraping and automation, and this knowledge opened our insight into manually finetuning automatic applications.

What's next for autobahn

Our next step is to add what we couldn't today; extra terms to narrow down search would speed up the search process, and since our goal is to cut down time as much as possible, we plan to continue optimizing our application.
",https://github.com/jealmonte/autobahn.git,,"Best UI/UX Hack - Bitcamp, Best Financial Hack - Capital One","selenium, scrapy, pandas, django, postgresql, json, vite, python, javascript, html5, css, beautiful-soup",Frank,Hyun,rxmezr@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"We interacted with front-end technologies such as React, Javascript, and CSS to create a minimalistic design for our users, since we emphasize on speed and efficiency. Then, we utilized back-end technologies such as Django and Python. For automation and efficiency, we used Selenium and BeautifulSoup to gather data effectively.",James Madison University,,"James Madison University, University of Maryland - College Park, Northern Virginia Community College, George Mason University",3,Lawrence,Lin,lawrencelin1154@gmail.com
Flicker,https://bitcamp2024.devpost.com/submissions/508206-flicker,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:49,"Inspiration

Our inspiration for this project was that we often eat out with friends, and most of the time the experience was less enjoyable. We took all the things that we saw needed to be improved on in the dining experience and made sure to include features that covered those problems.

What it does

Our hack starts with user created accounts where a consumer would access a QR code from a restaurant that they are dining at, then it proceeds to go through the entire ordering process such as adding specific items to the cart.

Based on this, we made it available for consumers to split the bill among others that they dine with. With it being as easy as scanning a QR code, users are able to add others to their bill and then select who ate which items. This takes the hassle out of figuring out who owes who, how much to pay someone, and takes away the possibility of someone not paying you back. Splitting the check was something we noticed was difficult for a lot of restaurants, so we wanted to automate the process, along with ordering to make it much easier for consumers, as well as allows for restaurants to become more automated, reducing their operating costs. Our idea is that our company will foot the bill that is split to other users, and a charge for their portion will appear in their account that they have to pay off. 

How we built it

First we started with a brainstorm for the items and processes we needed to include. Then, we moved onto mapping the order of the processes and functions. Within our group, we split up responsibilities such as some people were in charge of the front end, while others worked on the back end. We then used Github and MongoDB to make sure that our project all linked up.

Challenges we ran into

A challenge that we ran into was ensuring the safety of our users. When looking at the options for splitting the bill, we realized that it wasn't particularly hard for some users to take advantage of our system. From there we had to re-think our whole process to make sure that users were not taken advantage of. We ended up brainstorming ideas of how some users might take advantage of each system we thought of and finally decided to change from a remote system to a process that happens in the flesh.

Accomplishments that we're proud of

We are proud that we finished planning and coding some intricate processes within the time limit. We were able to include many of the things we thought of that would increase user enjoyment. In addition to the many different features that are available on our website.

What we learned

I think one of our major achievements was the ability of working in an team environment for coding. This hackathon really brought out the process of developing a project. Deciding who should work on what, making sure that what we coded did not conflict, communicate what parts we needed from who, and brainstorming as a team were all skills that we picked up in this tight period.

What's next for Flicker

After this, we want to look for ways to improve customer satisfaction with the process, while also making sure that vendors are a priority. Things such as allowing for vendors to customize the process with background pictures, or adding special sales will definitely improve traction among both consumers and vendors.
",,,Best Financial Hack - Capital One,"mongodb, github, vue, javascript, css",Matthew,Branning,mhb901@verizon.net,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"MongoDB went down for a bit, which caused some delays in our testing and development.",University of Maryland College Park,,University of Maryland - College Park,2,Justin,Wang,justinkaiwang@gmail.com
youSure?,https://bitcamp2024.devpost.com/submissions/508208-yousure,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:49,"We were SO over wading through 30 pages of confusing health insurance jargon.
You know the feeling -  endless documents that leave you more lost than ever about coverage and deductibles. That's why we built this app to decode your health insurance instantly.

Here's what it does:

Say goodbye to confusion: This app summarizes your policy in a snap, highlighting key factors you actually need to know.
Compare with confidence: Pick two plans from different companies and see them side-by-side. No more guesswork, just informed decisions.

How'd we do it?
We used React for our front end to create a user-friendly interface facilitating User details, file uploading, analyzing, and comparing insurance files. For the backend, Flask was employed to create endpoints to the database and the frontend to facilitate user login, insurance analysis, comparison etc. Through the information added about the user in the database we predicted the risk associated with that person. Used XG boost model to generate a model for the risk associated. We passed PDF's and stored the data in the form of chunks in a vector database, Pinecone, and leveraged RAG(Retrieval-Augmented Generation) with embedded queries through LangChain, to ensure tailored results for users. 
We used GPT3.5 Turbo augmented search functionality to deliver strict results based on queries and mitigated AI hallucinations and outdated information. 

What we're most proud of?
Using a vector database to implement a RAG and compare files along with using a sqlLite database to store user information and estimate the risk. Training the XG boost model to get the risk. 
This app goes beyond basic summaries. It delivers a deep analysis of your policies, empowering you to understand exactly what's covered.

But wait, there's more!

Next up, we're building a platform to process claims and get your funds faster. Imagine getting reimbursed without the hassle!
","https://github.com/Abhyuday-Goyal/InsuranceHack, https://github.com/Abhyuday-Goyal/InsuranceHack",,"Best Bitcamp Hack - Bitcamp, Best Financial Hack - Capital One","python, react, flask, openai, langchain, pinecone, javascript",Abhyuday,Goyal,abhyuday2106@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"Github, Langchain, Pinecone","University of Maryland, College Park",,"University of Maryland - College Park, University of Maryland - University College",3,Ayush,Roy,ayush.roy9711@gmail.com
Music Catalogue,https://bitcamp2024.devpost.com/submissions/508210-music-catalogue,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:51,"Inspiration

Me and my friends all love music and wanted to branch out to find new music that's suitable for us. 

What it does

It functions like the ""Similar music"" part found in most music streaming apps where they use the songs you listen to to find similar songs you would like. The user answers questions relating to their preferred type of music and those answers are compared to attributes within the songs of the music catalog until they find a song compatible with them.

How we built it

We used Java as it was the one language all three of us knew. We also used AI to help with downloading and transcribing a music catalog file into the computer.

Challenges we ran into

Our biggest challenge was trying to give the songs within the downloaded music catalog their attributes. While some come with attributes like titles and artists, our program sifts through specific attributes such as tempo and instruments that are not already found within the file. If there were more time, we would have attempted to develop an AI that would sift through the songs and assign them those attributes rather than us having to listen to each song and manually assign an attribute.

Accomplishments that we're proud of

The planning process was rather quick and efficient. Also, using the Copilot AI efficiently was something we were proud of.

What we learned

How useful AI can be within the realm of computer science. The entire file-downloading process within the code would not have worked had we not used AI to help us understand and accomplish that task. 

What's next for Music Catalogue

Our project is not complete as the songs are missing attributes so making an AI that would give those songs attributes would be the next step.
",,,,"java, ai",lamine,niang,lamine535niang@icloud.com,,Best Machine Learning Track Hack - Bitcamp,No,Copilot and Cloudform were really cool and the integration of AI into computer science was an interesting topic,Baltimore Polytechnic Institute,,Baltimore Polytechnic Institute,2,Ellen,Griffin,ellen.shigeno@gmail.com
"Clean Up, FAST!!!",https://bitcamp2024.devpost.com/submissions/508212-clean-up-fast,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:54,"Inspiration

Inspired by indie devs from Dave microwave games where they made goofy cartoon horror games

What it does

Player must do chores around house and run from parents.

How we built it

Unreal engine 5

Challenges we ran into

Set up mechanics

Accomplishments that we're proud of

I made it so the character can grab and throw objects.

What we learned

Work a little smaller next time

What's next for Clean Up, FAST!!!

Maybe a change in concept.
",,,Best Gamification Hack - Bitcamp,unreal-engine,Kai,Grigsby,kaigrigsby62@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,Unreal engine was pretty laggy for me but it was probably my computer fault.,Baltimore Polytechnic Institute,,Baltimore Polytechnic Institute,0,,,
FoodFlow,https://bitcamp2024.devpost.com/submissions/508213-foodflow,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:55,"Inspiration
Our project was inspired by the remarkable efforts of the on-campus community, Terps for Change, who tirelessly work to distribute excess food to communities lacking ready access to it. Witnessing their dedication, we were driven to create a platform that would support and amplify their impact.

What it does
FoodFlow serves as a vital link, connecting food distributors, volunteers (like Terps for Change), and those in need. Utilizing image processing and Google Maps integration, it offers a comprehensive solution for listing surplus food, identifying requirements, and empowering volunteers to provide support efficiently.

How we built it
Leveraging a blend of HTML, JS, and CSS for the frontend, and Python with Flask for the backend, we seamlessly bridged the gap between different components. The integration of Gemini API for image processing and Maps API for geographical visualization enriched the user experience.

Challenges we ran into
Our journey encountered challenges, notably in implementing Flask to connect the image processing backend with the frontend. However, our perseverance and collaborative spirit enabled us to overcome these hurdles.

Accomplishments that we're proud of
We take pride in the collaborative effort that brought this project to fruition, especially considering that we embarked on this journey as beginners. The hands-on learning experience over the past 30 hours has been invaluable.

What we learned
Through this project, we gained invaluable experience in utilizing APIs and seamlessly integrating frontend and backend components. Each challenge we encountered provided an opportunity for growth and learning.

What's next for FoodFlow
Looking ahead, our focus for FoodFlow is to gather feedback from volunteers and users, refining the platform into a full-fledged mobile application. We are committed to evolving and expanding its reach to make an even greater impact on food distribution and community support.
",https://github.com/ritesh3280/FoodFlow.git,https://youtu.be/FFnlnqllEcQ,"Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Sustainability Hack - Bitcamp","javascript, html, css, python, flask, api",Shasshank,Sethuraman,shasshank12@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"The core of our project revolves around integrating the Gemini API and the Google Maps API. We utilize the Gemini API to analyze images of food uploaded by the ""Source"" and extract essential information such as food type and quality. Subsequently, the Google Maps API facilitates the connection between volunteers responsible for food delivery and the underprivileged individuals needing assistance. To tie all components together seamlessly, we leverage the Flask API, ensuring efficient integration and functionality across our project's various endpoints. Lastly, we use Git Hub to help manage all the code and for our team to work effectively and efficiently.","University of Maryland, College Park",We did not register any GoDaddy domain,University of Maryland - College Park,3,Ritesh,Reddy,ritesh3280@gmail.com
Boxing Simulator 7,https://bitcamp2024.devpost.com/submissions/508214-boxing-simulator-7,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 7:55,"Inspiration

Punch-out

What it does

Stress reliever for college students.

How we built it

Using Scratch

Challenges we ran into

Convincing people to take our project seriously, although we were using Scratch.

Accomplishments that we're proud of

We were able to make a functional game that could impress some, using Scratch.

What we learned

How useful Scratch and block code in general is and the level of skill required to use it efficiently.

What's next for Untitled

A tournament where different Maryland college mascots fight each other in order to determine the best university in Maryland.
",https://scratch.mit.edu/projects/1005179557,https://youtu.be/V76BtbyUaeQ,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Gamification Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp",scratch,Diego ,Escobar,origamiissexy@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,I enjoyed it thoroughly.,Baltimore Polytechnic Institute,,University of Baltimore,0,,,
current.ly,https://bitcamp2024.devpost.com/submissions/508222-current-ly,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:08,"Inspiration

The inspiration behind creating our application for news was to provide a more engaging and visually appealing way for users to consume news content. We wanted to leverage the popular format of short, vertical videos to deliver news updates from various sources in a format that is easy to digest and share. By combining the familiarity of TikTok/Instagram's interface with informative news content, we aimed to create a platform that would make staying informed both entertaining and convenient for users.

What it does

The TikTok-like application allows users to swipe up and down to navigate between news reels, swipe right to open the full news article in a web browser, and double-tap to like or unlike news content. Additionally, the application includes a feature to filter news content based on search criteria, although this feature is not fully implemented yet.

How we built it

We built the TikTok-like news application using Angular.js for the frontend, integrating a news API to fetch news content dynamically. We also incorporated Hammer.js for touch gesture recognition, allowing users to swipe and double-tap for navigation and liking/unliking news reels.

Challenges we ran into

We encountered several challenges during development. Implementing scroll snapping from one reel to another was particularly difficult, requiring precise handling of touch events and scroll behavior. Additionally, since the API could only be run locally, we were unable to make API calls in the live application, rendering the search function useless. We also faced sizing issues related to the dimensions of devices that would use the app, requiring adjustments to ensure a consistent user experience across different screen sizes.

Accomplishments that we're proud of

We're proud of several accomplishments in our project. We successfully implemented swiping gestures for navigation, double-tap functionality for liking and unliking news content, and the ability to swipe right to redirect users to the full article. Additionally, we focused on creating a visually appealing website, ensuring that the user interface is engaging and easy to use.

What we learned

Through this project, we learned a lot about frontend development using Angular.js, including how to integrate external APIs for dynamic content. We also gained experience in implementing touch gesture recognition using Hammer.js, which was crucial for creating a smooth and interactive user experience. Additionally, we learned how to tackle challenges related to responsive design, ensuring that our application works well across different devices and screen sizes.

What's next for current.ly

To further improve the application, we could implement several features. One idea is to enhance the search functionality by resolving the issue with the local API and enabling users to search for specific news topics. Additionally, we could introduce a feature that allows users to share news reels with others, increasing the app's social aspect. Another enhancement could be to add more customization options for users, such as the ability to choose their preferred news sources or topics. Finally, we could work on refining the user interface and user experience to make the app even more visually appealing and intuitive to use.
",https://github.com/NithinPillai/currently/tree/main,https://www.youtube.com/shorts/5tSIV4Tm3EY,,"angular.js, hammer.js, fastapi",yashasvijay,Vijay,yashasvj19@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"We interacted with Github a lot during this weekend. It allowed for everyone to work on something different for the application and allowed for seamless integration. Additionally, we interacted with Hammer.js even though none of us were proficient and we were very happy with how it was. It was super easy to understand and it helped us take our application to the next level",University of Maryland College Park,,University of Maryland - College Park,3,Advik,Duvvuri,advik.duvvuri@gmail.com
Vistra - The Mirror for Everyone,https://bitcamp2024.devpost.com/submissions/508223-vistra-the-mirror-for-everyone,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:08,"Inspiration

Over 1.3 billion people around the world suffer from significant physical disabilities, and our goal is to make technology more accessible to them. From stroke victims and individuals with arthritis who struggle to use touch screen devices to those with amputations and birth defects, there is a need for innovative solutions that empower people with disabilities to fully engage with modern technology. Inspired by the desire to bridge this gap and improve the quality of life for everyone, we decided to create Vistra, a groundbreaking smart mirror accessibility aid.

What it does

Vistra is designed to cater to the diverse needs and abilities of individuals with disabilities, offering a range of features and functionalities that allow for seamless interaction. For individuals with limited mobility, Vistra's hands-free interface provides an accessible alternative to traditional touch screen devices, allowing users to navigate through menus, access information, and perform tasks with ease. By utilizing advanced eye-tracking technology, Vistra enables users to control the interface simply by moving their eyes, eliminating the need for complex gestures or precise movements.

How we built it

The development of Vistra involved research into the needs of individuals with disabilities, followed by iterative design and testing of the user interface. We integrated eye-tracking technology into the mirror and optimized performance through calibration and testing.

Challenges we ran into

The first challenge we ran into was running all of the processes at the same time. Getting the live data from GazeTracker and accurate datapoints was a challenge. Applying the mirror film over the monitor was also tricky, taking multiple team members and attention to detail for optimal results.

Accomplishments that we're proud of

We developed an idea, as well as technology that could very well be used in the real world. Vistra is a tool that is accessible with only your eyes and will be completely hands-free. This technology could revolutionize the way we control apps in our daily lives, and empower individuals with physical limitations. Additionally, the collaborative effort that went into developing our project has been incredibly rewarding, with each team member contributing their own skills and expertise.

What we learned

Developing Vistra has taught us valuable lessons about the importance of empathy, inclusivity, and user-centered design. By prioritizing the needs and experiences of individuals with disabilities, we were able to create a more accessible and effective product. We also learned how emerging technologies like eye-tracking can be used to improve accessibility and enhance the quality of life for EVERYONE.

What's next for Vistra

• Fine-tuning eye-tracking and achieving 100% accuracy 
• Obtaining a glass two-way mirror and frame for enhanced visibility and visual appeal • Improving UI 
• Adding options for customization 
• Integrating Apple watch and fitness to display health data
",https://github.com/ahere84/Vistra-Smart-Mirror,https://youtube.com/shorts/wjHxAu6g3js?feature=share,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best DEI Hack sponsored by Fidelity - MLH, Most Philanthropic Hack - Bloomberg","gazeflow, gazerecorder, javascript, python, spotify, html, openweathermap",Yonatan,Tussa,ytussa@montgomerycollege.edu,,Best Machine Learning Track Hack - Bitcamp,Yes,"GazeRecorder is good, but the recalibration could be faster. If we were to implement our own, we would cut down calibration time or have no calibration at all. Some people wanted to demo but didn't want to wait to calibrate.",Montgomery College,,Montgomery College,3,Melvin,Sere,seremelvin1@gmail.com
Perfect Pitch,https://bitcamp2024.devpost.com/submissions/508228-perfect-pitch,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:17,"Inspiration

As a team of passionate guitarists and musicians, we always wished we had a way to train our pitch ability, while also having fun. This inspired us to create ""Perfect Pitch,"" a video game designed to test and improve your vocal range.

What it does

Perfect Pitch creates a game level based on a song of your choice, which you can play through by controlling your character with the pitch of your voice. It uses live voice input to control the player utilizing pitch detection. The level is created by extracting the vocals/melody from any song, removing background noise and instrumentals and positioning coins using the pitch from this melody.

How we built it

We built this game using Python, utilizing libraries such as PyAudio, PyGame, Aubio, Numpy, Librosa, and others. Utilizing these libraries, we fed in audio tracks and live audio to find pitch for both the player and environment, and applied this into a fun game interface built on PyGame.

Challenges we ran into

Our biggest challenge was dealing with background noise and vocal extraction, using Fourier transformations to map the audio to a usable format. We also had trouble calibrating both the player's vocal range and the range of the prerecorded audio. We solved these issues using scaling and normalization functions to map these ranges uniformly onto the PyGame user interface.

Accomplishments that we're proud of

Throughout this project, we have successfully worked with streaming live audio, detecting pitch, extracting vocals with minimal noise, and creating a functional game interface for the first time.

What we learned

Throughout this process, we have learned how to process large amounts of audio while implementing it  through a live app. Our team gained new knowledge on the topics of noise cancellation, pitch detection, and threaded control.

What's next for Perfect Pitch

Perfect Pitch has plenty of room to grow. From portability to customizable song octaves, the sky is the limit. We hope to optimize our pitch detection to provide smoother control over all types of audio files and live audio inputs.
",https://github.com/Pranay-Akula/Bitcamp-2024.git,https://youtu.be/CJ2Bt_Ygdww,,"python, librosa, pyaudio, pygame, aubio",Dhruv,Dewan,dhruvrdewan@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,"Learned a lot of new skills from the workshops, got to collaborate on a project in real time as a team, and developed an original idea and implementation.","University of Maryland, College Park",,"University of Maryland - College Park, University of Maryland - University College",3,Monish,Napa,mnapa@terpmail.umd.edu
Jarvis,https://bitcamp2024.devpost.com/submissions/508237-jarvis,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:25,"todo: implementation
",https://github.com/woojcool/jarvis,,Best First Time Hack - Bitcamp,"python, flask, react-native, mongodb, bcrypt",Peter,.,peterdcurrie+github@gmail.com,,Best Cybersecurity Track Hack - Bitcamp,Yes,I stayed up all night on Friday learning flask and all night on Saturday learning react native,University of Maryland,,University of Maryland - College Park,2,msaura4,,msaura@umd.edu
UMD-Bulletin Board,https://bitcamp2024.devpost.com/submissions/508238-umd-bulletin-board,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:26,"Inspiration

I, one of the group members, missed out on a CS event called Casino Night. I realized there are a lot of community events, and other types of events that occur that I don't know of. Often times college and departments have physical bulletin boards where clubs, departments, etc. tack posts to advertise events, sellings, and much more. So I thought we should create a online place where students, clubs, and departments can place all the announcements they have in one place instead of on the bulletin boards scattered around campus, where often it goes unnoticed. 

What it does

This is a special kind of web application that allows University of Maryland Students to have all the announcements that they would ever need in one place. The app allows students to filter through the three categories that we have so far: clubs, departments, and selling. In the club category, you can see announcements from specific clubs, similarly for departments and sales. Using propel auth, we allow logins where logged in users can make posts onto different bulletin boards for others to all view. Searching is implemented where people can filter for title, specific user, or description/department. 

How we built it

The web app was built using HTML, CSS, Node.JS, Propel Authentication, MongoDB, Flask, Docker, Amazon Web Services EC2. We ran development of the frontend on vite. Once ready for production we deployed the backend flask application into a docker container and then pulled from docker repo into the aws ec2 instance. We exposed the backend port to the configured port 80 for serving http requests. 

Challenges we ran into

We ran into many challenges while working on this web app. For example MongoDB we had trouble connecting to its clusters for hours until one of us figured out about setting network access to 0.0.0.0. Another time was configuring docker and aws ec2 to run. Figuring the http ports, security settings, and configuration of the ec2 instance was extremely hard but very rewarding. Initally we tried to get the frontend running on vercel, but due to https communication with AWS breaking, we had to revert to running vite for the frontend until we reconfigure the AWS instance to handle secure requests with the docker container. 

Accomplishments that we're proud of

We are proud of connecting our front end which is html, css, and js to Flask and node.js. We are proud that we containerized the backend of the app to AWS using an EC2 instance especially due to having limited experience with working in the cloud

What we learned

We learned a lot in terms of html, css, and js as none of us had any experience in them. We also learned how convenient it is to use propl auth to create user login which saved us a lot of time. We also learned how to use and dockerize EC2 instances to deploy the backend which uses Flask and MongoDB.

What's next for UMD-Bulletin Board

We are planning to add more features such as more departments, more side bar options as well as other suggestions that the community may have. We want to add regex searching for posts, deletion of posts, and partial phrase searching of the post.  Plan to have AWS handle https requests instead of just http requests which will allow us to migrate the frontend hosting to cloud. 
",https://github.com/Ostailor/Bitcamp2024.git,,"Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Use of PropelAuth - MLH","html5, css3, node.js, mongodb, flask, docker, amazon-ec2, propelauth, javascript, npm",Ostailor,Tailor,ostailor1234@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"We used Github, MongoDB, Flask, and Propl Auth. We found that Propl Auth was easy to configure and a very nice solution for our usernames and passwords. We felt that Flask was intuitive to use especially with its app routes. MongoDB helped us tremendously in creating a database to store all the posts created by people. GitHub helped us massively in sharing our code and having all the code in one place making it easier to collaborate. Finally we hosted the backend onto a AWS ec2 instance in a docker container to in order to deploy to the internet.",University of Maryland,,University of Maryland - College Park,3,Matt,Hsieh,matthsieh0411@gmail.com
project noracle,https://bitcamp2024.devpost.com/submissions/508239-project-noracle,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:26,"project noracle

This project aims to blend technology and humor to redefine decision-making processes. By merging quantum physics with witty quotes, we hope to inspire users to approach decisions with a healthy dose of skepticism and humor. The project underscores the potential for innovation in merging quantum computing with everyday applications, highlighting the playfulness inherent in exploring cutting-edge technologies.

In a light-hearted way, our project aims to work on the UN Sustainable Development Goal 3: Improving well-being. Humor and irony can be powerful tools in fostering resilience. By helping users navigate decisions with a blend of randomness and humor, noracle can assist in developing adaptive coping strategies and keeping people #humble.

Try it now @ https://noracle.taipy.cloud/ ! ! 

Inspiration

In the realm of decision-making, the simplicity of a coin flip often masks the complexity behind our choices. Traditional coin flips are deterministic in theory but subject to myriad factors in practice. Enter quantum mechanics, where randomness takes on a new dimension. The idea of a quantum coin flip not only introduces a more ""random"" element but also challenges our perception of certainty versus uncertainty.

Additionally, the juxtaposition of a light-hearted, sarcastic motivational quote with a quantum event underscores the irony of relying on chance for significant decisions. It's a playful reminder not to take life's uncertainties too seriously.

Problem

Decision-making can be daunting, especially when faced with choices that seem equally weighted. Conventional coin flips, while simple, lack the true randomness often desired in uncertain situations. Moreover, the gravity of decisions can sometimes be inflated by the act of leaving it to chance. This project aims to inject a sense of humor and unpredictability into decision-making processes.

Solution

Our solution combines the intrigue of quantum computing with the levity of sarcastic motivational quotes. The process begins with a quantum coin flip, leveraging a Hadamard gate operation in a Cirq circuit. This generates a genuinely random outcome based on quantum principles. Subsequently, a whimsical, context-sensitive quote or haiku is crafted using OpenAI's GPT-3.5 API, adding an element of surprise and amusement to the user experience.

Implementation

1. Quantum Coin Flip


Utilizes Cirq library for quantum circuit design.
Incorporates a Hadamard gate to achieve a superposition state and simulate a quantum coin flip.


2. Quote/Poem Generation


Employs OpenAI's GPT-3.5 API for natural language generation.
Analyses user inputs to craft a personalized, sarcastic motivational quote.


3. Web Application


Developed using Taipy for frontend and backend functionality.
Integrates the quantum coin flip and quote generation processes into a seamless user interface.


Challenges we ran into


time
understanding quantum computing (both of us are novices in this field) 


Accomplishments that we're proud of

It's a funny app that we had fun making. 

What we learned

A large part of our weekend was spent exploring the various quantum algorithms! While our learnings about the theoretical concepts could not be directly applied to our final product, we are glad to have gone though various iterations of grover's algorithm for string detection in dirty data! At the end, we decided to implement a simple yet elegant quantum coin flip to showcase to more people about the fun side of things. 
","https://noracle.taipy.cloud/, https://github.com/leemzius/whseurddy.git",https://youtube.com/shorts/wGPTKrjOgko,"Best Social Good Hack - Bitcamp, Best Use of Taipy - MLH, Most Philanthropic Hack - Bloomberg,  Best Razzle Dazzle Hack - Bitcamp","python, css, cirq, taipy, openai",Leemah,Bisht,leemahb@terpmail.umd.edu,,Best Advanced Quantum Track Hack,Yes,we really liked learning about quantum computing. gave us an opp to focus all on it.,university of maryland,,"University of Maryland - College Park, SUTD",2,fillantrophy02,Dinh,ecnetepmoc@gmail.com
In Retrospect,https://bitcamp2024.devpost.com/submissions/508242-in-retrospect,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:29,"What it does

The app is an interface for both blind people and people who struggle to pick up on social queues to recognize emotions and body language of those who they speak to and gain valuable feedback on how the things they say may affect the listeners in ways they don't expect.

How we built it

We used a react app for the front end to take rapid amounts of pictures and audio snippet recordings which we could then send to the Flask backend for ML analysis.  Then the server responds with live audio snippets that have information about the 

Challenges we ran into

Our initial front end dev had an emergency and couldn't participate so we had to pick up the slack, and dive headfirst into an area which we had little experience in - as none of us have built a react app which sends such a high volume of I/O data.

Accomplishments that we're proud of

We were able to build out a frontend and a backend which could interface with each other sending high volumes of audiovisual data back and forth and analyze it in real time fast enough to give feedback on a conversation while it's still ongoing.

What's next for In Retrospect

We plan on developing for Meta Glasses to make it so more people can use the app in day to day life
",https://github.com/rspapani/BlindnessAgent,,"Best Bitcamp Hack - Bitcamp, Best Social Good Hack - Bitcamp","flask, react, gpt, llm, pytorch, machine-learning",Rishi,Papani,rspapani@terpmail.umd.edu,,Best Machine Learning Track Hack - Bitcamp,Yes,good,UMD,,University of Maryland - College Park,2,Tarun,Murali,tarunmurali02@gmail.com
Untitled,,Draft,Pending,Manage team,4/21/2024 8:31,,,,,,Adam,Haran,adamharan119@gmail.com,,,,,,,,0,,,
MealPrep.pr,https://bitcamp2024.devpost.com/submissions/508246-mealprep-pr,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:32,"Inspiration

My partner and I really enjoy going to the gym and working out so we wanted to make an app to help people meal prep since that is one of the hardest parts.

What it does

It intakes things about your diet now and gives you a meal plan.

How we built it

Using js, html,css, api's and more.

Challenges we ran into

Putting the API into the code.

Accomplishments that we're proud of

Getting our website to work and part of out API working

What we learned

We learned how to use js smart.

What's next for prepWISE

We will keep working on it til its better.
",https://replit.com/@JoshMassey1/PopularPopularSystemsanalysis#public/index.html,,"Best Bitcamp Hack - Bitcamp, Best Social Good Hack - Bitcamp, Best Sustainability Hack - Bitcamp","javascript, json, css, html",Christopher,Ajayi,lightskinchris01@icloud.com,,Best App Dev Track Hack - Bitcamp,Yes,.,Baltimore Polytechnic Institute,,"Baltimore Polytechnic Institute, Johns Hopkins University",1,Josh,Massey,joshua.massey@umbc.edu
Talentide,https://bitcamp2024.devpost.com/submissions/508247-talentide,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:33,"Inspiration

We've been to a lot of job fair ourselves, so we know firsthand how busy it is. There's only time to talk to a few employers, so it's important to have productive conversations. We wanted to have a site to make it easier for students and employers to get the most out of their job fairs. 

What it does

Our site makes use of that time by ranking the top employers that you match with and their open positions. It also shows you how many other students matched with them, so you can gauge how busy it will be and build a schedule. It's useful for employers, too; they can see how many students are matching with their company and what they're matching on. 

How we built it

Our front-end is VueJS with HTML/CSS, and our back-end is python. We parsed the pdf resumes and job descriptions with the pdfplumber and nltk python packages. We first tried to use HDP (hierarchical Dirichlet process), but we decided TF-IDF would be a better way to go. We used TF-IDF over a KNN model to find the best matches between resumes and job descriptions. We focused on hard skills, extracting the keywords from the resumes and job descriptions and weighting them based on how many times they show up, and using machine learning models to fit them together. Finally, we used Cloudflare to join the back- and front-end together.

Challenges we ran into

Cloudflare was hard to work with, particularly when moving PDFs between front- and back-end. We weren't able to get the upload page completely working, so the two ends are not completely connected.

Accomplishments that we're proud of

We were able to clean the data and develop the model fairly well, and we learned how to use OAuth in our sites! We also learned a lot about full-stack and Cloudflare, despite not being able to get it to work in the end. We're also proud of the idea and hope to work on it later. 

What we learned

We learned that joining together back- and front-end is a much bigger challenge than we anticipated.. and that we should have tried out different frameworks. 

What's next for Talentide

We hope to connect our site to our back-end and get it fully functional so some version of it could maybe be used by the UMD career center! We know many students and recruiters would really appreciate it.
",https://github.com/Elena-Rangelov/Bitcamp_2024,,"Best UI/UX Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH,  Best Razzle Dazzle Hack - Bitcamp","python, pdfplumber, nltk, natural-language-processing, vuejs, javascript, html5, html, css, css3, cloudflare, tf-idf, knn, machine-learning, ai, backend, frontend, full-stack",Elena,Rangelov,elenarangelov04@gmail.com,,Best Machine Learning Track Hack - Bitcamp,No,"The tech was all fine, although the MLH helpers were hard to get a hold of and the table was always empty.","University of Maryland, College Park","We registered talentide.us, because we liked how it sounded!  We're helping a young ""wave"" of talent.",University of Maryland - College Park,1,Sriman,Selvakumaran,srimans@umd.edu
KeyCatchAI,https://bitcamp2024.devpost.com/submissions/508248-keycatchai,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:34,"Inspiration

After learning about various cyber-attacks, and the method of side-channel attacks, we were inspired to create a tool that helps pentesters use these less common attack methods. Our attack method is inspired and follows the methodology of the paper ""A Practical Deep Learning-Based Acoustic Side
 Channel Attack on Keyboards"" by Harrison, Toreini, and Mehrnezhad (https://arxiv.org/pdf/2308.01074.pdf)

What it does

Our app records audio secretly, and, using a deep-learning ML model, transcribes the audio into a keystroke log. 

How we built it

We used flutter to build the front-facing mobile app, and flask to run the backend where the ML model was running. To implement the machine learning model, we utilized libraries like pytorch, librosa, and numpy. We also developed a custom keystroke isolator that chops large audio files into separate files of single keystrokes.

Challenges we ran into

We struggled finding adequate training data for our model, and there was not enough time to develop our own robust data for training in 36 hours. We utilized a small but publicly available dataset to train our model instead. We also ran into issues processing and parsing the user recorded audio files as well as issues with background noise and different keyboards that affected the accuracy of our model. There were issues with networking the backend flask server with the mobile app, as we did not have access to a private network. We came up with the solution of using Microsoft devtunnel to securely and locally host our flask server for development.

Accomplishments that we're proud of

We successfully implemented a proof-of-concept model and app that showcases the ability for an acoustic side channel attack on keyboard audio.

What we learned

We came to understand the true difficulty of developing data and training a robust AI/ML model. It really takes a lot of training data and hours of testing to develop a truly accurate model.

What's next for KeyCatchAI

The plan for KeyCatchAI is to improve the ML model by generalizing it to many different keyboards and improving its robustness and accuracy in noisy environments.
","https://github.com/V-Coding/Bitcamp2024, https://github.com/3752V/KeyCatchAI",,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Moonshot Hack - Bitcamp, Best Digital Forensics Related Hack - Cipher Tech","flutter, python, flask, pytorch, librosa, numpy, dart, devtunnel, google-colab, git, github",Viraj,Urs,virajurs51@gmail.com,,Best Cybersecurity Track Hack - Bitcamp,Yes,"We used Github, git, flask, flutter, python, pytorch, dart, and numpy.",University of Maryland - College Park,,University of Maryland - College Park,2,Vishram,Urs,vishram.urs@gmail.com
TaxCut,https://bitcamp2024.devpost.com/submissions/508252-taxcut,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:41,"Inspiration

We were inspired to make TaxCut because my entire team is full of people aspiring one-day to become startup founders. After attending trade shows and meeting multiple executive-level people, from various countries and companies, we are breaking into the startup realm, a world full of imagination and our self-progress. Part of making a business, of course, is incurring hundreds of costs along the way, and each cost of course will come across tax. Do you also hate paying taxes, like tens of millions of Americans everywhere? Trust me, this digital financial advisor app will not only help you

What it does

This app identifies all costs you have made within a business accounting period for one month, and using Capitol One's Nessie API, we were able to organize different fields of a business owner's bank account. Users are welcomed to making a new account on the platform, where they can then include any new bills or loans they already have or are planning to take. They are then navigated to a screen with a financial advisor, built with Azure's OpenAI Service to analyze the user's data and financially speak to the user about the best tax codes to use on purchases and expenses they have made (since it works like a rebate), and also the best expenditures to take moving forward with their business as a full set of eyes over your business' financial state. The user is met with a couple niche elements to really provide an interesting experience on the platform, such as the Speech SDK from Azure, which allows users to speak into a microphone instead of having to type out their response for ease of access, and our response will be provided to the user also through a voice of its own, with the computer's spoken response being tracked on an AI transcript. The last portion of our app is aimed at Cloudforce's task, where we were asked to ask users about any potential disastrous experience they have faced physically, such as losing their home to a tornado. Our recovery and situation trained AI advisor will inform the user about the best government aid and recovery procedures that they can follow, outside of just home insurance, to claim the best reimbursement on any losses they have faced. We will provide them with the three best tips to help them recover faster than ever, almost dissipating their traumatic experience with a sense of relief.

How we built it

We used the following technologies while building this full-stack web application: React JS, Microsoft Azure, ChatGPT OpenAI API, Django REST API, Python Flask server, Express.js

Challenges we ran into

The biggest challenge we ran into while bringing this app to light were ensuring that the endpoints for the backend worked seamlessly with the frontend; on the backend, we created a high number of user-input fields, each being branched into overarching sections and modals, which lacked organization throughout the build.

Accomplishments that we're proud of

Although it took a long time for us to code out this project, the achievements we got through this project is insurmountable. We developed our own ai that verbally talks to the user and remembers the conversation, something we had never done before. On top of that, we used a lot of technology we weren't as familiar with, such as Flask, Express, and Azure.

What we learned

Throughout the project, we learned a lot regarding the tech involved with this. For example, we wanted to incorporate ai into the project that REMEMBERED your past conversations / choices, so we had to look for something that hit those qualifications. We ended up researching Langchain, a model that remembers the conversation and also verbaly talks back

What's next for TaxCut

The next steps we have for Taxcut is to analyze a users financial decisions now and to make it fit their budget for the next upcoming years. If they have a financial goal in mind, the ai will help them reach that point
",https://662512af6fb671ba833c6a93--steady-gaufre-16aa7e.netlify.app/,,,"react, django, flask, express.js, langchain",Pratham,Pilli,starninjaz8055@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,We had a fun time learning about the machine learning models over the workshops that were present,Rutgers New Brunswick,No,"Rutgers, The State University of New Jersey",2,Akash,Puzhakkal,rareboy414@gmail.com
Best AI Powered Solution for Defense Contracts,https://bitcamp2024.devpost.com/submissions/508254-best-ai-powered-solution-for-defense-contracts,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:43,"Inspiration

We wanted to build something with AI because all of us had desire to build ai stuff using code since we are passionate about machine learning

What it does

It takes the government website that was listed on the instructions and uses the Beautiful method to extract contracts associated with the link and extract the data needed for this project

How we built it

We used lots of python imports such as selenium and beautiful soup. First we Identify a website, then we make the driver go there to identify the right website. then it scraps the website and then later it tries to get the labels it needs.

Challenges we ran into

The challenges was that we had to overlook html a bit because our code required some html so the trickest part was to find the identifiers from the other website for that. 

Accomplishments that we're proud of

We did lots of extraction data, we used python methods we never used such as selenium and beautiful soup which are considered AI tools beyond our classes

What we learned

We learned that looking around the internet could give us reference about making this project such as the internet suggesting beautifulsoup

What's next for Best AI Powered Solution for Defense Contracts

Not sure, but the best thing right now is that they also need to find a way how to make these contracts confidental but I'm not sure how would that work
",https://github.com/Jonathan-Beltran/bitcamp2024Hackathon,,Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group,"python, pandas, selenium, html",Tyler,Vu,forcefield0311@gmail.com,,Best Machine Learning Track Hack - Bitcamp,No,"It was pretty great, working at a team was a fun experience. We learned new tools in python and some of us used html",University Of Maryland College Park,,University of Maryland - College Park,1,python8utoo,p,python8utoo@gmail.com
Connotate.AI,https://bitcamp2024.devpost.com/submissions/508258-connotate-ai,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:46,"Inspiration

English is our second language and we've been struggling with analyzing quotes ever since the first grade. ICE SPICE

What it does

It takes in a phrase as input, puts it through the AI and it outputs the predicted sentiment of the phrase.

How we built it

We used HTML and CSS to build the UI. We used datasets from kaggle, trained them on Colab with models from Distillberg.

Challenges we ran into

One of our teammates went on a ""boba run"" and didn't come back for the entire first day. We also spent a long time obtaining good datasets. 

Accomplishments that we're proud of

The program can output phrase sentiment with 70% real accuracy, which is good considering we created this AI. Plus, the UI looks good for first-time HTML and CSS coders. 

What we learned

We learned that we need large datasets to create accurate AI and that Macs train AI very slowly. I BE GOIN HARD

What's next for Connotate.AI

In the future,  we want the model to also be able to give connotative meaning to the phrases.
GRAH
",https://github.com/yuzhiliu8/Connotate.AI.git,https://youtu.be/lG6MPSOQsP4,,"python, html, colab, huggingface, css, javascript",Yuzhi,Liu,yuzhiliu8@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"We used GitHub to share code, it took a little time to learn all the branches, pushing, and pulling, but in the end it was very streamlined and easy to use.",Winston Churchill High School,,"Winston Churchill, Winston Churchill High School",3,Andrewg314,Guo,andrewguo108.dog@gmail.com
FinForecast,https://bitcamp2024.devpost.com/submissions/508262-finforecast,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:50,"Inspiration

I have started to get into stocks as I want to make sure that I have a good source of money before I retire. I am sure that it is not only me there are millions of other people who want to be secure as well. But the thing is I am not great with stocks and I simply don't have the time to constantly research stocks to make the right choices. But I can code, so I decided to create an app that would help other people like me make better financial decisions by using ML to predict stock prices for me.

What it does

This app gets data from yahoo finance through an API for more than 100 different stocks and then performs different data analyses. First, the data is used for long-term predictions with the help of Facebook Prophet, a model created by Facebook for this specific reason. Then moving 100 and 200 averages are created. These are two easy ways to help people learn about the trends of a stock. Whenever the 100 moving average goes above the 200 moving average that means it is the start of the up trend. Whenever the 100 moving average goes below the 200 moving average that is the start of the down trend. Lastly, the data is used for the LSTM model which is a variant of the RNN model that replicates the way our human brains work with long-term and short-term memory.  The model takes the most recent 50 days of data tries to find a trend looks back to see if there has been a similar trend before and predicts the stock price for the next day. The model then adds this new number to the short-term memory and moves the very last day to long-term memory. This process is constantly being repeated. At the bottom of the page, there is a price for the next day.

How we built it

First I used a framework called streamlit that creates web apps for python. Then I used an API to connect to yahoo finance so that I could get the stock data. Then I used facebook prophet to predict long term. Then I provided stock analysis with moving averages. Then lastly I created an LSTM model with the help of tensorflow-keras to help predict short term.

Challenges we ran into

I was having a hard time training the LSTM model and it took way to long for the training to be completed. After resolving that issue the web page was taking way to long to load, so we had to pre train the model and then use it. This was also a huge problem as I had a hard time figuring out how to use the pre-trained model.

Accomplishments that we're proud of

I am happy that I was able to use a new ML model that I have never used in the past. I am glad that everything worked out well.

What we learned

I learned how to host a python web app with streamlit and how to create an LSTM model which was really difficult. I also learned a lot about stocks and how with just previous stock prices it is not to difficult to predict short-term. 

What's next for FinForecast

I hope to maybe add some sort of authentication so that different users can have access to specific stock information that they are interested in. I would also like to see if I can come up with my own model for long term predictions.
","https://finforecast.streamlit.app/, https://github.com/ShashankThirumale/stockprediction/tree/main",https://www.youtube.com/watch?v=QFXvqnQlWAU,"Best First Time Hack - Bitcamp, Best use of AI/ML Innovation for the Francis Scott Key Bridge Recovery Efforts - Cloudforce, Best Financial Hack - Capital One","streamlit, yahoo-finance, python, tensorflow, lstm, gcp, facebook-prophet",Shashank,Thirumale,sthiruma@terpmail.umd.edu,,Best Machine Learning Track Hack - Bitcamp,Yes,I used Streamlit for the first time and it was a great experience I was able to play around with how the web app looked and all the graphs look great.,University of Maryland,,University of Maryland - College Park,0,,,
CDaily,https://bitcamp2024.devpost.com/submissions/508263-cdaily,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:50,"What it does

CDaily is a web scraping app that scrapes Certificate of Deposit (CD) rates from 10 public banks and credit unions including but not limited to Capital One, Navy Federal Credit Union, etc. We’ve done the research and compiled a plethora of rates into one place, striving to help people with less capital make smarter investments. Users are able to freely traverse rates via a table, filtering by APY, term length, bank name, minimum deposit etc.  They can also use our calculator to estimate their total profit. In addition, you can sign up for weekly notifications for the top weekly rates, as well as view them on our very own chrome extension!

How we built it

CDaily is a multilanguage application using libraries such as React.js and Tailwind CSS for the front-end side of the application.  On the back end, we used Node and Puppeteer.js to load chrome pages, and then uses different parsing methods (regex/querySelectors) in order the create new JSON objects:
for example:
{
    ""TermAmnt"": 3,
    ""TermType"": ""MONTH"",
    ""Deposit"": 1000,
    ""APY"": ""2.75%"",
    ""Bank"": ""Navy Federal Credit Union"",
    ""Url"": ""https://www.navyfederal.org/checking-savings/savings/savings-resources/certificate-rates.html""
  },
We also used the Google Chrome extension developer platform to create and submit for review a working extension for the site.

Finally, we used a PHP backend for subscribing to a weekly notification system. 

Challenges we ran into


Connecting React and JavaScript to coexist, working in conjunction with PHP. 
Creating a Chrome extension within a project with multiple root JSON files is difficult to navigate not being able to create a path from the JSON file to the extension page, because it was made in React instead of pure HTML.
Being able to actually publish an extension, as well get approval for advertisements takes more than 36 hours to actually get approved.
Debugging asynchronous programs is not supported by VSCode as far as we can tell.


Accomplishments that we're proud of


We're really proud of the UI, and how polished the entire site looks
We're proud of how functional the rates and calculator page is and think it's really intuitive/user friendly.
-John: Going from a first-time JavaScript user to building a robust web scraping application


What we learned


John Dinkel is a first-time hackathon participant. He learned how to not only web scrape data using Puppeteer and Node.js, but he also learned JavaScript as a new language!
Evan Masiello, a first-time hackathon participant learned how to take JSON data and transform it into an iterable well formatted dataset in React.js. In addition, he learned how to create an email notification system using PHP.
Benjamin Johnson, a first-time hackathon participant learned how to create and submit a chrome extension for review. In addition, he developed a lot of the styles for pages including a confirmation email, and submission form confirmation.
Caleb Holland, a first-time hackathon participant continued to hone his sense of design by working on the front-end for the application using React.js and Tailwind CSS. His teammate Evan saw concept art that he was working on and said, ""there's no way he could make that in 36-hours"". In the end, Evan was so impressed that he needed to include his quote in my personal description. 


What's next for CDaily

What's next for CDaily? More banks! As we continue to work on the app in the future, we will be adding support for more banks, as well as streamlining the data collection process, and improving the overall UI.
",https://cdaily.co/about,https://www.youtube.com/watch?v=LWLLgXp7gMU,"Best Bitcamp Hack - Bitcamp, Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Domain Name from GoDaddy Registry - MLH, Best Financial Hack - Capital One","node.js, react, puppeteer.js, tailwind, css3, html, php",Evan,Masiello,evanmasiello@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,N/A,University of Maryland College Park,https://cdaily.co/about,"University of Maryland - University College, University of Maryland - College Park",3,John,Dinkel,johnmdinkel@gmail.com
Quizodoro,https://bitcamp2024.devpost.com/submissions/508266-quizodoro,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:54,"Inspiration

The inspiration for Quizodoro came to me during BitCamp, sparked by observing the struggles and desires of college students and friends alike. I noticed how we all craved efficient study methods that also challenged our knowledge retention. That's when it hit me: why not combine the structured focus of the Pomodoro technique with the engaging element of quizzes?
I wanted to create something that not only helped people study better but also made the process enjoyable. Drawing from my own experiences and those around me, I realized the potential of blending technology with learning.

What it does

Quizodoro, combines the Pomodoro study technique with dynamic quiz generation based on PDF content. It allows users to set a specific study duration, during which they engage in focused learning. When the time is up, the app presents them with a quiz related to the topic they've been studying. This innovative approach not only helps users manage their time effectively but also reinforces their learning through interactive quizzes.

How we built it

Backend Setup:
-Utilized Python with Flask framework to create the backend structure.
-Used PyPDF2 library for PDF text extraction in file_processing.py.
-Implemented quiz generation logic in quiz_generation.py using LangChain for question generation 
  based on given text.
Frontend Structure:
-Developed frontend using HTML, CSS, and JavaScript, structured according to Flask's template 
 rendering.
-Created a form for users to input study duration in minutes (pomodoro_timer.html).
Flask Routes:
-Defined Flask routes in app.py to handle user interactions.
-/pomodoro: Renders the study duration input form and saves the duration in the session upon form 
  submission.
-/upload: Handles file upload, extracts text from PDF files, generates quiz questions based on the 
  extracted text, and renders the quiz page with the generated questions.
Quiz Generation:
-Implemented generate_questions() function in quiz_generation.py to split the text into chunks and 
 query LangChain for generating multiple-choice questions.
-Used ChatGoogleGenerativeAI and geminiApi from LangChain with a predefined prompt template to 
  generate questions based on the given context.

Challenges we ran into

As this was our first hackathon, we ran into many challenges, we learned about langchain and LLMs on the go, and how to use the API keys. But I would say the hardest part was the research and what to use while working on it. Moreover, implementing python and HTML,CSS and JS using flask was also a new thing , but it was quite fun. We first tried to make it on tkinter but the GUI is difficult to deal with and it is difficult to deploy it publicly.

Accomplishments that we're proud of

That we nearly finished this app , just some fine tunings are required, we are also proud that were able to nearly finish the project in given time and use of LLMs was the proudest moment for us and implemeting it.

What we learned

Learned a lot about Gemini API and Flask and Automation.

What's next for Quizodoro

We will try to make it such that it will also give a cheatsheet about the topic that you did not do well in and launch the product.
",https://github.com/Soham-1827/Quizodoro.git,,Best First Time Hack - Bitcamp,"python, chatgooglegenerativeai, langchain, html, css, javascript, flask",Soham,Choulwar,sohamchoulwar.27@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,The weekend was great and GITHUB came in clutch.,Arizona State University,,Arizona State University,2,Kashyap Hegde,Kota,kkota3@asu.edu
Mental health assessment ,https://bitcamp2024.devpost.com/submissions/508268-mental-health-assessment,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:55,"Inspiration

Just an thought of the brain

What it does

it asses people and then gives them a plan to help the issue 

How we built it

using replit visual studio the cdc and 

Challenges we ran into

Getting lost in the code and losing where we were at

Accomplishments that we're proud of

Just coming and trying.

What we learned

Many new things about html coding 

What's next for Mental health assessment

Ill  probably work on it at home and finish it
",https://replit.com/@Drc720/ExaltedShorttermFacts,,,"python, javascript, html",Danny11109,Carter,drc720@icloud.com,,Best App Dev Track Hack - Bitcamp,No,"git hub, slack, replit ,visual studio and bootstrap",Baltimore polytechnic institute,,Baltimore Polytechnic Institute,0,,,
Xficient Bot,https://bitcamp2024.devpost.com/submissions/508269-xficient-bot,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:55,"# Inspiration

Our inspiration stemmed from the need for a streamlined solution to manage university course catalogs efficiently.

# What it does

Xficient Bot revolutionizes course catalog management by using unsupervised learning to cluster uploaded files. It seamlessly integrates the GPT API through Lang Chain, providing intuitive access to course information.

# How we built it

We built Xficient Bot using a combination of advanced unsupervised learning algorithms for data clustering and the GPT API for natural language understanding. Lang Chain facilitated the connection between the data and the GPT API. 

# Challenges we ran into

One major challenge was ensuring seamless integration between the unsupervised learning algorithms and the GPT API. Additionally, optimizing the performance of the clustering algorithms for large datasets posed another hurdle.

# Accomplishments that we're proud of

We're proud of our integration of our data clusters into lang chain and creating that connection for the gpt API to draw information from. 

# What we learned

Through this project, we gained valuable insights into the complexities of integrating machine learning algorithms with natural language processing technologies. We also honed our skills in optimizing algorithms for scalability and performance. Most importantly, we learned how to architecture large projects and work with data handling. 

# What's next for Xficient Bot

In the future, we aim to enhance Xficient Bot's capabilities by directly extracting, clustering, and storing information into the Milvus database, which will significantly enhance processing speeds and information accuracy. 
",,,University Course Catalog Data Extraction and Query Challenge - Xficient,"python, natural-language-processing, gpt, openai",Rahul,Nair,rahulnair307@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,"Over the weekend, our team's technology experience was transformative. We embraced Lang Chain as a crucial link between our data processing algorithms and the GPT API, streamlining communication and enhancing our bot's capabilities. Exploring Large Language Models for the first time opened our eyes to new possibilities, igniting our passion to push the boundaries of AI-driven solutions like Xficient Bot.","University of Maryland, College Park",,University of Maryland - College Park,2,Lakshay,Sharma,lakshaysharma2005@gmail.com
Terp Hub,https://bitcamp2024.devpost.com/submissions/508270-terp-hub,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:55,"Inspiration

Bit camp is I and my team's first hackathon, and it showed us just how much collaboration can help while growing in tech by meeting and discussing with people with more experience and insights, attending workshops, participating in healthy competition, and having the opportunity to showcase projects. This inspired us to make a social platform where students in a local area, in this case UMD can always have access to resources like this without waiting for big events like bit camp every year. 

What it does

Our project is a social platform that connects Tech students by giving them access to resources to help them learn and a stage to showcase their Projects to encourage learning.
The app features:

Project ideas:

A section that gives students inspiration on what type of projects they might want to take on next. with recommendations on tutorials and DIY projects.

Project Spotlight:

This allows students to showcase their projects, students are more likely to start projects when they know there would be a way to showcase them and get meaningful feedback from the community.  

Workshops:

A list of locally available workshops that students can attend to build their skills these workshops will be hosted by the Terp hub club later down the line when we get more student interaction and ultimately more funding and sponsors. 

Meetup & connect:

Helping students connect with other students on campus to encourage collaboration and mentoring.

The Hub:

A general forum for students to share thoughts and ask for help.

How we built it

We built the mobile app using Flutter as the front-end framework and Firebase for the back end. 

Challenges we ran into

During the process, we ran into a couple of challenges:


Learning to use flutter and firebase
Developing, and designing as much of the app as we could while we also brainstormed ideas with the time we had. 
Gathering publicly available resources


Accomplishments that we're proud of

We are proud of the fact that we were able to come up with an idea that holds so much potential despite not being able to complete development, we plan to continue working on it till the official launch. We as a team had little experience with developing with Flutter and we are proud of what we were able to achieve and what we can achieve in the future. 

What we learned

We learned a lot about Flutter and working with VCS like GitHub and design applications like Figma we also learned what it takes to build a project from the group up as a team.

What's next for Terp Hub

Bit camp was just the birth of the idea, we plan to continue development subsequently till we eventually become what we envisioned for the project. The end goal is to become self-sustainable and to have the ability to host events and provide locally available resources to help students. If our hope becomes reality, we plan to branch out to other schools after gaining a strong hold in UMD. 
","https://github.com/alem425/TerpHub, https://www.figma.com/file/X22RdkuOmlgwu8XFOBIKMF/Untitled?type=design&node-id=4-2&mode=design&t=rQLvqZ4TUiDZ9jbE-0",,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp","firebase, flutter, javascript, figma, dart, firestore, mobile, android, ios",oraimo,adewumi,adewoledarasimi25@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"This hackathon allowed US to interact with technologies like Flutter, Figma and Git extensively as a group.",University of Maryland College park,terpshub.com,"Prince George's Community College, University of Maryland - College Park",1,Fadeela,Ali,fadeelaali43@gmail.com
Intro to Quantum,https://bitcamp2024.devpost.com/submissions/508274-intro-to-quantum,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:57,"Inspiration

To learn the fundamentals of Quantum Computing and apply its key concepts to real-world problems.

What it does

Simulates quantum circuits.

How we built it

Solved Quantum Computing problems using python.

Challenges we ran into

One challenge I ran into was applying Grover's algorithm to the last challenge problem.

Accomplishments that we're proud of

I'm proud to have completed the four notebook problems of Quantum Computing and to have attempted the Advanced Quantum track challenge problems without any prior knowledge of Quantum. Also for successfully applying Quantum Computing to real word problems.

What we learned

Learned new concepts of Quantum Computing.

What's next for Intro to Quantum

Learn more advanced concepts of Quantum Computing.
",,,,python,Andy,Cruz,andywcruz3005@gmail.com,,Beginner Quantum Track Hacks - Bitcamp,Yes,NA,Baltimore Polytechnic Institute,,Baltimore Polytechnic High School,0,,,
Untitled,,Draft,Pending,Manage team,4/21/2024 8:57,,,,,,Kashyap Hegde,Kota,kota2022kashyap@gmail.com,,,,,,,Arizona State University,0,,,
Matchbox: ,https://bitcamp2024.devpost.com/submissions/508276-matchbox,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 8:57,"Do you have a specific obsession or niche interest that you define yourself by? Matchbox is a versatile mobile application designed to guide users to other users by evaluating their personalized recommendations. 

In Matchbox, users encounter a diverse array of random items waiting to be explored. With a simple swipe left or right, users can effortlessly rate these items, contributing to their personalized user profile and shaping their individual preferences. These ratings serve as valuable insights into each user's unique tastes and preferences, enabling Matchbox to tailor its recommendations with unparalleled precision. Matchbox fosters a vibrant community of engagement and interaction, allowing users to connect with others seamlessly through integrated chat functionality. Here, users can discuss their latest discoveries, share insights, and compare individual leaderboards, creating a dynamic and collaborative environment that enriches the overall user experience. Whether it's debating the merits of a recent movie recommendation or exchanging tips on the latest culinary find, Matchbox empowers users to engage with content in meaningful ways.

Matchbox utilizes a full-stack React framework with StreamChat. While we were unable to purchase the API for full chat functionality, only the rating-side aspects of the app are currently live. We hope to implement the feature in future iterations.
",https://snack.expo.dev/@jwizard05/a73d52?platform=web,,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp","react, react-native, javascript",Josh,Tagle,joshtag05@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,Expo Snack was used to develop the React code.,Baltimore Polytechnic Institute,,Baltimore Polytechnic Institute,0,,,
Beginner quantum,https://bitcamp2024.devpost.com/submissions/508280-beginner-quantum,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:00,"Inspiration

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Beginner quantum

Interested in quantum
",,,,cirq,Kevan,Kazeminezhad,kazemkev@terpmail.umd.edu,,Beginner Quantum Track Hacks - Bitcamp,No,Enjoyable,UMD,,University of Maryland - University College,0,,,
PolyGone,https://bitcamp2024.devpost.com/submissions/508281-polygone,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:01,"Inspiration

Kids are getting phones at younger and younger ages presenting new ways to ensure their safety. We wanted to help parents in situations when they cannot constantly monitor their children, especially for working families. We wanted to help children stuck in the terrifying situation of being separated from their parents and guide them back to safety. This inspired our application whose use cases cover all types of monitoring or location tracking.

What it does

A customizable geolocation tracking application that helps monitor targets and direct them back to you!
Polygone has a parent/owner-facing side through a web app and a corresponding child/target-facing mobile app. The parent/owner uses the web app to track the target's location and an draw a polygon on a map to keep the target within. If the target leaves the zone their device vibrates and displays a compass to safely and interactively direct them back to the center of the zone! This is done by creating user-defined zones with the Google Maps API, Firebase, React, and React Native. Users outside any specified zones will have their devices notified and a guide will be provided to direct them back to the target location.

How we built it

Google Maps API, Firebase, React, and React Native

Challenges we ran into

Keeping accurate information based on user location required precise calculations using GPS coordinates of active devices. Also, transmission of information between the application and the monitor device required use of a central database, due to the difficulty of tracking the information needed in the calculations. Difficulties related to the React Native compass required us to use the internal magnetometer to create our own.

Accomplishments that we're proud of

Coming into this hackathon, our team members had near-zero experience with using Google Maps API, Firebase, React, and React Native. Building this application allowed us to learn mobile and web development for integrated cross-platform applications. 36 hours later we have created a functioning web-app and mobile app with a backend using multiple API integrations for internal smartphone tools.

What's next for PolyGone

In the future, we can add more zones and the ability to separate target devices. This technology can be applied to other location-tracking devices beyond smartphones for wider applications, such as tracking rental vehicles or retail valuables.
",https://github.com/caramurphyy/bitcamp2024,,"Best Bitcamp Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Social Good Hack - Bitcamp","react, react-native",Cara,Murphy,clmurphy@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,good,"University of Maryland, College Park",,"University of Maryland - College Park, University of Maryland - University College",3,Robert,Xu,xyu.robert@gmail.com
Hand,https://bitcamp2024.devpost.com/submissions/508283-hand,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:02,"Inspiration

A prosthetic that is both accessible and usable 

What it does

Moves and grabs

How we built it

Used servos to power the movement of tendons in the cardboard hand

Challenges we ran into

The cardboard was difficult to work with 

Accomplishments that we're proud of

Making the hand have nearly full motion 

What we learned

That the problem is sometimes physical not digital 

What's next for Hand

3d printing 
",,," Best Hardware Hack - Bitcamp, Best First Time Hack - Bitcamp, Best Social Good Hack - Bitcamp",arduino,Eva,Bachman,eva.r.bachman@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,The Arduino initially did not function so we had to borrow a new one,Baltimore Polytechnic Institute,,,1,Lauer,Saylor,lauersaylor@gmail.com
Touching Grass,https://bitcamp2024.devpost.com/submissions/508287-touching-grass,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:03,"Inspiration


We're addicted to social media and video games and are often told to go ""touch grass."" We know there's a lot of people on the same page, so we decided to make a social media for the entire demographic. Nothing quite like peer pressure to get you to go outside and embrace the outdoors!


What it does

You can post captioned pictures to the map, see the pictures others have taken and where they took them, and upvote/downvote the posts others have shared! Get out there, take the coolest pictures, and compete with your friends for the highest score! 

How we built it

For the front end, we wrote our code in react native (expo). We styled our app using styled components. For the map we used react native maps, the Google Maps SDK API, and expo location. For the camera, we used expo camera. For the backend, we used MongoDB Atlas with express/node, as well as socket.io to keep the location updated.

Challenges we ran into

Backend, backend, backend. Axios issues. Also navigating all the different libraries with our inexperience was very challenging. 

What's next for Touching Grass

Weekly challenges! Additionally, we want to add a relevance algorithm to display well liked posts and those of your friends within a certain distance of where you stand. Absolutely NO algorithm for the feed to prevent doomscrolling. 
",,https://youtu.be/Flsg4xUlcaI,"Best Moonshot Hack - Bitcamp, Best Gamification Hack - Bitcamp,  Best Razzle Dazzle Hack - Bitcamp","javascript, react-native, expo.io, node.js, socket.io, google-maps",Brandon,Newman,bnewman6@terpmail.umd.edu,,Best App Dev Track Hack - Bitcamp,No,"Lots of frontend, lots of backend troubles. Lots of messing around with some cool libraries.",UMD,No,"University of Maryland - College Park, University of Maryland - University College",3,Alex,Shrestha,ashrest6@terpmail.umd.edu
CodeEnhance,https://bitcamp2024.devpost.com/submissions/508289-codeenhance,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:04,"Inspiration

The inspiration for CodeEnhance came from observing the everyday challenges developers face while coding, particularly the repetitive nature of reviewing and optimizing code. Our goal was to create a tool that automates this process and educates developers by explaining suggested improvements. This tool aims to speed up the development process, improve code quality, and help developers learn best practices.

What it does

CodeEnhance allows developers to input their code snippets into an interactive editor and receive instant feedback with enhancements and explanations. The tool supports multiple programming languages and provides a dual-editor view where the original code and the enhanced version are displayed side-by-side. This not only helps in immediate comparison but also aids in understanding the improvements through detailed annotations.

How I built it

CodeEnhance was built using the following technologies:


Frontend: Next.js and TailwindCSS provided a robust framework for building a fast and responsive UI.
API: The OpenAI API was used to process the code submitted by users and suggest enhancements.
State Management: React's useState and useEffect hooks handled the internal state and side effects.


Challenges I ran into

One of the major challenges was handling the rate limits and response parsing from the OpenAI API. It was also challenging to develop an intuitive UI that could dynamically accommodate different programming languages and their syntax highlighting. Furthermore, ensuring the code suggestions were accurate and contextually appropriate required fine-tuning of the API requests.

Accomplishments that I'm proud of

I am particularly proud of several aspects of CodeEnhance:


AI Integration: Successfully integrating the OpenAI API to suggest code corrections and explain each suggestion was a significant accomplishment.
Multi-language Support: Implementing support for multiple programming languages was a complex task that broadened the tool's utility.
User Interface: Developing a clean, responsive, user-friendly interface that enhances the user experience. The ease of use and accessibility of the UI makes the tool more approachable for developers of all skill levels.
Real-time Feedback: Providing real-time, actionable feedback to users helps in immediate learning and applying best coding practices.


What I learned

Building CodeEnhance was an incredible learning experience. I delved deeper into the realms of Next.js and TailwindCSS for the frontend, making the application responsive and accessible. Integrating the OpenAI API to generate code improvements and explanations provided hands-on experience with AI-driven development.

What's next for CodeEnhance

Looking ahead, we have several exciting developments planned for CodeEnhance:


Expanded Language Coverage: We plan to extend support to more programming languages and frameworks, making the tool accessible to a broader developer community.
Advanced AI Features: Future updates will include more advanced AI capabilities, such as predictive typing and deeper code analysis for security vulnerabilities.
Integration with Development Environments: We aim to integrate CodeEnhance directly into popular development environments like VS Code and JetBrains, providing suggestions and enhancements without leaving the IDE.
Community Features: Implementing a community-driven module where developers can share their solutions and enhancements to foster a collaborative environment.
Educational Content: Adding educational content that helps newer developers understand complex code improvements through in-depth articles and videos linked directly with the enhancements suggested.

",,,"Best Moonshot Hack - Bitcamp, Best use of AI/ML Innovation for the Francis Scott Key Bridge Recovery Efforts - Cloudforce, Most Philanthropic Hack - Bloomberg,  Best Razzle Dazzle Hack - Bitcamp","next.js, tailwindcss, openaiapi, react, github, javascript, typescript",siddhantparadox,Gupta,siddhantg314@gmail.com,,Best Machine Learning Track Hack - Bitcamp,Yes,I learnt some really cool ways to use the tech I wanted to use.,University of Maryland Baltimore County,,University of Maryland - Baltimore County,0,,,
Money Town,https://bitcamp2024.devpost.com/submissions/508291-money-town,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:06,"Inspiration

The inspiration for Money Town came from my passion for educating people about financial literacy in a way that is both engaging and calming. I wanted to create an app that combines the excitement of gaming with the educational benefits of learning about money management.

What it does

Money Town is a mini-game based app that focuses on educating players about various aspects of personal finance, such as budgeting, saving, investing, and more. The theme of the app is centered around calmness and incorporates anime-inspired vibes to create an immersive and enjoyable experience.

How I built it

We used Figma to create this app

Challenges I ran into

One of the main challenges I encountered was balancing the gameplay elements with the educational content. I wanted to ensure that the game was both entertaining and informative without overwhelming the players with too much information. Additionally, we on a time crunch so, we could not code the app. 

Accomplishments that I'm proud of

I am proud that we were able to get a prototype working and have an app that showcases our ideas.

What I learned

Through the development of Money Town, I learned the importance of user experience design and how to effectively blend gaming mechanics with educational content. I also gained insights into financial concepts and how to present them in a clear and engaging manner.

What's next for Money Town

In the future, I plan to expand Money Town by adding more mini-games, challenges, and interactive features. I also want to collaborate with financial experts to ensure that the educational content remains up-to-date and relevant. Additionally, I aim to reach a wider audience and continue promoting financial literacy in a fun and accessible way.
",https://www.figma.com/proto/9Fo1B5Gd0j2SALF0gJgmxL/Money-Town?type=design&node-id=63-95&t=P3GH3UmNXlThVkpN-1&scaling=min-zoom&page-id=0%3A1&starting-point-node-id=37%3A12&mode=design,https://vimeo.com/937367604?share=copy,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp",figma,Prajita,Shrestha,prajita2061@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,No,Figma,"University of Maryland, Baltimore County",,"Perry Hall High School, University of Maryland - Baltimore County",1,Channing,Tu,ctu1@umbc.edu
Cramberry,https://bitcamp2024.devpost.com/submissions/508292-cramberry,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:08,"This project was inspired by my inability to focus on menial classwork. As someone with a learning disorder, focusing on small reading materials can suddenly become a monumental task. By highlighting and defining keywords, I can make this task much  simpler for both myself and others that struggle with the same issue.
",https://github.com/Pouncetail/Bitcamp2024.github.io.git,,Best First Time Hack - Bitcamp,"python, spacy, react, vite, javascript",Kevin,Fan,aegirosaurus@gmail.com,,Best Machine Learning Track Hack - Bitcamp,No,"We mainly relied on github control, which was efficient and helpful for managing teamwork.",University of Maryland,,University of Maryland - College Park,1,Bryan,Gao,brybryboi215@gmail.com
Personal Calendar,https://bitcamp2024.devpost.com/submissions/508293-personal-calendar,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:08,"Inspiration

A calendar.

What it does

Allows you to customize your calendar with your own personal touch that reflects who you are.

How we built it

I used web development basics to develop the 

Challenges we ran into

Centering things

Accomplishments that we're proud of

Calendar for the year 2024-2025

What we learned

Better HTML and CSS skills

What's next for Personal Calendar

Making it into a reminder 
",,,Best Social Good Hack - Bitcamp,"html5, css3, javascript",Kiet,Tran,kiettran0816@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,GitHu,Baltimore Polytechnic Institute,,other,0,,,
The Floridian House,https://bitcamp2024.devpost.com/submissions/508296-the-floridian-house,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:12,"Inspiration

Climate change, mostly. Our team is most concerned about the impending death of our planet, and observing how Florida, a region particularly vulnerable to the effects of climate change, handles these events serves as an interesting blueprint for what might happen at a larger scale across the world further down the road. Moreover, it was a very good opportunity for us to work with datasets and libraries like pandas for the first time.

What it does

Our project is a visualization of Florida’s housing trends graphed against weather-based indicators. We also make an attempt to analyze said trends and draw conclusions about the driving forces behind them.

How we built it

We found several datasets about various indicators of Florida’s housing market and climate events. We condensed these down into a single database which we used to visualize the data we gathered, before finally creating a website to host our key findings.

Challenges we ran into

Our single biggest challenge was to acquire datasets that were both relevant and compatible with each other. Specifically, detailed housing data was hard to acquire, and we were only able to find trends from a quarter century ago. Second, we could not figure out how to incorporate a lot of the data we gathered for our project. These factors prevented us from conducting the in-depth analysis we set out to accomplish.

Accomplishments that we're proud of

We collected a large amount of data about Florida's houses and weather trends, and managed to condense our important findings from it into an easy-to-digest format. We did this using platforms that were previously completely alien to us, and I’m glad that we took this hack as an opportunity to learn.

What we learned

We learned to work with Python libraries like pandas, matplotlib, and Plotly for the first time. This was also our first time building a web application with Flask which we found to be pretty awesome.

What's next for The Floridian House

If we work on our hack after the hackathon, we would like to incorporate much more of the data we gathered. Furthermore, we’d like to create a more sophisticated searching/sorting algorithm to organize our website better.
",https://github.com/russianraspberry14/TheFloridianHouse.git,,Best Use of APIs related to Housing/Climate Change - Fannie Mae,"python, html5, css3, javascript, pandas, matplotlib, plotly, flask",Ekansh,Sahu,esahu14@terpmail.umd.edu,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,"GitHub: already familiar with it, and had a smooth experience. 
Kintone: Was a bit confused by the platform, and didn't get the hang of it.","University of Maryland, College Park",,University of Maryland - College Park,1,Rudrank,Singh,rudrank2004@gmail.com
Untitled,,Draft,Pending,Manage team,4/21/2024 9:15,,,,,,Donya,Johnson,donyajohnson43@gmail.com,,,,,,,Baltimore Polytechnic Institute,0,,,
Housing Homies,https://bitcamp2024.devpost.com/submissions/508301-housing-homies,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:21,"Inspiration

Fannie Mae Challenge

What it does

We have compiled various reputable data sources from across the internet that pertain to housing and natural disaster frequency from the last five years. Using the data, we performed an analysis of the risk index of housing in each county. This data is represented both in a series of maps on our webpage as well as a master table displayed on the home page. We have also implemented a lookup feature that allows users to directly view the data for any county.

How we built it

We used github’s pages feature to host the website, and utilized HTML, CSS, and JavaScript to build the website. To create the maps, we used Esri’s arcGIS (Geographic Information System), plotting every U.S. county by coordinates.

Challenges we ran into

One of the most difficult portions of the project was implementing the county lookup feature and being able to generate a webpage for each county. Another issue we ran into was finding data, which took longer than expected, as the data we located was at times missing many values, or simply not helpful for our analysis.

Accomplishments that we're proud of

We were able to find and use a significant amount of data, compiling various sources and calculating the relative risk to homeowners in each county. Also, we think the website looks nice.

What we learned

We learned a lot about web development and using JavaScript to make more dynamic products. We also gained a deeper understanding of the impact on natural disasters on housing prices, and their impact especially in counties with high poverty rates. Lastly, none of us had ever used arcGIS before, and we learned how to plot, map, and perform data analysis with it.

What's next for Housing Homies

Our next step would be to take more time in our data analysis, as we feel that our analysis could have gone deeper, and expand our dataset beyond just the U.S. and the past five years.
show me the code
",https://aminaha12.github.io/bitcamp.github.io/,https://youtu.be/5ycYVORcR6c,"Best First Time Hack - Bitcamp, Best UI/UX Hack - Bitcamp, Best Use of APIs related to Housing/Climate Change - Fannie Mae","html5, css, javascript, esri",Aminah,Asghar-Ali,aminah.asgharali@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,WE LEARNED A LOT ABOUT WEB DEVELOPMENT AND BONDED AS A TEAM!,UNIVERSITY OF MARYLAND,,"University of Maryland - University College, University of Maryland - College Park",3,Dhruv,Iyer,dhruvsiyer05@gmail.com
SoilGrow,https://bitcamp2024.devpost.com/submissions/508302-soilgrow,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:21,"Inspiration

We wanted to build a hack which focused on sustainability, and through our deliberations we arrived at the idea of helping farmers choose the most sustainable crops they could grow.

What it does

Our project allows the user to upload a photo of soil. This image is sent through TensorFlow's image classification to yield a type of soil, and this category is inserted into an LLM model powered by Chat GPT's API, which will return the most sustainable crops that can be grown in that soil type.

How we built it

The frontend pages are written with the Flutter framework, the backend Chat GPT API was written in Python's FastAPI framework. TensorFlow was used for the image classification.

Challenges we ran into

The Flutter package to upload images had some deprecated features, which we had to resolve. We also had trouble pushing our code to Github, because we did not realize that Github checks for secret API keys and rejects commits which contain them.

By far the biggest challenge we had which we could not resolve in time was that our machine learning models were having trouble. Our first choice was AutoML, but the training process for that was taking an extremely long time. So we decided to switch to TensorFlow, but the library for importing TensorFlow into Flutter was for some reason not importing all the possible functions.

Accomplishments that we're proud of

We are quite proud of the fact that we were able to handle both camera and file uploads on our App via Flutter. It was interesting to see how the uploads were handled. We were proud that our ChatGPT API integration was working properly and we were happy to see that we could connect the Python backend to Flutter front-end via a FastAPI application service. Although our TensorFlow to Flutter was not particularly working, we were proud to still have utilized it to train a machine learning model.

What we learned

We learned how optimize a flutter front-end to take file uploads and camera uploads. We also managed to transfer a file to the backend to work-with. We learned how to utilize ChatGPT API for our LLM, and we learned how to use FastAPI to build a client to connect our Python backend with our Flutter frontend. We also learned how to use TensorFlow to be able to analyze and categorize images and we used it to categorize different soil types. 

What's next for Soil Detection

We plan on efficiently being able to connect the TensorFlow software to the Flutter and we hope to have a seemless application. We hope to utilize the ChatGPT 4 model instead of the 3.5 to derive improved results to users. We also hope to see how we can take into account the climate and appropriate water resources needed for sustainable agriculture and gardening.
",,,,"flutter, fastapi, python, tensorflow, openai",Amanuel,Seifu,amanuelseifu137@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,We were quite enthused with GitHub this weekend.,University of Maryland,No,University of Maryland - College Park,2,Anvay,Panguluri,aspanguluri@gmail.com
DoDCAT,https://bitcamp2024.devpost.com/submissions/508305-dodcat,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:24,"Inspiration

Sponsor challenge

What it does

Stores and analyzes DoD contract data

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for DoDCAT
",https://qhancock.github.io/contract-analysis/,,Best AI Powered Solution for Defense Contracts - Bloomberg Industry Group,sql,Quinn,Hancock,quinnhancock05@gmail.com,,Best App Dev Track Hack - Bitcamp,Yes,"github, AWS, sqlite, nodejs, and Postgres.","University of Maryland, College Park",,University of Maryland - College Park,0,,,
Swift Scroll,https://bitcamp2024.devpost.com/submissions/508308-swift-scroll,Submitted (Gallery/Visible),Pending,Submit,4/21/2024 9:25,"Inspiration

Dinosaur game when your internet goes off.

What it does

Ships go towards you and if you don't attack them, you lose the game.

How we built it

I made an attack animation with sprites I found online and added some conditionals that would set the game out.

Challenges we ran into

Covering up leaks in the conditionals/code.

Accomplishments that we're proud of

It wasn't the hardest thing in the world to me.

What we learned

Block code is very easy.

What's next for Swift Scroll

New animations, more ships, more challenges.
",https://snap.berkeley.edu/project?username=kehindeowens&projectname=scroll%20,,,snap,Kehinde,Owens,kehindeowens88@gmail.com,,I don't want to submit to any Bitcamp track-specific challenges. I understand that I can still participate in other Bitcamp sponsored challenges.,Yes,It was really cool and fun.,Baltimore Polytechnic institute.,,Baltimore Polytechnic Institute,0,,,
Soil Checker,,Draft,Pending,,4/21/2024 9:29,,,,,,Anvay,Panguluri,aspanguluri@gmail.com,,,,,,,University of Maryland - College Park,0,,,
